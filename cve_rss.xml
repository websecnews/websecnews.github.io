<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>New CVE from cve.org feed</title><link>https://github.com/test.xml</link><description>Last 2 days CVE feed!</description><atom:link href="https://github.com/test.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 19 May 2024 19:02:36 +0000</lastBuildDate><item><title>CVE-2024-36070 | tine before 2023.11.8, when an LDAP backend is used, allows anonymous remote attackers to obtain sensitive authentication information via se...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-36070</link><description>tine before 2023.11.8, when an LDAP backend is used, allows anonymous remote attackers to obtain sensitive authentication information via setup.php because of getRegistryData in Setup/Frontend/Json.php. (An update is also available for the 2022.11 series.)</description><pubDate>Sun, 19 May 2024 19:02:37 +0000</pubDate></item><item><title>CVE-2024-36053 | In the mintupload package through 4.2.0 for Linux Mint, service-name mishandling leads to command injection via shell metacharacters in chec...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-36053</link><description>In the mintupload package through 4.2.0 for Linux Mint, service-name mishandling leads to command injection via shell metacharacters in check_connection, drop_data_received_cb, and Service.remove. A user can modify a service name in a ~/.linuxmint/mintUpload/services/service file.</description><pubDate>Sun, 19 May 2024 15:29:06 +0000</pubDate></item><item><title>CVE-2024-5101 | SourceCodester Simple Inventory System updateproduct.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5101</link><description>A vulnerability was found in SourceCodester Simple Inventory System 1.0. It has been declared as critical. This vulnerability affects unknown code of the file updateproduct.php. The manipulation of the argument ITEM leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-265084.</description><pubDate>Sun, 19 May 2024 14:18:40 +0000</pubDate></item><item><title>CVE-2024-5100 | SourceCodester Simple Inventory System tableedit.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5100</link><description>A vulnerability was found in SourceCodester Simple Inventory System 1.0. It has been classified as critical. This affects an unknown part of the file tableedit.php. The manipulation of the argument from/to leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-265083.</description><pubDate>Sun, 19 May 2024 11:36:55 +0000</pubDate></item><item><title>CVE-2024-35947 | dyndbg: fix old BUG_ON in &amp;gt;control parser</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35947</link><description>In the Linux kernel, the following vulnerability has been resolved:

dyndbg: fix old BUG_ON in &gt;control parser

Fix a BUG_ON from 2009.  Even if it looks "unreachable" (I didn't
really look), lets make sure by removing it, doing pr_err and return
-EINVAL instead.</description><pubDate>Sun, 19 May 2024 11:17:06 +0000</pubDate></item><item><title>CVE-2023-52699 | sysv: don&amp;#x27;t call sb_bread() with pointers_lock held</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52699</link><description>In the Linux kernel, the following vulnerability has been resolved:

sysv: don't call sb_bread() with pointers_lock held

syzbot is reporting sleep in atomic context in SysV filesystem [1], for
sb_bread() is called with rw_spinlock held.

A "write_lock(&amp;amp;pointers_lock) =&gt; read_lock(&amp;amp;pointers_lock) deadlock" bug
and a "sb_bread() with write_lock(&amp;amp;pointers_lock)" bug were introduced by
"Replace BKL for chain locking with sysvfs-private rwlock" in Linux 2.5.12.

Then, "[PATCH] err1-40: sysvfs locking fix" in Linux 2.6.8 fixed the
former bug by moving pointers_lock lock to the callers, but instead
introduced a "sb_bread() with read_lock(&amp;amp;pointers_lock)" bug (which made
this problem easier to hit).

Al Viro suggested that why not to do like get_branch()/get_block()/
find_shared() in Minix filesystem does. And doing like that is almost a
revert of "[PATCH] err1-40: sysvfs locking fix" except that get_branch()
 from with find_shared() is called without write_lock(&amp;amp;pointers_lock).</description><pubDate>Sun, 19 May 2024 10:30:40 +0000</pubDate></item><item><title>CVE-2024-35918 | randomize_kstack: Improve entropy diffusion</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35918</link><description>In the Linux kernel, the following vulnerability has been resolved:

randomize_kstack: Improve entropy diffusion

The kstack_offset variable was really only ever using the low bits for
kernel stack offset entropy. Add a ror32() to increase bit diffusion.</description><pubDate>Sun, 19 May 2024 10:30:41 +0000</pubDate></item><item><title>CVE-2024-35919 | media: mediatek: vcodec: adding lock to protect encoder context list</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35919</link><description>In the Linux kernel, the following vulnerability has been resolved:

media: mediatek: vcodec: adding lock to protect encoder context list

Add a lock for the ctx_list, to avoid accessing a NULL pointer
within the 'vpu_enc_ipi_handler' function when the ctx_list has
been deleted due to an unexpected behavior on the SCP IP block.</description><pubDate>Sun, 19 May 2024 10:30:41 +0000</pubDate></item><item><title>CVE-2024-35920 | media: mediatek: vcodec: adding lock to protect decoder context list</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35920</link><description>In the Linux kernel, the following vulnerability has been resolved:

media: mediatek: vcodec: adding lock to protect decoder context list

Add a lock for the ctx_list, to avoid accessing a NULL pointer
within the 'vpu_dec_ipi_handler' function when the ctx_list has
been deleted due to an unexpected behavior on the SCP IP block.

Hardware name: Google juniper sku16 board (DT)
pstate: 20400005 (nzCv daif +PAN -UAO -TCO BTYPE=--)
pc : vpu_dec_ipi_handler+0x58/0x1f8 [mtk_vcodec_dec]
lr : scp_ipi_handler+0xd0/0x194 [mtk_scp]
sp : ffffffc0131dbbd0
x29: ffffffc0131dbbd0 x28: 0000000000000000
x27: ffffff9bb277f348 x26: ffffff9bb242ad00
x25: ffffffd2d440d3b8 x24: ffffffd2a13ff1d4
x23: ffffff9bb7fe85a0 x22: ffffffc0133fbdb0
x21: 0000000000000010 x20: ffffff9b050ea328
x19: ffffffc0131dbc08 x18: 0000000000001000
x17: 0000000000000000 x16: ffffffd2d461c6e0
x15: 0000000000000242 x14: 000000000000018f
x13: 000000000000004d x12: 0000000000000000
x11: 0000000000000001 x10: fffffffffffffff0
x9 : ffffff9bb6e793a8 x8 : 0000000000000000
x7 : 0000000000000000 x6 : 000000000000003f
x5 : 0000000000000040 x4 : fffffffffffffff0
x3 : 0000000000000020 x2 : ffffff9bb6e79080
x1 : 0000000000000010 x0 : ffffffc0131dbc08
Call trace:
vpu_dec_ipi_handler+0x58/0x1f8 [mtk_vcodec_dec (HASH:6c3f 2)]
scp_ipi_handler+0xd0/0x194 [mtk_scp (HASH:7046 3)]
mt8183_scp_irq_handler+0x44/0x88 [mtk_scp (HASH:7046 3)]
scp_irq_handler+0x48/0x90 [mtk_scp (HASH:7046 3)]
irq_thread_fn+0x38/0x94
irq_thread+0x100/0x1c0
kthread+0x140/0x1fc
ret_from_fork+0x10/0x30
Code: 54000088 f94ca50a eb14015f 54000060 (f9400108)
---[ end trace ace43ce36cbd5c93 ]---
Kernel panic - not syncing: Oops: Fatal exception
SMP: stopping secondary CPUs
Kernel Offset: 0x12c4000000 from 0xffffffc010000000
PHYS_OFFSET: 0xffffffe580000000
CPU features: 0x08240002,2188200c
Memory Limit: none</description><pubDate>Sun, 19 May 2024 10:30:41 +0000</pubDate></item><item><title>CVE-2024-35921 | media: mediatek: vcodec: Fix oops when HEVC init fails</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35921</link><description>In the Linux kernel, the following vulnerability has been resolved:

media: mediatek: vcodec: Fix oops when HEVC init fails

The stateless HEVC decoder saves the instance pointer in the context
regardless if the initialization worked or not. This caused a use after
free, when the pointer is freed in case of a failure in the deinit
function.
Only store the instance pointer when the initialization was successful,
to solve this issue.

 Hardware name: Acer Tomato (rev3 - 4) board (DT)
 pstate: 80400009 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
 pc : vcodec_vpu_send_msg+0x4c/0x190 [mtk_vcodec_dec]
 lr : vcodec_send_ap_ipi+0x78/0x170 [mtk_vcodec_dec]
 sp : ffff80008750bc20
 x29: ffff80008750bc20 x28: ffff1299f6d70000 x27: 0000000000000000
 x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000
 x23: ffff80008750bc98 x22: 000000000000a003 x21: ffffd45c4cfae000
 x20: 0000000000000010 x19: ffff1299fd668310 x18: 000000000000001a
 x17: 000000040044ffff x16: ffffd45cb15dc648 x15: 0000000000000000
 x14: ffff1299c08da1c0 x13: ffffd45cb1f87a10 x12: ffffd45cb2f5fe80
 x11: 0000000000000001 x10: 0000000000001b30 x9 : ffffd45c4d12b488
 x8 : 1fffe25339380d81 x7 : 0000000000000001 x6 : ffff1299c9c06c00
 x5 : 0000000000000132 x4 : 0000000000000000 x3 : 0000000000000000
 x2 : 0000000000000010 x1 : ffff80008750bc98 x0 : 0000000000000000
 Call trace:
  vcodec_vpu_send_msg+0x4c/0x190 [mtk_vcodec_dec]
  vcodec_send_ap_ipi+0x78/0x170 [mtk_vcodec_dec]
  vpu_dec_deinit+0x1c/0x30 [mtk_vcodec_dec]
  vdec_hevc_slice_deinit+0x30/0x98 [mtk_vcodec_dec]
  vdec_if_deinit+0x38/0x68 [mtk_vcodec_dec]
  mtk_vcodec_dec_release+0x20/0x40 [mtk_vcodec_dec]
  fops_vcodec_release+0x64/0x118 [mtk_vcodec_dec]
  v4l2_release+0x7c/0x100
  __fput+0x80/0x2d8
  __fput_sync+0x58/0x70
  __arm64_sys_close+0x40/0x90
  invoke_syscall+0x50/0x128
  el0_svc_common.constprop.0+0x48/0xf0
  do_el0_svc+0x24/0x38
  el0_svc+0x38/0xd8
  el0t_64_sync_handler+0xc0/0xc8
  el0t_64_sync+0x1a8/0x1b0
 Code: d503201f f9401660 b900127f b900227f (f9400400)</description><pubDate>Sun, 19 May 2024 10:30:42 +0000</pubDate></item><item><title>CVE-2024-35922 | fbmon: prevent division by zero in fb_videomode_from_videomode()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35922</link><description>In the Linux kernel, the following vulnerability has been resolved:

fbmon: prevent division by zero in fb_videomode_from_videomode()

The expression htotal * vtotal can have a zero value on
overflow. It is necessary to prevent division by zero like in
fb_var_to_videomode().

Found by Linux Verification Center (linuxtesting.org) with Svace.</description><pubDate>Sun, 19 May 2024 10:30:42 +0000</pubDate></item><item><title>CVE-2024-35923 | io_uring: clear opcode specific data for an early failure</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35923</link><description>In the Linux kernel, the following vulnerability has been resolved:

io_uring: clear opcode specific data for an early failure

If failure happens before the opcode prep handler is called, ensure that
we clear the opcode specific area of the request, which holds data
specific to that request type. This prevents errors where opcode
handlers either don't get to clear per-request private data since prep
isn't even called.</description><pubDate>Sun, 19 May 2024 10:30:42 +0000</pubDate></item><item><title>CVE-2024-35924 | usb: typec: ucsi: Limit read size on v1.2</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35924</link><description>In the Linux kernel, the following vulnerability has been resolved:

usb: typec: ucsi: Limit read size on v1.2

Between UCSI 1.2 and UCSI 2.0, the size of the MESSAGE_IN region was
increased from 16 to 256. In order to avoid overflowing reads for older
systems, add a mechanism to use the read UCSI version to truncate read
sizes on UCSI v1.2.</description><pubDate>Sun, 19 May 2024 10:30:43 +0000</pubDate></item><item><title>CVE-2024-35925 | block: prevent division by zero in blk_rq_stat_sum()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35925</link><description>In the Linux kernel, the following vulnerability has been resolved:

block: prevent division by zero in blk_rq_stat_sum()

The expression dst-&gt;nr_samples + src-&gt;nr_samples may
have zero value on overflow. It is necessary to add
a check to avoid division by zero.

Found by Linux Verification Center (linuxtesting.org) with Svace.</description><pubDate>Sun, 19 May 2024 10:30:43 +0000</pubDate></item><item><title>CVE-2024-35926 | crypto: iaa - Fix async_disable descriptor leak</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35926</link><description>In the Linux kernel, the following vulnerability has been resolved:

crypto: iaa - Fix async_disable descriptor leak

The disable_async paths of iaa_compress/decompress() don't free idxd
descriptors in the async_disable case. Currently this only happens in
the testcases where req-&gt;dst is set to null. Add a test to free them
in those paths.</description><pubDate>Sun, 19 May 2024 10:30:43 +0000</pubDate></item><item><title>CVE-2024-35927 | drm: Check output polling initialized before disabling</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35927</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm: Check output polling initialized before disabling

In drm_kms_helper_poll_disable() check if output polling
support is initialized before disabling polling. If not flag
this as a warning.
Additionally in drm_mode_config_helper_suspend() and
drm_mode_config_helper_resume() calls, that re the callers of these
functions, avoid invoking them if polling is not initialized.
For drivers like hyperv-drm, that do not initialize connector
polling, if suspend is called without this check, it leads to
suspend failure with following stack
[  770.719392] Freezing remaining freezable tasks ... (elapsed 0.001 seconds) done.
[  770.720592] printk: Suspending console(s) (use no_console_suspend to debug)
[  770.948823] ------------[ cut here ]------------
[  770.948824] WARNING: CPU: 1 PID: 17197 at kernel/workqueue.c:3162 __flush_work.isra.0+0x212/0x230
[  770.948831] Modules linked in: rfkill nft_counter xt_conntrack xt_owner udf nft_compat crc_itu_t nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 ip_set nf_tables nfnetlink vfat fat mlx5_ib ib_uverbs ib_core mlx5_core intel_rapl_msr intel_rapl_common kvm_amd ccp mlxfw kvm psample hyperv_drm tls drm_shmem_helper drm_kms_helper irqbypass pcspkr syscopyarea sysfillrect sysimgblt hv_balloon hv_utils joydev drm fuse xfs libcrc32c pci_hyperv pci_hyperv_intf sr_mod sd_mod cdrom t10_pi sg hv_storvsc scsi_transport_fc hv_netvsc serio_raw hyperv_keyboard hid_hyperv crct10dif_pclmul crc32_pclmul crc32c_intel hv_vmbus ghash_clmulni_intel dm_mirror dm_region_hash dm_log dm_mod
[  770.948863] CPU: 1 PID: 17197 Comm: systemd-sleep Not tainted 5.14.0-362.2.1.el9_3.x86_64 #1
[  770.948865] Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine, BIOS Hyper-V UEFI Release v4.1 05/09/2022
[  770.948866] RIP: 0010:__flush_work.isra.0+0x212/0x230
[  770.948869] Code: 8b 4d 00 4c 8b 45 08 89 ca 48 c1 e9 04 83 e2 08 83 e1 0f 83 ca 02 89 c8 48 0f ba 6d 00 03 e9 25 ff ff ff 0f 0b e9 4e ff ff ff &lt;0f&gt; 0b 45 31 ed e9 44 ff ff ff e8 8f 89 b2 00 66 66 2e 0f 1f 84 00
[  770.948870] RSP: 0018:ffffaf4ac213fb10 EFLAGS: 00010246
[  770.948871] RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffff8c992857
[  770.948872] RDX: 0000000000000001 RSI: 0000000000000001 RDI: ffff9aad82b00330
[  770.948873] RBP: ffff9aad82b00330 R08: 0000000000000000 R09: ffff9aad87ee3d10
[  770.948874] R10: 0000000000000200 R11: 0000000000000000 R12: ffff9aad82b00330
[  770.948874] R13: 0000000000000001 R14: 0000000000000000 R15: 0000000000000001
[  770.948875] FS:  00007ff1b2f6bb40(0000) GS:ffff9aaf37d00000(0000) knlGS:0000000000000000
[  770.948878] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[  770.948878] CR2: 0000555f345cb666 CR3: 00000001462dc005 CR4: 0000000000370ee0
[  770.948879] Call Trace:
[  770.948880]  
[  770.948881]  ? show_trace_log_lvl+0x1c4/0x2df
[  770.948884]  ? show_trace_log_lvl+0x1c4/0x2df
[  770.948886]  ? __cancel_work_timer+0x103/0x190
[  770.948887]  ? __flush_work.isra.0+0x212/0x230
[  770.948889]  ? __warn+0x81/0x110
[  770.948891]  ? __flush_work.isra.0+0x212/0x230
[  770.948892]  ? report_bug+0x10a/0x140
[  770.948895]  ? handle_bug+0x3c/0x70
[  770.948898]  ? exc_invalid_op+0x14/0x70
[  770.948899]  ? asm_exc_invalid_op+0x16/0x20
[  770.948903]  ? __flush_work.isra.0+0x212/0x230
[  770.948905]  __cancel_work_timer+0x103/0x190
[  770.948907]  ? _raw_spin_unlock_irqrestore+0xa/0x30
[  770.948910]  drm_kms_helper_poll_disable+0x1e/0x40 [drm_kms_helper]
[  770.948923]  drm_mode_config_helper_suspend+0x1c/0x80 [drm_kms_helper]
[  770.948933]  ? __pfx_vmbus_suspend+0x10/0x10 [hv_vmbus]
[  770.948942]  hyperv_vmbus_suspend+0x17/0x40 [hyperv_drm]
[  770.948944]  ? __pfx_vmbus_suspend+0x10/0x10 [hv_vmbus]
[  770.948951]  dpm_run_callback+0x4c/0x140
[  770.948954]  __device_suspend_noir
---truncated---</description><pubDate>Sun, 19 May 2024 10:30:44 +0000</pubDate></item><item><title>CVE-2024-35928 | drm/amd/amdgpu: Fix potential ioremap() memory leaks in amdgpu_device_init()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35928</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/amdgpu: Fix potential ioremap() memory leaks in amdgpu_device_init()

This ensures that the memory mapped by ioremap for adev-&gt;rmmio, is
properly handled in amdgpu_device_init(). If the function exits early
due to an error, the memory is unmapped. If the function completes
successfully, the memory remains mapped.

Reported by smatch:
drivers/gpu/drm/amd/amdgpu/amdgpu_device.c:4337 amdgpu_device_init() warn: 'adev-&gt;rmmio' from ioremap() not released on lines: 4035,4045,4051,4058,4068,4337</description><pubDate>Sun, 19 May 2024 10:30:44 +0000</pubDate></item><item><title>CVE-2024-35929 | rcu/nocb: Fix WARN_ON_ONCE() in the rcu_nocb_bypass_lock()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35929</link><description>In the Linux kernel, the following vulnerability has been resolved:

rcu/nocb: Fix WARN_ON_ONCE() in the rcu_nocb_bypass_lock()

For the kernels built with CONFIG_RCU_NOCB_CPU_DEFAULT_ALL=y and
CONFIG_RCU_LAZY=y, the following scenarios will trigger WARN_ON_ONCE()
in the rcu_nocb_bypass_lock() and rcu_nocb_wait_contended() functions:

        CPU2                                               CPU11
kthread
rcu_nocb_cb_kthread                                       ksys_write
rcu_do_batch                                              vfs_write
rcu_torture_timer_cb                                      proc_sys_write
__kmem_cache_free                                         proc_sys_call_handler
kmemleak_free                                             drop_caches_sysctl_handler
delete_object_full                                        drop_slab
__delete_object                                           shrink_slab
put_object                                                lazy_rcu_shrink_scan
call_rcu                                                  rcu_nocb_flush_bypass
__call_rcu_commn                                            rcu_nocb_bypass_lock
                                                            raw_spin_trylock(&amp;amp;rdp-&gt;nocb_bypass_lock) fail
                                                            atomic_inc(&amp;amp;rdp-&gt;nocb_lock_contended);
rcu_nocb_wait_contended                                     WARN_ON_ONCE(smp_processor_id() != rdp-&gt;cpu);
 WARN_ON_ONCE(atomic_read(&amp;amp;rdp-&gt;nocb_lock_contended))                                          |
                            |_ _ _ _ _ _ _ _ _ _same rdp and rdp-&gt;cpu != 11_ _ _ _ _ _ _ _ _ __|

Reproduce this bug with "echo 3 &gt; /proc/sys/vm/drop_caches".

This commit therefore uses rcu_nocb_try_flush_bypass() instead of
rcu_nocb_flush_bypass() in lazy_rcu_shrink_scan().  If the nocb_bypass
queue is being flushed, then rcu_nocb_try_flush_bypass will return
directly.</description><pubDate>Sun, 19 May 2024 10:30:44 +0000</pubDate></item><item><title>CVE-2024-35930 | scsi: lpfc: Fix possible memory leak in lpfc_rcv_padisc()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35930</link><description>In the Linux kernel, the following vulnerability has been resolved:

scsi: lpfc: Fix possible memory leak in lpfc_rcv_padisc()

The call to lpfc_sli4_resume_rpi() in lpfc_rcv_padisc() may return an
unsuccessful status.  In such cases, the elsiocb is not issued, the
completion is not called, and thus the elsiocb resource is leaked.

Check return value after calling lpfc_sli4_resume_rpi() and conditionally
release the elsiocb resource.</description><pubDate>Sun, 19 May 2024 10:30:45 +0000</pubDate></item><item><title>CVE-2024-35931 | drm/amdgpu: Skip do PCI error slot reset during RAS recovery</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35931</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amdgpu: Skip do PCI error slot reset during RAS recovery

Why:
    The PCI error slot reset maybe triggered after inject ue to UMC multi times, this
    caused system hang.
    [  557.371857] amdgpu 0000:af:00.0: amdgpu: GPU reset succeeded, trying to resume
    [  557.373718] [drm] PCIE GART of 512M enabled.
    [  557.373722] [drm] PTB located at 0x0000031FED700000
    [  557.373788] [drm] VRAM is lost due to GPU reset!
    [  557.373789] [drm] PSP is resuming...
    [  557.547012] mlx5_core 0000:55:00.0: mlx5_pci_err_detected Device state = 1 pci_status: 0. Exit, result = 3, need reset
    [  557.547067] [drm] PCI error: detected callback, state(1)!!
    [  557.547069] [drm] No support for XGMI hive yet...
    [  557.548125] mlx5_core 0000:55:00.0: mlx5_pci_slot_reset Device state = 1 pci_status: 0. Enter
    [  557.607763] mlx5_core 0000:55:00.0: wait vital counter value 0x16b5b after 1 iterations
    [  557.607777] mlx5_core 0000:55:00.0: mlx5_pci_slot_reset Device state = 1 pci_status: 1. Exit, err = 0, result = 5, recovered
    [  557.610492] [drm] PCI error: slot reset callback!!
    ...
    [  560.689382] amdgpu 0000:3f:00.0: amdgpu: GPU reset(2) succeeded!
    [  560.689546] amdgpu 0000:5a:00.0: amdgpu: GPU reset(2) succeeded!
    [  560.689562] general protection fault, probably for non-canonical address 0x5f080b54534f611f: 0000 [#1] SMP NOPTI
    [  560.701008] CPU: 16 PID: 2361 Comm: kworker/u448:9 Tainted: G           OE     5.15.0-91-generic #101-Ubuntu
    [  560.712057] Hardware name: Microsoft C278A/C278A, BIOS C2789.5.BS.1C11.AG.1 11/08/2023
    [  560.720959] Workqueue: amdgpu-reset-hive amdgpu_ras_do_recovery [amdgpu]
    [  560.728887] RIP: 0010:amdgpu_device_gpu_recover.cold+0xbf1/0xcf5 [amdgpu]
    [  560.736891] Code: ff 41 89 c6 e9 1b ff ff ff 44 0f b6 45 b0 e9 4f ff ff ff be 01 00 00 00 4c 89 e7 e8 76 c9 8b ff 44 0f b6 45 b0 e9 3c fd ff ff &lt;48&gt; 83 ba 18 02 00 00 00 0f 84 6a f8 ff ff 48 8d 7a 78 be 01 00 00
    [  560.757967] RSP: 0018:ffa0000032e53d80 EFLAGS: 00010202
    [  560.763848] RAX: ffa00000001dfd10 RBX: ffa0000000197090 RCX: ffa0000032e53db0
    [  560.771856] RDX: 5f080b54534f5f07 RSI: 0000000000000000 RDI: ff11000128100010
    [  560.779867] RBP: ffa0000032e53df0 R08: 0000000000000000 R09: ffffffffffe77f08
    [  560.787879] R10: 0000000000ffff0a R11: 0000000000000001 R12: 0000000000000000
    [  560.795889] R13: ffa0000032e53e00 R14: 0000000000000000 R15: 0000000000000000
    [  560.803889] FS:  0000000000000000(0000) GS:ff11007e7e800000(0000) knlGS:0000000000000000
    [  560.812973] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  560.819422] CR2: 000055a04c118e68 CR3: 0000000007410005 CR4: 0000000000771ee0
    [  560.827433] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  560.835433] DR3: 0000000000000000 DR6: 00000000fffe07f0 DR7: 0000000000000400
    [  560.843444] PKRU: 55555554
    [  560.846480] Call Trace:
    [  560.849225]  
    [  560.851580]  ? show_trace_log_lvl+0x1d6/0x2ea
    [  560.856488]  ? show_trace_log_lvl+0x1d6/0x2ea
    [  560.861379]  ? amdgpu_ras_do_recovery+0x1b2/0x210 [amdgpu]
    [  560.867778]  ? show_regs.part.0+0x23/0x29
    [  560.872293]  ? __die_body.cold+0x8/0xd
    [  560.876502]  ? die_addr+0x3e/0x60
    [  560.880238]  ? exc_general_protection+0x1c5/0x410
    [  560.885532]  ? asm_exc_general_protection+0x27/0x30
    [  560.891025]  ? amdgpu_device_gpu_recover.cold+0xbf1/0xcf5 [amdgpu]
    [  560.898323]  amdgpu_ras_do_recovery+0x1b2/0x210 [amdgpu]
    [  560.904520]  process_one_work+0x228/0x3d0
How:
    In RAS recovery, mode-1 reset is issued from RAS fatal error handling and expected
    all the nodes in a hive to be reset. no need to issue another mode-1 during this procedure.</description><pubDate>Sun, 19 May 2024 10:30:45 +0000</pubDate></item><item><title>CVE-2024-35932 | drm/vc4: don&amp;#x27;t check if plane-&amp;gt;state-&amp;gt;fb == state-&amp;gt;fb</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35932</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/vc4: don't check if plane-&gt;state-&gt;fb == state-&gt;fb

Currently, when using non-blocking commits, we can see the following
kernel warning:

[  110.908514] ------------[ cut here ]------------
[  110.908529] refcount_t: underflow; use-after-free.
[  110.908620] WARNING: CPU: 0 PID: 1866 at lib/refcount.c:87 refcount_dec_not_one+0xb8/0xc0
[  110.908664] Modules linked in: rfcomm snd_seq_dummy snd_hrtimer snd_seq snd_seq_device cmac algif_hash aes_arm64 aes_generic algif_skcipher af_alg bnep hid_logitech_hidpp vc4 brcmfmac hci_uart btbcm brcmutil bluetooth snd_soc_hdmi_codec cfg80211 cec drm_display_helper drm_dma_helper drm_kms_helper snd_soc_core snd_compress snd_pcm_dmaengine fb_sys_fops sysimgblt syscopyarea sysfillrect raspberrypi_hwmon ecdh_generic ecc rfkill libaes i2c_bcm2835 binfmt_misc joydev snd_bcm2835(C) bcm2835_codec(C) bcm2835_isp(C) v4l2_mem2mem videobuf2_dma_contig snd_pcm bcm2835_v4l2(C) raspberrypi_gpiomem bcm2835_mmal_vchiq(C) videobuf2_v4l2 snd_timer videobuf2_vmalloc videobuf2_memops videobuf2_common snd videodev vc_sm_cma(C) mc hid_logitech_dj uio_pdrv_genirq uio i2c_dev drm fuse dm_mod drm_panel_orientation_quirks backlight ip_tables x_tables ipv6
[  110.909086] CPU: 0 PID: 1866 Comm: kodi.bin Tainted: G         C         6.1.66-v8+ #32
[  110.909104] Hardware name: Raspberry Pi 3 Model B Rev 1.2 (DT)
[  110.909114] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
[  110.909132] pc : refcount_dec_not_one+0xb8/0xc0
[  110.909152] lr : refcount_dec_not_one+0xb4/0xc0
[  110.909170] sp : ffffffc00913b9c0
[  110.909177] x29: ffffffc00913b9c0 x28: 000000556969bbb0 x27: 000000556990df60
[  110.909205] x26: 0000000000000002 x25: 0000000000000004 x24: ffffff8004448480
[  110.909230] x23: ffffff800570b500 x22: ffffff802e03a7bc x21: ffffffecfca68c78
[  110.909257] x20: ffffff8002b42000 x19: ffffff802e03a600 x18: 0000000000000000
[  110.909283] x17: 0000000000000011 x16: ffffffffffffffff x15: 0000000000000004
[  110.909308] x14: 0000000000000fff x13: ffffffed577e47e0 x12: 0000000000000003
[  110.909333] x11: 0000000000000000 x10: 0000000000000027 x9 : c912d0d083728c00
[  110.909359] x8 : c912d0d083728c00 x7 : 65646e75203a745f x6 : 746e756f63666572
[  110.909384] x5 : ffffffed579f62ee x4 : ffffffed579eb01e x3 : 0000000000000000
[  110.909409] x2 : 0000000000000000 x1 : ffffffc00913b750 x0 : 0000000000000001
[  110.909434] Call trace:
[  110.909441]  refcount_dec_not_one+0xb8/0xc0
[  110.909461]  vc4_bo_dec_usecnt+0x4c/0x1b0 [vc4]
[  110.909903]  vc4_cleanup_fb+0x44/0x50 [vc4]
[  110.910315]  drm_atomic_helper_cleanup_planes+0x88/0xa4 [drm_kms_helper]
[  110.910669]  vc4_atomic_commit_tail+0x390/0x9dc [vc4]
[  110.911079]  commit_tail+0xb0/0x164 [drm_kms_helper]
[  110.911397]  drm_atomic_helper_commit+0x1d0/0x1f0 [drm_kms_helper]
[  110.911716]  drm_atomic_commit+0xb0/0xdc [drm]
[  110.912569]  drm_mode_atomic_ioctl+0x348/0x4b8 [drm]
[  110.913330]  drm_ioctl_kernel+0xec/0x15c [drm]
[  110.914091]  drm_ioctl+0x24c/0x3b0 [drm]
[  110.914850]  __arm64_sys_ioctl+0x9c/0xd4
[  110.914873]  invoke_syscall+0x4c/0x114
[  110.914897]  el0_svc_common+0xd0/0x118
[  110.914917]  do_el0_svc+0x38/0xd0
[  110.914936]  el0_svc+0x30/0x8c
[  110.914958]  el0t_64_sync_handler+0x84/0xf0
[  110.914979]  el0t_64_sync+0x18c/0x190
[  110.914996] ---[ end trace 0000000000000000 ]---

This happens because, although `prepare_fb` and `cleanup_fb` are
perfectly balanced, we cannot guarantee consistency in the check
plane-&gt;state-&gt;fb == state-&gt;fb. This means that sometimes we can increase
the refcount in `prepare_fb` and don't decrease it in `cleanup_fb`. The
opposite can also be true.

In fact, the struct drm_plane .state shouldn't be accessed directly
but instead, the `drm_atomic_get_new_plane_state()` helper function should
be used. So, we could stick to this check, but using
`drm_atomic_get_new_plane_state()`. But actually, this check is not re
---truncated---</description><pubDate>Sun, 19 May 2024 10:30:45 +0000</pubDate></item><item><title>CVE-2024-35933 | Bluetooth: btintel: Fix null ptr deref in btintel_read_version</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35933</link><description>In the Linux kernel, the following vulnerability has been resolved:

Bluetooth: btintel: Fix null ptr deref in btintel_read_version

If hci_cmd_sync_complete() is triggered and skb is NULL, then
hdev-&gt;req_skb is NULL, which will cause this issue.</description><pubDate>Sun, 19 May 2024 10:30:46 +0000</pubDate></item><item><title>CVE-2024-35934 | net/smc: reduce rtnl pressure in smc_pnet_create_pnetids_list()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35934</link><description>In the Linux kernel, the following vulnerability has been resolved:

net/smc: reduce rtnl pressure in smc_pnet_create_pnetids_list()

Many syzbot reports show extreme rtnl pressure, and many of them hint
that smc acquires rtnl in netns creation for no good reason [1]

This patch returns early from smc_pnet_net_init()
if there is no netdevice yet.

I am not even sure why smc_pnet_create_pnetids_list() even exists,
because smc_pnet_netdev_event() is also calling
smc_pnet_add_base_pnetid() when handling NETDEV_UP event.

[1] extract of typical syzbot reports

2 locks held by syz-executor.3/12252:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.4/12253:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.1/12257:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.2/12261:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.0/12265:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.3/12268:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.4/12271:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.1/12274:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878
2 locks held by syz-executor.2/12280:
  #0: ffffffff8f369610 (pernet_ops_rwsem){++++}-{3:3}, at: copy_net_ns+0x4c7/0x7b0 net/core/net_namespace.c:491
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_create_pnetids_list net/smc/smc_pnet.c:809 [inline]
  #1: ffffffff8f375b88 (rtnl_mutex){+.+.}-{3:3}, at: smc_pnet_net_init+0x10a/0x1e0 net/smc/smc_pnet.c:878</description><pubDate>Sun, 19 May 2024 10:30:46 +0000</pubDate></item><item><title>CVE-2024-35935 | btrfs: send: handle path ref underflow in header iterate_inode_ref()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35935</link><description>In the Linux kernel, the following vulnerability has been resolved:

btrfs: send: handle path ref underflow in header iterate_inode_ref()

Change BUG_ON to proper error handling if building the path buffer
fails. The pointers are not printed so we don't accidentally leak kernel
addresses.</description><pubDate>Sun, 19 May 2024 10:30:46 +0000</pubDate></item><item><title>CVE-2024-35936 | btrfs: handle chunk tree lookup error in btrfs_relocate_sys_chunks()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35936</link><description>In the Linux kernel, the following vulnerability has been resolved:

btrfs: handle chunk tree lookup error in btrfs_relocate_sys_chunks()

The unhandled case in btrfs_relocate_sys_chunks() loop is a corruption,
as it could be caused only by two impossible conditions:

- at first the search key is set up to look for a chunk tree item, with
  offset -1, this is an inexact search and the key-&gt;offset will contain
  the correct offset upon a successful search, a valid chunk tree item
  cannot have an offset -1

- after first successful search, the found_key corresponds to a chunk
  item, the offset is decremented by 1 before the next loop, it's
  impossible to find a chunk item there due to alignment and size
  constraints</description><pubDate>Sun, 19 May 2024 10:30:47 +0000</pubDate></item><item><title>CVE-2024-35937 | wifi: cfg80211: check A-MSDU format more carefully</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35937</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: cfg80211: check A-MSDU format more carefully

If it looks like there's another subframe in the A-MSDU
but the header isn't fully there, we can end up reading
data out of bounds, only to discard later. Make this a
bit more careful and check if the subframe header can
even be present.</description><pubDate>Sun, 19 May 2024 10:30:47 +0000</pubDate></item><item><title>CVE-2024-35938 | wifi: ath11k: decrease MHI channel buffer length to 8KB</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35938</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: ath11k: decrease MHI channel buffer length to 8KB

Currently buf_len field of ath11k_mhi_config_qca6390 is assigned
with 0, making MHI use a default size, 64KB, to allocate channel
buffers. This is likely to fail in some scenarios where system
memory is highly fragmented and memory compaction or reclaim is
not allowed.

There is a fail report which is caused by it:
kworker/u32:45: page allocation failure: order:4, mode:0x40c00(GFP_NOIO|__GFP_COMP), nodemask=(null),cpuset=/,mems_allowed=0
CPU: 0 PID: 19318 Comm: kworker/u32:45 Not tainted 6.8.0-rc3-1.gae4495f-default #1 openSUSE Tumbleweed (unreleased) 493b6d5b382c603654d7a81fc3c144d59a1dfceb
Workqueue: events_unbound async_run_entry_fn
Call Trace:
 
 dump_stack_lvl+0x47/0x60
 warn_alloc+0x13a/0x1b0
 ? srso_alias_return_thunk+0x5/0xfbef5
 ? __alloc_pages_direct_compact+0xab/0x210
 __alloc_pages_slowpath.constprop.0+0xd3e/0xda0
 __alloc_pages+0x32d/0x350
 ? mhi_prepare_channel+0x127/0x2d0 [mhi 40df44e07c05479f7a6e7b90fba9f0e0031a7814]
 __kmalloc_large_node+0x72/0x110
 __kmalloc+0x37c/0x480
 ? mhi_map_single_no_bb+0x77/0xf0 [mhi 40df44e07c05479f7a6e7b90fba9f0e0031a7814]
 ? mhi_prepare_channel+0x127/0x2d0 [mhi 40df44e07c05479f7a6e7b90fba9f0e0031a7814]
 mhi_prepare_channel+0x127/0x2d0 [mhi 40df44e07c05479f7a6e7b90fba9f0e0031a7814]
 __mhi_prepare_for_transfer+0x44/0x80 [mhi 40df44e07c05479f7a6e7b90fba9f0e0031a7814]
 ? __pfx_____mhi_prepare_for_transfer+0x10/0x10 [mhi 40df44e07c05479f7a6e7b90fba9f0e0031a7814]
 device_for_each_child+0x5c/0xa0
 ? __pfx_pci_pm_resume+0x10/0x10
 ath11k_core_resume+0x65/0x100 [ath11k a5094e22d7223135c40d93c8f5321cf09fd85e4e]
 ? srso_alias_return_thunk+0x5/0xfbef5
 ath11k_pci_pm_resume+0x32/0x60 [ath11k_pci 830b7bfc3ea80ebef32e563cafe2cb55e9cc73ec]
 ? srso_alias_return_thunk+0x5/0xfbef5
 dpm_run_callback+0x8c/0x1e0
 device_resume+0x104/0x340
 ? __pfx_dpm_watchdog_handler+0x10/0x10
 async_resume+0x1d/0x30
 async_run_entry_fn+0x32/0x120
 process_one_work+0x168/0x330
 worker_thread+0x2f5/0x410
 ? __pfx_worker_thread+0x10/0x10
 kthread+0xe8/0x120
 ? __pfx_kthread+0x10/0x10
 ret_from_fork+0x34/0x50
 ? __pfx_kthread+0x10/0x10
 ret_from_fork_asm+0x1b/0x30
 

Actually those buffers are used only by QMI target -&gt; host communication.
And for WCN6855 and QCA6390, the largest packet size for that is less
than 6KB. So change buf_len field to 8KB, which results in order 1
allocation if page size is 4KB. In this way, we can at least save some
memory, and as well as decrease the possibility of allocation failure
in those scenarios.

Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3.6510.30</description><pubDate>Sun, 19 May 2024 10:30:47 +0000</pubDate></item><item><title>CVE-2024-35939 | dma-direct: Leak pages on dma_set_decrypted() failure</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35939</link><description>In the Linux kernel, the following vulnerability has been resolved:

dma-direct: Leak pages on dma_set_decrypted() failure

On TDX it is possible for the untrusted host to cause
set_memory_encrypted() or set_memory_decrypted() to fail such that an
error is returned and the resulting memory is shared. Callers need to
take care to handle these errors to avoid returning decrypted (shared)
memory to the page allocator, which could lead to functional or security
issues.

DMA could free decrypted/shared pages if dma_set_decrypted() fails. This
should be a rare case. Just leak the pages in this case instead of
freeing them.</description><pubDate>Sun, 19 May 2024 10:30:48 +0000</pubDate></item><item><title>CVE-2024-35940 | pstore/zone: Add a null pointer check to the psz_kmsg_read</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35940</link><description>In the Linux kernel, the following vulnerability has been resolved:

pstore/zone: Add a null pointer check to the psz_kmsg_read

kasprintf() returns a pointer to dynamically allocated memory
which can be NULL upon failure. Ensure the allocation was successful
by checking the pointer validity.</description><pubDate>Sun, 19 May 2024 10:30:48 +0000</pubDate></item><item><title>CVE-2024-35941 | net: skbuff: add overflow debug check to pull/push helpers</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35941</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: skbuff: add overflow debug check to pull/push helpers

syzbot managed to trigger following splat:
BUG: KASAN: use-after-free in __skb_flow_dissect+0x4a3b/0x5e50
Read of size 1 at addr ffff888208a4000e by task a.out/2313
[..]
  __skb_flow_dissect+0x4a3b/0x5e50
  __skb_get_hash+0xb4/0x400
  ip_tunnel_xmit+0x77e/0x26f0
  ipip_tunnel_xmit+0x298/0x410
  ..

Analysis shows that the skb has a valid -&gt;head, but bogus -&gt;data
pointer.

skb-&gt;data gets its bogus value via the neigh layer, which does:

1556    __skb_pull(skb, skb_network_offset(skb));

... and the skb was already dodgy at this point:

skb_network_offset(skb) returns a negative value due to an
earlier overflow of skb-&gt;network_header (u16).  __skb_pull thus
"adjusts" skb-&gt;data by a huge offset, pointing outside skb-&gt;head
area.

Allow debug builds to splat when we try to pull/push more than
INT_MAX bytes.

After this, the syzkaller reproducer yields a more precise splat
before the flow dissector attempts to read off skb-&gt;data memory:

WARNING: CPU: 5 PID: 2313 at include/linux/skbuff.h:2653 neigh_connected_output+0x28e/0x400
  ip_finish_output2+0xb25/0xed0
  iptunnel_xmit+0x4ff/0x870
  ipgre_xmit+0x78e/0xbb0</description><pubDate>Sun, 19 May 2024 10:30:48 +0000</pubDate></item><item><title>CVE-2024-35942 | pmdomain: imx8mp-blk-ctrl: imx8mp_blk: Add fdcc clock to hdmimix domain</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35942</link><description>In the Linux kernel, the following vulnerability has been resolved:

pmdomain: imx8mp-blk-ctrl: imx8mp_blk: Add fdcc clock to hdmimix domain

According to i.MX8MP RM and HDMI ADD, the fdcc clock is part of
hdmi rx verification IP that should not enable for HDMI TX.
But actually if the clock is disabled before HDMI/LCDIF probe,
LCDIF will not get pixel clock from HDMI PHY and print the error
logs:

[CRTC:39:crtc-2] vblank wait timed out
WARNING: CPU: 2 PID: 9 at drivers/gpu/drm/drm_atomic_helper.c:1634 drm_atomic_helper_wait_for_vblanks.part.0+0x23c/0x260

Add fdcc clock to LCDIF and HDMI TX power domains to fix the issue.</description><pubDate>Sun, 19 May 2024 10:30:49 +0000</pubDate></item><item><title>CVE-2024-35943 | pmdomain: ti: Add a null pointer check to the omap_prm_domain_init</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35943</link><description>In the Linux kernel, the following vulnerability has been resolved:

pmdomain: ti: Add a null pointer check to the omap_prm_domain_init

devm_kasprintf() returns a pointer to dynamically allocated memory
which can be NULL upon failure. Ensure the allocation was successful
by checking the pointer validity.</description><pubDate>Sun, 19 May 2024 10:30:49 +0000</pubDate></item><item><title>CVE-2024-35944 | VMCI: Fix memcpy() run-time warning in dg_dispatch_as_host()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35944</link><description>In the Linux kernel, the following vulnerability has been resolved:

VMCI: Fix memcpy() run-time warning in dg_dispatch_as_host()

Syzkaller hit 'WARNING in dg_dispatch_as_host' bug.

memcpy: detected field-spanning write (size 56) of single field "&amp;amp;dg_info-&gt;msg"
at drivers/misc/vmw_vmci/vmci_datagram.c:237 (size 24)

WARNING: CPU: 0 PID: 1555 at drivers/misc/vmw_vmci/vmci_datagram.c:237
dg_dispatch_as_host+0x88e/0xa60 drivers/misc/vmw_vmci/vmci_datagram.c:237

Some code commentry, based on my understanding:

544 #define VMCI_DG_SIZE(_dg) (VMCI_DG_HEADERSIZE + (size_t)(_dg)-&gt;payload_size)
/// This is 24 + payload_size

memcpy(&amp;amp;dg_info-&gt;msg, dg, dg_size);
	Destination = dg_info-&gt;msg ---&gt; this is a 24 byte
					structure(struct vmci_datagram)
	Source = dg --&gt; this is a 24 byte structure (struct vmci_datagram)
	Size = dg_size = 24 + payload_size

{payload_size = 56-24 =32} -- Syzkaller managed to set payload_size to 32.

 35 struct delayed_datagram_info {
 36         struct datagram_entry *entry;
 37         struct work_struct work;
 38         bool in_dg_host_queue;
 39         /* msg and msg_payload must be together. */
 40         struct vmci_datagram msg;
 41         u8 msg_payload[];
 42 };

So those extra bytes of payload are copied into msg_payload[], a run time
warning is seen while fuzzing with Syzkaller.

One possible way to fix the warning is to split the memcpy() into
two parts -- one -- direct assignment of msg and second taking care of payload.

Gustavo quoted:
"Under FORTIFY_SOURCE we should not copy data across multiple members
in a structure."</description><pubDate>Sun, 19 May 2024 10:30:49 +0000</pubDate></item><item><title>CVE-2024-35945 | net: phy: phy_device: Prevent nullptr exceptions on ISR</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35945</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: phy: phy_device: Prevent nullptr exceptions on ISR

If phydev-&gt;irq is set unconditionally, check
for valid interrupt handler or fall back to polling mode to prevent
nullptr exceptions in interrupt service routine.</description><pubDate>Sun, 19 May 2024 10:30:50 +0000</pubDate></item><item><title>CVE-2024-35946 | wifi: rtw89: fix null pointer access when abort scan</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35946</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: rtw89: fix null pointer access when abort scan

During cancel scan we might use vif that weren't scanning.
Fix this by using the actual scanning vif.</description><pubDate>Sun, 19 May 2024 10:30:50 +0000</pubDate></item><item><title>CVE-2024-35860 | bpf: support deferring bpf_link dealloc to after RCU grace period</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35860</link><description>In the Linux kernel, the following vulnerability has been resolved:

bpf: support deferring bpf_link dealloc to after RCU grace period

BPF link for some program types is passed as a "context" which can be
used by those BPF programs to look up additional information. E.g., for
multi-kprobes and multi-uprobes, link is used to fetch BPF cookie values.

Because of this runtime dependency, when bpf_link refcnt drops to zero
there could still be active BPF programs running accessing link data.

This patch adds generic support to defer bpf_link dealloc callback to
after RCU GP, if requested. This is done by exposing two different
deallocation callbacks, one synchronous and one deferred. If deferred
one is provided, bpf_link_free() will schedule dealloc_deferred()
callback to happen after RCU GP.

BPF is using two flavors of RCU: "classic" non-sleepable one and RCU
tasks trace one. The latter is used when sleepable BPF programs are
used. bpf_link_free() accommodates that by checking underlying BPF
program's sleepable flag, and goes either through normal RCU GP only for
non-sleepable, or through RCU tasks trace GP *and* then normal RCU GP
(taking into account rcu_trace_implies_rcu_gp() optimization), if BPF
program is sleepable.

We use this for multi-kprobe and multi-uprobe links, which dereference
link during program run. We also preventively switch raw_tp link to use
deferred dealloc callback, as upcoming changes in bpf-next tree expose
raw_tp link data (specifically, cookie value) to BPF program at runtime
as well.</description><pubDate>Sun, 19 May 2024 08:37:43 +0000</pubDate></item><item><title>CVE-2024-35861 | smb: client: fix potential UAF in cifs_signal_cifsd_for_reconnect()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35861</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in cifs_signal_cifsd_for_reconnect()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:43 +0000</pubDate></item><item><title>CVE-2024-35862 | smb: client: fix potential UAF in smb2_is_network_name_deleted()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35862</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in smb2_is_network_name_deleted()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:43 +0000</pubDate></item><item><title>CVE-2024-35863 | smb: client: fix potential UAF in is_valid_oplock_break()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35863</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in is_valid_oplock_break()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:44 +0000</pubDate></item><item><title>CVE-2024-35864 | smb: client: fix potential UAF in smb2_is_valid_lease_break()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35864</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in smb2_is_valid_lease_break()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:44 +0000</pubDate></item><item><title>CVE-2024-35865 | smb: client: fix potential UAF in smb2_is_valid_oplock_break()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35865</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in smb2_is_valid_oplock_break()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:44 +0000</pubDate></item><item><title>CVE-2024-35866 | smb: client: fix potential UAF in cifs_dump_full_key()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35866</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in cifs_dump_full_key()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:45 +0000</pubDate></item><item><title>CVE-2024-35867 | smb: client: fix potential UAF in cifs_stats_proc_show()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35867</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in cifs_stats_proc_show()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:45 +0000</pubDate></item><item><title>CVE-2024-35868 | smb: client: fix potential UAF in cifs_stats_proc_write()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35868</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix potential UAF in cifs_stats_proc_write()

Skip sessions that are being teared down (status == SES_EXITING) to
avoid UAF.</description><pubDate>Sun, 19 May 2024 08:37:46 +0000</pubDate></item><item><title>CVE-2024-35869 | smb: client: guarantee refcounted children from parent session</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35869</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: guarantee refcounted children from parent session

Avoid potential use-after-free bugs when walking DFS referrals,
mounting and performing DFS failover by ensuring that all children
from parent @tcon-&gt;ses are also refcounted.  They're all needed across
the entire DFS mount.  Get rid of @tcon-&gt;dfs_ses_list while we're at
it, too.</description><pubDate>Sun, 19 May 2024 08:37:46 +0000</pubDate></item><item><title>CVE-2024-35870 | smb: client: fix UAF in smb2_reconnect_server()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35870</link><description>In the Linux kernel, the following vulnerability has been resolved:

smb: client: fix UAF in smb2_reconnect_server()

The UAF bug is due to smb2_reconnect_server() accessing a session that
is already being teared down by another thread that is executing
__cifs_put_smb_ses().  This can happen when (a) the client has
connection to the server but no session or (b) another thread ends up
setting @ses-&gt;ses_status again to something different than
SES_EXITING.

To fix this, we need to make sure to unconditionally set
@ses-&gt;ses_status to SES_EXITING and prevent any other threads from
setting a new status while we're still tearing it down.

The following can be reproduced by adding some delay to right after
the ipc is freed in __cifs_put_smb_ses() - which will give
smb2_reconnect_server() worker a chance to run and then accessing
@ses-&gt;ipc:

kinit ...
mount.cifs //srv/share /mnt/1 -o sec=krb5,nohandlecache,echo_interval=10
[disconnect srv]
ls /mnt/1 &amp;&gt;/dev/null
sleep 30
kdestroy
[reconnect srv]
sleep 10
umount /mnt/1
...
CIFS: VFS: Verify user has a krb5 ticket and keyutils is installed
CIFS: VFS: \\srv Send error in SessSetup = -126
CIFS: VFS: Verify user has a krb5 ticket and keyutils is installed
CIFS: VFS: \\srv Send error in SessSetup = -126
general protection fault, probably for non-canonical address
0x6b6b6b6b6b6b6b6b: 0000 [#1] PREEMPT SMP NOPTI
CPU: 3 PID: 50 Comm: kworker/3:1 Not tainted 6.9.0-rc2 #1
Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-1.fc39
04/01/2014
Workqueue: cifsiod smb2_reconnect_server [cifs]
RIP: 0010:__list_del_entry_valid_or_report+0x33/0xf0
Code: 4f 08 48 85 d2 74 42 48 85 c9 74 59 48 b8 00 01 00 00 00 00 ad
de 48 39 c2 74 61 48 b8 22 01 00 00 00 00 74 69 &lt;48&gt; 8b 01 48 39 f8 75
7b 48 8b 72 08 48 39 c6 0f 85 88 00 00 00 b8
RSP: 0018:ffffc900001bfd70 EFLAGS: 00010a83
RAX: dead000000000122 RBX: ffff88810da53838 RCX: 6b6b6b6b6b6b6b6b
RDX: 6b6b6b6b6b6b6b6b RSI: ffffffffc02f6878 RDI: ffff88810da53800
RBP: ffff88810da53800 R08: 0000000000000001 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000001 R12: ffff88810c064000
R13: 0000000000000001 R14: ffff88810c064000 R15: ffff8881039cc000
FS: 0000000000000000(0000) GS:ffff888157c00000(0000)
knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007fe3728b1000 CR3: 000000010caa4000 CR4: 0000000000750ef0
PKRU: 55555554
Call Trace:
 
 ? die_addr+0x36/0x90
 ? exc_general_protection+0x1c1/0x3f0
 ? asm_exc_general_protection+0x26/0x30
 ? __list_del_entry_valid_or_report+0x33/0xf0
 __cifs_put_smb_ses+0x1ae/0x500 [cifs]
 smb2_reconnect_server+0x4ed/0x710 [cifs]
 process_one_work+0x205/0x6b0
 worker_thread+0x191/0x360
 ? __pfx_worker_thread+0x10/0x10
 kthread+0xe2/0x110
 ? __pfx_kthread+0x10/0x10
 ret_from_fork+0x34/0x50
 ? __pfx_kthread+0x10/0x10
 ret_from_fork_asm+0x1a/0x30</description><pubDate>Sun, 19 May 2024 08:37:46 +0000</pubDate></item><item><title>CVE-2024-35871 | riscv: process: Fix kernel gp leakage</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35871</link><description>In the Linux kernel, the following vulnerability has been resolved:

riscv: process: Fix kernel gp leakage

childregs represents the registers which are active for the new thread
in user context. For a kernel thread, childregs-&gt;gp is never used since
the kernel gp is not touched by switch_to. For a user mode helper, the
gp value can be observed in user space after execve or possibly by other
means.

[From the email thread]

The /* Kernel thread */ comment is somewhat inaccurate in that it is also used
for user_mode_helper threads, which exec a user process, e.g. /sbin/init or
when /proc/sys/kernel/core_pattern is a pipe. Such threads do not have
PF_KTHREAD set and are valid targets for ptrace etc. even before they exec.

childregs is the *user* context during syscall execution and it is observable
from userspace in at least five ways:

1. kernel_execve does not currently clear integer registers, so the starting
   register state for PID 1 and other user processes started by the kernel has
   sp = user stack, gp = kernel __global_pointer$, all other integer registers
   zeroed by the memset in the patch comment.

   This is a bug in its own right, but I'm unwilling to bet that it is the only
   way to exploit the issue addressed by this patch.

2. ptrace(PTRACE_GETREGSET): you can PTRACE_ATTACH to a user_mode_helper thread
   before it execs, but ptrace requires SIGSTOP to be delivered which can only
   happen at user/kernel boundaries.

3. /proc/*/task/*/syscall: this is perfectly happy to read pt_regs for
   user_mode_helpers before the exec completes, but gp is not one of the
   registers it returns.

4. PERF_SAMPLE_REGS_USER: LOCKDOWN_PERF normally prevents access to kernel
   addresses via PERF_SAMPLE_REGS_INTR, but due to this bug kernel addresses
   are also exposed via PERF_SAMPLE_REGS_USER which is permitted under
   LOCKDOWN_PERF. I have not attempted to write exploit code.

5. Much of the tracing infrastructure allows access to user registers. I have
   not attempted to determine which forms of tracing allow access to user
   registers without already allowing access to kernel registers.</description><pubDate>Sun, 19 May 2024 08:37:47 +0000</pubDate></item><item><title>CVE-2024-35872 | mm/secretmem: fix GUP-fast succeeding on secretmem folios</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35872</link><description>In the Linux kernel, the following vulnerability has been resolved:

mm/secretmem: fix GUP-fast succeeding on secretmem folios

folio_is_secretmem() currently relies on secretmem folios being LRU
folios, to save some cycles.

However, folios might reside in a folio batch without the LRU flag set, or
temporarily have their LRU flag cleared.  Consequently, the LRU flag is
unreliable for this purpose.

In particular, this is the case when secretmem_fault() allocates a fresh
page and calls filemap_add_folio()-&gt;folio_add_lru().  The folio might be
added to the per-cpu folio batch and won't get the LRU flag set until the
batch was drained using e.g., lru_add_drain().

Consequently, folio_is_secretmem() might not detect secretmem folios and
GUP-fast can succeed in grabbing a secretmem folio, crashing the kernel
when we would later try reading/writing to the folio, because the folio
has been unmapped from the directmap.

Fix it by removing that unreliable check.</description><pubDate>Sun, 19 May 2024 08:37:47 +0000</pubDate></item><item><title>CVE-2024-35873 | riscv: Fix vector state restore in rt_sigreturn()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35873</link><description>In the Linux kernel, the following vulnerability has been resolved:

riscv: Fix vector state restore in rt_sigreturn()

The RISC-V Vector specification states in "Appendix D: Calling
Convention for Vector State" [1] that "Executing a system call causes
all caller-saved vector registers (v0-v31, vl, vtype) and vstart to
become unspecified.". In the RISC-V kernel this is called "discarding
the vstate".

Returning from a signal handler via the rt_sigreturn() syscall, vector
discard is also performed. However, this is not an issue since the
vector state should be restored from the sigcontext, and therefore not
care about the vector discard.

The "live state" is the actual vector register in the running context,
and the "vstate" is the vector state of the task. A dirty live state,
means that the vstate and live state are not in synch.

When vectorized user_from_copy() was introduced, an bug sneaked in at
the restoration code, related to the discard of the live state.

An example when this go wrong:

  1. A userland application is executing vector code
  2. The application receives a signal, and the signal handler is
     entered.
  3. The application returns from the signal handler, using the
     rt_sigreturn() syscall.
  4. The live vector state is discarded upon entering the
     rt_sigreturn(), and the live state is marked as "dirty", indicating
     that the live state need to be synchronized with the current
     vstate.
  5. rt_sigreturn() restores the vstate, except the Vector registers,
     from the sigcontext
  6. rt_sigreturn() restores the Vector registers, from the sigcontext,
     and now the vectorized user_from_copy() is used. The dirty live
     state from the discard is saved to the vstate, making the vstate
     corrupt.
  7. rt_sigreturn() returns to the application, which crashes due to
     corrupted vstate.

Note that the vectorized user_from_copy() is invoked depending on the
value of CONFIG_RISCV_ISA_V_UCOPY_THRESHOLD. Default is 768, which
means that vlen has to be larger than 128b for this bug to trigger.

The fix is simply to mark the live state as non-dirty/clean prior
performing the vstate restore.</description><pubDate>Sun, 19 May 2024 08:37:47 +0000</pubDate></item><item><title>CVE-2024-35874 | aio: Fix null ptr deref in aio_complete() wakeup</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35874</link><description>In the Linux kernel, the following vulnerability has been resolved:

aio: Fix null ptr deref in aio_complete() wakeup

list_del_init_careful() needs to be the last access to the wait queue
entry - it effectively unlocks access.

Previously, finish_wait() would see the empty list head and skip taking
the lock, and then we'd return - but the completion path would still
attempt to do the wakeup after the task_struct pointer had been
overwritten.</description><pubDate>Sun, 19 May 2024 08:37:48 +0000</pubDate></item><item><title>CVE-2024-35875 | x86/coco: Require seeding RNG with RDRAND on CoCo systems</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35875</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/coco: Require seeding RNG with RDRAND on CoCo systems

There are few uses of CoCo that don't rely on working cryptography and
hence a working RNG. Unfortunately, the CoCo threat model means that the
VM host cannot be trusted and may actively work against guests to
extract secrets or manipulate computation. Since a malicious host can
modify or observe nearly all inputs to guests, the only remaining source
of entropy for CoCo guests is RDRAND.

If RDRAND is broken -- due to CPU hardware fault -- the RNG as a whole
is meant to gracefully continue on gathering entropy from other sources,
but since there aren't other sources on CoCo, this is catastrophic.
This is mostly a concern at boot time when initially seeding the RNG, as
after that the consequences of a broken RDRAND are much more
theoretical.

So, try at boot to seed the RNG using 256 bits of RDRAND output. If this
fails, panic(). This will also trigger if the system is booted without
RDRAND, as RDRAND is essential for a safe CoCo boot.

Add this deliberately to be "just a CoCo x86 driver feature" and not
part of the RNG itself. Many device drivers and platforms have some
desire to contribute something to the RNG, and add_device_randomness()
is specifically meant for this purpose.

Any driver can call it with seed data of any quality, or even garbage
quality, and it can only possibly make the quality of the RNG better or
have no effect, but can never make it worse.

Rather than trying to build something into the core of the RNG, consider
the particular CoCo issue just a CoCo issue, and therefore separate it
all out into driver (well, arch/platform) code.

  [ bp: Massage commit message. ]</description><pubDate>Sun, 19 May 2024 08:37:48 +0000</pubDate></item><item><title>CVE-2024-35876 | x86/mce: Make sure to grab mce_sysfs_mutex in set_bank()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35876</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/mce: Make sure to grab mce_sysfs_mutex in set_bank()

Modifying a MCA bank's MCA_CTL bits which control which error types to
be reported is done over

  /sys/devices/system/machinecheck/
  ├── machinecheck0
  │   ├── bank0
  │   ├── bank1
  │   ├── bank10
  │   ├── bank11
  ...

sysfs nodes by writing the new bit mask of events to enable.

When the write is accepted, the kernel deletes all current timers and
reinits all banks.

Doing that in parallel can lead to initializing a timer which is already
armed and in the timer wheel, i.e., in use already:

  ODEBUG: init active (active state 0) object: ffff888063a28000 object
  type: timer_list hint: mce_timer_fn+0x0/0x240 arch/x86/kernel/cpu/mce/core.c:2642
  WARNING: CPU: 0 PID: 8120 at lib/debugobjects.c:514
  debug_print_object+0x1a0/0x2a0 lib/debugobjects.c:514

Fix that by grabbing the sysfs mutex as the rest of the MCA sysfs code
does.

Reported by: Yue Sun 
Reported by: xingwei lee</description><pubDate>Sun, 19 May 2024 08:37:48 +0000</pubDate></item><item><title>CVE-2024-35877 | x86/mm/pat: fix VM_PAT handling in COW mappings</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35877</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/mm/pat: fix VM_PAT handling in COW mappings

PAT handling won't do the right thing in COW mappings: the first PTE (or,
in fact, all PTEs) can be replaced during write faults to point at anon
folios.  Reliably recovering the correct PFN and cachemode using
follow_phys() from PTEs will not work in COW mappings.

Using follow_phys(), we might just get the address+protection of the anon
folio (which is very wrong), or fail on swap/nonswap entries, failing
follow_phys() and triggering a WARN_ON_ONCE() in untrack_pfn() and
track_pfn_copy(), not properly calling free_pfn_range().

In free_pfn_range(), we either wouldn't call memtype_free() or would call
it with the wrong range, possibly leaking memory.

To fix that, let's update follow_phys() to refuse returning anon folios,
and fallback to using the stored PFN inside vma-&gt;vm_pgoff for COW mappings
if we run into that.

We will now properly handle untrack_pfn() with COW mappings, where we
don't need the cachemode.  We'll have to fail fork()-&gt;track_pfn_copy() if
the first page was replaced by an anon folio, though: we'd have to store
the cachemode in the VMA to make this work, likely growing the VMA size.

For now, lets keep it simple and let track_pfn_copy() just fail in that
case: it would have failed in the past with swap/nonswap entries already,
and it would have done the wrong thing with anon folios.

Simple reproducer to trigger the WARN_ON_ONCE() in untrack_pfn():

&lt;--- C reproducer ---&gt;
 #include 
 #include mman.h&gt;
 #include 
 #include 

 int main(void)
 {
         struct io_uring_params p = {};
         int ring_fd;
         size_t size;
         char *map;

         ring_fd = io_uring_setup(1, &amp;amp;p);
         if (ring_fd &lt; 0) {
                 perror("io_uring_setup");
                 return 1;
         }
         size = p.sq_off.array + p.sq_entries * sizeof(unsigned);

         * Map the submission queue ring MAP_PRIVATE */
         map = mmap(0, size, PROT_READ | PROT_WRITE, MAP_PRIVATE,
                    ring_fd, IORING_OFF_SQ_RING);
         if (map == MAP_FAILED) {
                 perror("mmap");
                 return 1;
         }

         /* We have at least one page. Let's COW it. */
         *map = 0;
         pause();
         return 0;
 }
&lt;--- C reproducer ---&gt;

On a system with 16 GiB RAM and swap configured:
 # ./iouring &amp;
 # memhog 16G
 # killall iouring
[  301.552930] ------------[ cut here ]------------
[  301.553285] WARNING: CPU: 7 PID: 1402 at arch/x86/mm/pat/memtype.c:1060 untrack_pfn+0xf4/0x100
[  301.553989] Modules linked in: binfmt_misc nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_g
[  301.558232] CPU: 7 PID: 1402 Comm: iouring Not tainted 6.7.5-100.fc38.x86_64 #1
[  301.558772] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.16.3-0-ga6ed6b701f0a-prebu4
[  301.559569] RIP: 0010:untrack_pfn+0xf4/0x100
[  301.559893] Code: 75 c4 eb cf 48 8b 43 10 8b a8 e8 00 00 00 3b 6b 28 74 b8 48 8b 7b 30 e8 ea 1a f7 000
[  301.561189] RSP: 0018:ffffba2c0377fab8 EFLAGS: 00010282
[  301.561590] RAX: 00000000ffffffea RBX: ffff9208c8ce9cc0 RCX: 000000010455e047
[  301.562105] RDX: 07fffffff0eb1e0a RSI: 0000000000000000 RDI: ffff9208c391d200
[  301.562628] RBP: 0000000000000000 R08: ffffba2c0377fab8 R09: 0000000000000000
[  301.563145] R10: ffff9208d2292d50 R11: 0000000000000002 R12: 00007fea890e0000
[  301.563669] R13: 0000000000000000 R14: ffffba2c0377fc08 R15: 0000000000000000
[  301.564186] FS:  0000000000000000(0000) GS:ffff920c2fbc0000(0000) knlGS:0000000000000000
[  301.564773] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[  301.565197] CR2: 00007fea88ee8a20 CR3: 00000001033a8000 CR4: 0000000000750ef0
[  301.565725] PKRU: 55555554
[  301.565944] Call Trace:
[  301.566148]  
[  301.566325]  ? untrack_pfn+0xf4/0x100
[  301.566618]  ? __warn+0x81/0x130
[  301.566876]  ? untrack_pfn+0xf4/0x100
[  3
---truncated---</description><pubDate>Sun, 19 May 2024 08:37:49 +0000</pubDate></item><item><title>CVE-2024-35878 | of: module: prevent NULL pointer dereference in vsnprintf()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35878</link><description>In the Linux kernel, the following vulnerability has been resolved:

of: module: prevent NULL pointer dereference in vsnprintf()

In of_modalias(), we can get passed the str and len parameters which would
cause a kernel oops in vsnprintf() since it only allows passing a NULL ptr
when the length is also 0. Also, we need to filter out the negative values
of the len parameter as these will result in a really huge buffer since
snprintf() takes size_t parameter while ours is ssize_t...

Found by Linux Verification Center (linuxtesting.org) with the Svace static
analysis tool.</description><pubDate>Sun, 19 May 2024 08:37:49 +0000</pubDate></item><item><title>CVE-2024-35879 | of: dynamic: Synchronize of_changeset_destroy() with the devlink removals</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35879</link><description>In the Linux kernel, the following vulnerability has been resolved:

of: dynamic: Synchronize of_changeset_destroy() with the devlink removals

In the following sequence:
  1) of_platform_depopulate()
  2) of_overlay_remove()

During the step 1, devices are destroyed and devlinks are removed.
During the step 2, OF nodes are destroyed but
__of_changeset_entry_destroy() can raise warnings related to missing
of_node_put():
  ERROR: memory leak, expected refcount 1 instead of 2 ...

Indeed, during the devlink removals performed at step 1, the removal
itself releasing the device (and the attached of_node) is done by a job
queued in a workqueue and so, it is done asynchronously with respect to
function calls.
When the warning is present, of_node_put() will be called but wrongly
too late from the workqueue job.

In order to be sure that any ongoing devlink removals are done before
the of_node destruction, synchronize the of_changeset_destroy() with the
devlink removals.</description><pubDate>Sun, 19 May 2024 08:37:49 +0000</pubDate></item><item><title>CVE-2024-35880 | io_uring/kbuf: hold io_buffer_list reference over mmap</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35880</link><description>In the Linux kernel, the following vulnerability has been resolved:

io_uring/kbuf: hold io_buffer_list reference over mmap

If we look up the kbuf, ensure that it doesn't get unregistered until
after we're done with it. Since we're inside mmap, we cannot safely use
the io_uring lock. Rely on the fact that we can lookup the buffer list
under RCU now and grab a reference to it, preventing it from being
unregistered until we're done with it. The lookup returns the
io_buffer_list directly with it referenced.</description><pubDate>Sun, 19 May 2024 08:37:50 +0000</pubDate></item><item><title>CVE-2024-35881 | Revert &amp;quot;drm/amd/display: Send DTBCLK disable message on first commit&amp;quot;</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35881</link><description>In the Linux kernel, the following vulnerability has been resolved:

Revert "drm/amd/display: Send DTBCLK disable message on first commit"

This reverts commit f341055b10bd8be55c3c995dff5f770b236b8ca9.

System hang observed, this commit is thought to be the
regression point.</description><pubDate>Sun, 19 May 2024 08:37:50 +0000</pubDate></item><item><title>CVE-2024-35882 | SUNRPC: Fix a slow server-side memory leak with RPC-over-TCP</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35882</link><description>In the Linux kernel, the following vulnerability has been resolved:

SUNRPC: Fix a slow server-side memory leak with RPC-over-TCP

Jan Schunk reports that his small NFS servers suffer from memory
exhaustion after just a few days. A bisect shows that commit
e18e157bb5c8 ("SUNRPC: Send RPC message on TCP with a single
sock_sendmsg() call") is the first bad commit.

That commit assumed that sock_sendmsg() releases all the pages in
the underlying bio_vec array, but the reality is that it doesn't.
svc_xprt_release() releases the rqst's response pages, but the
record marker page fragment isn't one of those, so it is never
released.

This is a narrow fix that can be applied to stable kernels. A
more extensive fix is in the works.</description><pubDate>Sun, 19 May 2024 08:37:50 +0000</pubDate></item><item><title>CVE-2024-35883 | spi: mchp-pci1xxx: Fix a possible null pointer dereference in pci1xxx_spi_probe</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35883</link><description>In the Linux kernel, the following vulnerability has been resolved:

spi: mchp-pci1xxx: Fix a possible null pointer dereference in pci1xxx_spi_probe

In function pci1xxxx_spi_probe, there is a potential null pointer that
may be caused by a failed memory allocation by the function devm_kzalloc.
Hence, a null pointer check needs to be added to prevent null pointer
dereferencing later in the code.

To fix this issue, spi_bus-&gt;spi_int[iter] should be checked. The memory
allocated by devm_kzalloc will be automatically released, so just directly
return -ENOMEM without worrying about memory leaks.</description><pubDate>Sun, 19 May 2024 08:37:51 +0000</pubDate></item><item><title>CVE-2024-35884 | udp: do not accept non-tunnel GSO skbs landing in a tunnel</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35884</link><description>In the Linux kernel, the following vulnerability has been resolved:

udp: do not accept non-tunnel GSO skbs landing in a tunnel

When rx-udp-gro-forwarding is enabled UDP packets might be GROed when
being forwarded. If such packets might land in a tunnel this can cause
various issues and udp_gro_receive makes sure this isn't the case by
looking for a matching socket. This is performed in
udp4/6_gro_lookup_skb but only in the current netns. This is an issue
with tunneled packets when the endpoint is in another netns. In such
cases the packets will be GROed at the UDP level, which leads to various
issues later on. The same thing can happen with rx-gro-list.

We saw this with geneve packets being GROed at the UDP level. In such
case gso_size is set; later the packet goes through the geneve rx path,
the geneve header is pulled, the offset are adjusted and frag_list skbs
are not adjusted with regard to geneve. When those skbs hit
skb_fragment, it will misbehave. Different outcomes are possible
depending on what the GROed skbs look like; from corrupted packets to
kernel crashes.

One example is a BUG_ON[1] triggered in skb_segment while processing the
frag_list. Because gso_size is wrong (geneve header was pulled)
skb_segment thinks there is "geneve header size" of data in frag_list,
although it's in fact the next packet. The BUG_ON itself has nothing to
do with the issue. This is only one of the potential issues.

Looking up for a matching socket in udp_gro_receive is fragile: the
lookup could be extended to all netns (not speaking about performances)
but nothing prevents those packets from being modified in between and we
could still not find a matching socket. It's OK to keep the current
logic there as it should cover most cases but we also need to make sure
we handle tunnel packets being GROed too early.

This is done by extending the checks in udp_unexpected_gso: GSO packets
lacking the SKB_GSO_UDP_TUNNEL/_CSUM bits and landing in a tunnel must
be segmented.

[1] kernel BUG at net/core/skbuff.c:4408!
    RIP: 0010:skb_segment+0xd2a/0xf70
    __udp_gso_segment+0xaa/0x560</description><pubDate>Sun, 19 May 2024 08:37:51 +0000</pubDate></item><item><title>CVE-2024-35885 | mlxbf_gige: stop interface during shutdown</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35885</link><description>In the Linux kernel, the following vulnerability has been resolved:

mlxbf_gige: stop interface during shutdown

The mlxbf_gige driver intermittantly encounters a NULL pointer
exception while the system is shutting down via "reboot" command.
The mlxbf_driver will experience an exception right after executing
its shutdown() method.  One example of this exception is:

Unable to handle kernel NULL pointer dereference at virtual address 0000000000000070
Mem abort info:
  ESR = 0x0000000096000004
  EC = 0x25: DABT (current EL), IL = 32 bits
  SET = 0, FnV = 0
  EA = 0, S1PTW = 0
  FSC = 0x04: level 0 translation fault
Data abort info:
  ISV = 0, ISS = 0x00000004
  CM = 0, WnR = 0
user pgtable: 4k pages, 48-bit VAs, pgdp=000000011d373000
[0000000000000070] pgd=0000000000000000, p4d=0000000000000000
Internal error: Oops: 96000004 [#1] SMP
CPU: 0 PID: 13 Comm: ksoftirqd/0 Tainted: G S         OE     5.15.0-bf.6.gef6992a #1
Hardware name: https://www.mellanox.com BlueField SoC/BlueField SoC, BIOS 4.0.2.12669 Apr 21 2023
pstate: 20400009 (nzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
pc : mlxbf_gige_handle_tx_complete+0xc8/0x170 [mlxbf_gige]
lr : mlxbf_gige_poll+0x54/0x160 [mlxbf_gige]
sp : ffff8000080d3c10
x29: ffff8000080d3c10 x28: ffffcce72cbb7000 x27: ffff8000080d3d58
x26: ffff0000814e7340 x25: ffff331cd1a05000 x24: ffffcce72c4ea008
x23: ffff0000814e4b40 x22: ffff0000814e4d10 x21: ffff0000814e4128
x20: 0000000000000000 x19: ffff0000814e4a80 x18: ffffffffffffffff
x17: 000000000000001c x16: ffffcce72b4553f4 x15: ffff80008805b8a7
x14: 0000000000000000 x13: 0000000000000030 x12: 0101010101010101
x11: 7f7f7f7f7f7f7f7f x10: c2ac898b17576267 x9 : ffffcce720fa5404
x8 : ffff000080812138 x7 : 0000000000002e9a x6 : 0000000000000080
x5 : ffff00008de3b000 x4 : 0000000000000000 x3 : 0000000000000001
x2 : 0000000000000000 x1 : 0000000000000000 x0 : 0000000000000000
Call trace:
 mlxbf_gige_handle_tx_complete+0xc8/0x170 [mlxbf_gige]
 mlxbf_gige_poll+0x54/0x160 [mlxbf_gige]
 __napi_poll+0x40/0x1c8
 net_rx_action+0x314/0x3a0
 __do_softirq+0x128/0x334
 run_ksoftirqd+0x54/0x6c
 smpboot_thread_fn+0x14c/0x190
 kthread+0x10c/0x110
 ret_from_fork+0x10/0x20
Code: 8b070000 f9000ea0 f95056c0 f86178a1 (b9407002)
---[ end trace 7cc3941aa0d8e6a4 ]---
Kernel panic - not syncing: Oops: Fatal exception in interrupt
Kernel Offset: 0x4ce722520000 from 0xffff800008000000
PHYS_OFFSET: 0x80000000
CPU features: 0x000005c1,a3330e5a
Memory Limit: none
---[ end Kernel panic - not syncing: Oops: Fatal exception in interrupt ]---

During system shutdown, the mlxbf_gige driver's shutdown() is always executed.
However, the driver's stop() method will only execute if networking interface
configuration logic within the Linux distribution has been setup to do so.

If shutdown() executes but stop() does not execute, NAPI remains enabled
and this can lead to an exception if NAPI is scheduled while the hardware
interface has only been partially deinitialized.

The networking interface managed by the mlxbf_gige driver must be properly
stopped during system shutdown so that IFF_UP is cleared, the hardware
interface is put into a clean state, and NAPI is fully deinitialized.</description><pubDate>Sun, 19 May 2024 08:37:51 +0000</pubDate></item><item><title>CVE-2024-35886 | ipv6: Fix infinite recursion in fib6_dump_done().</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35886</link><description>In the Linux kernel, the following vulnerability has been resolved:

ipv6: Fix infinite recursion in fib6_dump_done().

syzkaller reported infinite recursive calls of fib6_dump_done() during
netlink socket destruction.  [1]

From the log, syzkaller sent an AF_UNSPEC RTM_GETROUTE message, and then
the response was generated.  The following recvmmsg() resumed the dump
for IPv6, but the first call of inet6_dump_fib() failed at kzalloc() due
to the fault injection.  [0]

  12:01:34 executing program 3:
  r0 = socket$nl_route(0x10, 0x3, 0x0)
  sendmsg$nl_route(r0, ... snip ...)
  recvmmsg(r0, ... snip ...) (fail_nth: 8)

Here, fib6_dump_done() was set to nlk_sk(sk)-&gt;cb.done, and the next call
of inet6_dump_fib() set it to nlk_sk(sk)-&gt;cb.args[3].  syzkaller stopped
receiving the response halfway through, and finally netlink_sock_destruct()
called nlk_sk(sk)-&gt;cb.done().

fib6_dump_done() calls fib6_dump_end() and nlk_sk(sk)-&gt;cb.done() if it
is still not NULL.  fib6_dump_end() rewrites nlk_sk(sk)-&gt;cb.done() by
nlk_sk(sk)-&gt;cb.args[3], but it has the same function, not NULL, calling
itself recursively and hitting the stack guard page.

To avoid the issue, let's set the destructor after kzalloc().

[0]:
FAULT_INJECTION: forcing a failure.
name failslab, interval 1, probability 0, space 0, times 0
CPU: 1 PID: 432110 Comm: syz-executor.3 Not tainted 6.8.0-12821-g537c2e91d354-dirty #11
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
Call Trace:
 
 dump_stack_lvl (lib/dump_stack.c:117)
 should_fail_ex (lib/fault-inject.c:52 lib/fault-inject.c:153)
 should_failslab (mm/slub.c:3733)
 kmalloc_trace (mm/slub.c:3748 mm/slub.c:3827 mm/slub.c:3992)
 inet6_dump_fib (./include/linux/slab.h:628 ./include/linux/slab.h:749 net/ipv6/ip6_fib.c:662)
 rtnl_dump_all (net/core/rtnetlink.c:4029)
 netlink_dump (net/netlink/af_netlink.c:2269)
 netlink_recvmsg (net/netlink/af_netlink.c:1988)
 ____sys_recvmsg (net/socket.c:1046 net/socket.c:2801)
 ___sys_recvmsg (net/socket.c:2846)
 do_recvmmsg (net/socket.c:2943)
 __x64_sys_recvmmsg (net/socket.c:3041 net/socket.c:3034 net/socket.c:3034)

[1]:
BUG: TASK stack guard page was hit at 00000000f2fa9af1 (stack is 00000000b7912430..000000009a436beb)
stack guard page: 0000 [#1] PREEMPT SMP KASAN
CPU: 1 PID: 223719 Comm: kworker/1:3 Not tainted 6.8.0-12821-g537c2e91d354-dirty #11
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
Workqueue: events netlink_sock_destruct_work
RIP: 0010:fib6_dump_done (net/ipv6/ip6_fib.c:570)
Code: 3c 24 e8 f3 e9 51 fd e9 28 fd ff ff 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 f3 0f 1e fa 41 57 41 56 41 55 41 54 55 48 89 fd &lt;53&gt; 48 8d 5d 60 e8 b6 4d 07 fd 48 89 da 48 b8 00 00 00 00 00 fc ff
RSP: 0018:ffffc9000d980000 EFLAGS: 00010293
RAX: 0000000000000000 RBX: ffffffff84405990 RCX: ffffffff844059d3
RDX: ffff8881028e0000 RSI: ffffffff84405ac2 RDI: ffff88810c02f358
RBP: ffff88810c02f358 R08: 0000000000000007 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000224 R12: 0000000000000000
R13: ffff888007c82c78 R14: ffff888007c82c68 R15: ffff888007c82c68
FS:  0000000000000000(0000) GS:ffff88811b100000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: ffffc9000d97fff8 CR3: 0000000102309002 CR4: 0000000000770ef0
PKRU: 55555554
Call Trace:
 &lt;#DF&gt;
 
 
 fib6_dump_done (net/ipv6/ip6_fib.c:572 (discriminator 1))
 fib6_dump_done (net/ipv6/ip6_fib.c:572 (discriminator 1))
 ...
 fib6_dump_done (net/ipv6/ip6_fib.c:572 (discriminator 1))
 fib6_dump_done (net/ipv6/ip6_fib.c:572 (discriminator 1))
 netlink_sock_destruct (net/netlink/af_netlink.c:401)
 __sk_destruct (net/core/sock.c:2177 (discriminator 2))
 sk_destruct (net/core/sock.c:2224)
 __sk_free (net/core/sock.c:2235)
 sk_free (net/core/sock.c:2246)
 process_one_work (kernel/workqueue.c:3259)
 worker_thread (kernel/workqueue.c:3329 kernel/workqueue.
---truncated---</description><pubDate>Sun, 19 May 2024 08:37:52 +0000</pubDate></item><item><title>CVE-2024-35887 | ax25: fix use-after-free bugs caused by ax25_ds_del_timer</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35887</link><description>In the Linux kernel, the following vulnerability has been resolved:

ax25: fix use-after-free bugs caused by ax25_ds_del_timer

When the ax25 device is detaching, the ax25_dev_device_down()
calls ax25_ds_del_timer() to cleanup the slave_timer. When
the timer handler is running, the ax25_ds_del_timer() that
calls del_timer() in it will return directly. As a result,
the use-after-free bugs could happen, one of the scenarios
is shown below:

      (Thread 1)          |      (Thread 2)
                          | ax25_ds_timeout()
ax25_dev_device_down()    |
  ax25_ds_del_timer()     |
    del_timer()           |
  ax25_dev_put() //FREE   |
                          |  ax25_dev-&gt; //USE

In order to mitigate bugs, when the device is detaching, use
timer_shutdown_sync() to stop the timer.</description><pubDate>Sun, 19 May 2024 08:37:52 +0000</pubDate></item><item><title>CVE-2024-35888 | erspan: make sure erspan_base_hdr is present in skb-&amp;gt;head</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35888</link><description>In the Linux kernel, the following vulnerability has been resolved:

erspan: make sure erspan_base_hdr is present in skb-&gt;head

syzbot reported a problem in ip6erspan_rcv() [1]

Issue is that ip6erspan_rcv() (and erspan_rcv()) no longer make
sure erspan_base_hdr is present in skb linear part (skb-&gt;head)
before getting @ver field from it.

Add the missing pskb_may_pull() calls.

v2: Reload iph pointer in erspan_rcv() after pskb_may_pull()
    because skb-&gt;head might have changed.

[1]

 BUG: KMSAN: uninit-value in pskb_may_pull_reason include/linux/skbuff.h:2742 [inline]
 BUG: KMSAN: uninit-value in pskb_may_pull include/linux/skbuff.h:2756 [inline]
 BUG: KMSAN: uninit-value in ip6erspan_rcv net/ipv6/ip6_gre.c:541 [inline]
 BUG: KMSAN: uninit-value in gre_rcv+0x11f8/0x1930 net/ipv6/ip6_gre.c:610
  pskb_may_pull_reason include/linux/skbuff.h:2742 [inline]
  pskb_may_pull include/linux/skbuff.h:2756 [inline]
  ip6erspan_rcv net/ipv6/ip6_gre.c:541 [inline]
  gre_rcv+0x11f8/0x1930 net/ipv6/ip6_gre.c:610
  ip6_protocol_deliver_rcu+0x1d4c/0x2ca0 net/ipv6/ip6_input.c:438
  ip6_input_finish net/ipv6/ip6_input.c:483 [inline]
  NF_HOOK include/linux/netfilter.h:314 [inline]
  ip6_input+0x15d/0x430 net/ipv6/ip6_input.c:492
  ip6_mc_input+0xa7e/0xc80 net/ipv6/ip6_input.c:586
  dst_input include/net/dst.h:460 [inline]
  ip6_rcv_finish+0x955/0x970 net/ipv6/ip6_input.c:79
  NF_HOOK include/linux/netfilter.h:314 [inline]
  ipv6_rcv+0xde/0x390 net/ipv6/ip6_input.c:310
  __netif_receive_skb_one_core net/core/dev.c:5538 [inline]
  __netif_receive_skb+0x1da/0xa00 net/core/dev.c:5652
  netif_receive_skb_internal net/core/dev.c:5738 [inline]
  netif_receive_skb+0x58/0x660 net/core/dev.c:5798
  tun_rx_batched+0x3ee/0x980 drivers/net/tun.c:1549
  tun_get_user+0x5566/0x69e0 drivers/net/tun.c:2002
  tun_chr_write_iter+0x3af/0x5d0 drivers/net/tun.c:2048
  call_write_iter include/linux/fs.h:2108 [inline]
  new_sync_write fs/read_write.c:497 [inline]
  vfs_write+0xb63/0x1520 fs/read_write.c:590
  ksys_write+0x20f/0x4c0 fs/read_write.c:643
  __do_sys_write fs/read_write.c:655 [inline]
  __se_sys_write fs/read_write.c:652 [inline]
  __x64_sys_write+0x93/0xe0 fs/read_write.c:652
 do_syscall_64+0xd5/0x1f0
 entry_SYSCALL_64_after_hwframe+0x6d/0x75

Uninit was created at:
  slab_post_alloc_hook mm/slub.c:3804 [inline]
  slab_alloc_node mm/slub.c:3845 [inline]
  kmem_cache_alloc_node+0x613/0xc50 mm/slub.c:3888
  kmalloc_reserve+0x13d/0x4a0 net/core/skbuff.c:577
  __alloc_skb+0x35b/0x7a0 net/core/skbuff.c:668
  alloc_skb include/linux/skbuff.h:1318 [inline]
  alloc_skb_with_frags+0xc8/0xbf0 net/core/skbuff.c:6504
  sock_alloc_send_pskb+0xa81/0xbf0 net/core/sock.c:2795
  tun_alloc_skb drivers/net/tun.c:1525 [inline]
  tun_get_user+0x209a/0x69e0 drivers/net/tun.c:1846
  tun_chr_write_iter+0x3af/0x5d0 drivers/net/tun.c:2048
  call_write_iter include/linux/fs.h:2108 [inline]
  new_sync_write fs/read_write.c:497 [inline]
  vfs_write+0xb63/0x1520 fs/read_write.c:590
  ksys_write+0x20f/0x4c0 fs/read_write.c:643
  __do_sys_write fs/read_write.c:655 [inline]
  __se_sys_write fs/read_write.c:652 [inline]
  __x64_sys_write+0x93/0xe0 fs/read_write.c:652
 do_syscall_64+0xd5/0x1f0
 entry_SYSCALL_64_after_hwframe+0x6d/0x75

CPU: 1 PID: 5045 Comm: syz-executor114 Not tainted 6.9.0-rc1-syzkaller-00021-g962490525cff #0</description><pubDate>Sun, 19 May 2024 08:37:52 +0000</pubDate></item><item><title>CVE-2024-35889 | idpf: fix kernel panic on unknown packet types</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35889</link><description>In the Linux kernel, the following vulnerability has been resolved:

idpf: fix kernel panic on unknown packet types

In the very rare case where a packet type is unknown to the driver,
idpf_rx_process_skb_fields would return early without calling
eth_type_trans to set the skb protocol / the network layer handler.
This is especially problematic if tcpdump is running when such a
packet is received, i.e. it would cause a kernel panic.

Instead, call eth_type_trans for every single packet, even when
the packet type is unknown.</description><pubDate>Sun, 19 May 2024 08:37:53 +0000</pubDate></item><item><title>CVE-2024-35890 | gro: fix ownership transfer</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35890</link><description>In the Linux kernel, the following vulnerability has been resolved:

gro: fix ownership transfer

If packets are GROed with fraglist they might be segmented later on and
continue their journey in the stack. In skb_segment_list those skbs can
be reused as-is. This is an issue as their destructor was removed in
skb_gro_receive_list but not the reference to their socket, and then
they can't be orphaned. Fix this by also removing the reference to the
socket.

For example this could be observed,

  kernel BUG at include/linux/skbuff.h:3131!  (skb_orphan)
  RIP: 0010:ip6_rcv_core+0x11bc/0x19a0
  Call Trace:
   ipv6_list_rcv+0x250/0x3f0
   __netif_receive_skb_list_core+0x49d/0x8f0
   netif_receive_skb_list_internal+0x634/0xd40
   napi_complete_done+0x1d2/0x7d0
   gro_cell_poll+0x118/0x1f0

A similar construction is found in skb_gro_receive, apply the same
change there.</description><pubDate>Sun, 19 May 2024 08:37:53 +0000</pubDate></item><item><title>CVE-2024-35891 | net: phy: micrel: Fix potential null pointer dereference</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35891</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: phy: micrel: Fix potential null pointer dereference

In lan8814_get_sig_rx() and lan8814_get_sig_tx() ptp_parse_header() may
return NULL as ptp_header due to abnormal packet type or corrupted packet.
Fix this bug by adding ptp_header check.

Found by Linux Verification Center (linuxtesting.org) with SVACE.</description><pubDate>Sun, 19 May 2024 08:37:53 +0000</pubDate></item><item><title>CVE-2024-35892 | net/sched: fix lockdep splat in qdisc_tree_reduce_backlog()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35892</link><description>In the Linux kernel, the following vulnerability has been resolved:

net/sched: fix lockdep splat in qdisc_tree_reduce_backlog()

qdisc_tree_reduce_backlog() is called with the qdisc lock held,
not RTNL.

We must use qdisc_lookup_rcu() instead of qdisc_lookup()

syzbot reported:

WARNING: suspicious RCU usage
6.1.74-syzkaller #0 Not tainted
-----------------------------
net/sched/sch_api.c:305 suspicious rcu_dereference_protected() usage!

other info that might help us debug this:

rcu_scheduler_active = 2, debug_locks = 1
3 locks held by udevd/1142:
  #0: ffffffff87c729a0 (rcu_read_lock){....}-{1:2}, at: rcu_lock_acquire include/linux/rcupdate.h:306 [inline]
  #0: ffffffff87c729a0 (rcu_read_lock){....}-{1:2}, at: rcu_read_lock include/linux/rcupdate.h:747 [inline]
  #0: ffffffff87c729a0 (rcu_read_lock){....}-{1:2}, at: net_tx_action+0x64a/0x970 net/core/dev.c:5282
  #1: ffff888171861108 (&amp;amp;sch-&gt;q.lock){+.-.}-{2:2}, at: spin_lock include/linux/spinlock.h:350 [inline]
  #1: ffff888171861108 (&amp;amp;sch-&gt;q.lock){+.-.}-{2:2}, at: net_tx_action+0x754/0x970 net/core/dev.c:5297
  #2: ffffffff87c729a0 (rcu_read_lock){....}-{1:2}, at: rcu_lock_acquire include/linux/rcupdate.h:306 [inline]
  #2: ffffffff87c729a0 (rcu_read_lock){....}-{1:2}, at: rcu_read_lock include/linux/rcupdate.h:747 [inline]
  #2: ffffffff87c729a0 (rcu_read_lock){....}-{1:2}, at: qdisc_tree_reduce_backlog+0x84/0x580 net/sched/sch_api.c:792

stack backtrace:
CPU: 1 PID: 1142 Comm: udevd Not tainted 6.1.74-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/25/2024
Call Trace:
 
  [] __dump_stack lib/dump_stack.c:88 [inline]
  [] dump_stack_lvl+0x1b1/0x28f lib/dump_stack.c:106
  [] dump_stack+0x15/0x1e lib/dump_stack.c:113
  [] lockdep_rcu_suspicious+0x1b9/0x260 kernel/locking/lockdep.c:6592
  [] qdisc_lookup+0xac/0x6f0 net/sched/sch_api.c:305
  [] qdisc_tree_reduce_backlog+0x243/0x580 net/sched/sch_api.c:811
  [] pfifo_tail_enqueue+0x32c/0x4b0 net/sched/sch_fifo.c:51
  [] qdisc_enqueue include/net/sch_generic.h:833 [inline]
  [] netem_dequeue+0xeb3/0x15d0 net/sched/sch_netem.c:723
  [] dequeue_skb net/sched/sch_generic.c:292 [inline]
  [] qdisc_restart net/sched/sch_generic.c:397 [inline]
  [] __qdisc_run+0x249/0x1e60 net/sched/sch_generic.c:415
  [] qdisc_run+0xd6/0x260 include/net/pkt_sched.h:125
  [] net_tx_action+0x7c9/0x970 net/core/dev.c:5313
  [] __do_softirq+0x2bd/0x9bd kernel/softirq.c:616
  [] invoke_softirq kernel/softirq.c:447 [inline]
  [] __irq_exit_rcu+0xca/0x230 kernel/softirq.c:700
  [] irq_exit_rcu+0x9/0x20 kernel/softirq.c:712
  [] sysvec_apic_timer_interrupt+0x42/0x90 arch/x86/kernel/apic/apic.c:1107
  [] asm_sysvec_apic_timer_interrupt+0x1b/0x20 arch/x86/include/asm/idtentry.h:656</description><pubDate>Sun, 19 May 2024 08:37:54 +0000</pubDate></item><item><title>CVE-2024-35893 | net/sched: act_skbmod: prevent kernel-infoleak</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35893</link><description>In the Linux kernel, the following vulnerability has been resolved:

net/sched: act_skbmod: prevent kernel-infoleak

syzbot found that tcf_skbmod_dump() was copying four bytes
from kernel stack to user space [1].

The issue here is that 'struct tc_skbmod' has a four bytes hole.

We need to clear the structure before filling fields.

[1]
BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:114 [inline]
 BUG: KMSAN: kernel-infoleak in copy_to_user_iter lib/iov_iter.c:24 [inline]
 BUG: KMSAN: kernel-infoleak in iterate_ubuf include/linux/iov_iter.h:29 [inline]
 BUG: KMSAN: kernel-infoleak in iterate_and_advance2 include/linux/iov_iter.h:245 [inline]
 BUG: KMSAN: kernel-infoleak in iterate_and_advance include/linux/iov_iter.h:271 [inline]
 BUG: KMSAN: kernel-infoleak in _copy_to_iter+0x366/0x2520 lib/iov_iter.c:185
  instrument_copy_to_user include/linux/instrumented.h:114 [inline]
  copy_to_user_iter lib/iov_iter.c:24 [inline]
  iterate_ubuf include/linux/iov_iter.h:29 [inline]
  iterate_and_advance2 include/linux/iov_iter.h:245 [inline]
  iterate_and_advance include/linux/iov_iter.h:271 [inline]
  _copy_to_iter+0x366/0x2520 lib/iov_iter.c:185
  copy_to_iter include/linux/uio.h:196 [inline]
  simple_copy_to_iter net/core/datagram.c:532 [inline]
  __skb_datagram_iter+0x185/0x1000 net/core/datagram.c:420
  skb_copy_datagram_iter+0x5c/0x200 net/core/datagram.c:546
  skb_copy_datagram_msg include/linux/skbuff.h:4050 [inline]
  netlink_recvmsg+0x432/0x1610 net/netlink/af_netlink.c:1962
  sock_recvmsg_nosec net/socket.c:1046 [inline]
  sock_recvmsg+0x2c4/0x340 net/socket.c:1068
  __sys_recvfrom+0x35a/0x5f0 net/socket.c:2242
  __do_sys_recvfrom net/socket.c:2260 [inline]
  __se_sys_recvfrom net/socket.c:2256 [inline]
  __x64_sys_recvfrom+0x126/0x1d0 net/socket.c:2256
 do_syscall_64+0xd5/0x1f0
 entry_SYSCALL_64_after_hwframe+0x6d/0x75

Uninit was stored to memory at:
  pskb_expand_head+0x30f/0x19d0 net/core/skbuff.c:2253
  netlink_trim+0x2c2/0x330 net/netlink/af_netlink.c:1317
  netlink_unicast+0x9f/0x1260 net/netlink/af_netlink.c:1351
  nlmsg_unicast include/net/netlink.h:1144 [inline]
  nlmsg_notify+0x21d/0x2f0 net/netlink/af_netlink.c:2610
  rtnetlink_send+0x73/0x90 net/core/rtnetlink.c:741
  rtnetlink_maybe_send include/linux/rtnetlink.h:17 [inline]
  tcf_add_notify net/sched/act_api.c:2048 [inline]
  tcf_action_add net/sched/act_api.c:2071 [inline]
  tc_ctl_action+0x146e/0x19d0 net/sched/act_api.c:2119
  rtnetlink_rcv_msg+0x1737/0x1900 net/core/rtnetlink.c:6595
  netlink_rcv_skb+0x375/0x650 net/netlink/af_netlink.c:2559
  rtnetlink_rcv+0x34/0x40 net/core/rtnetlink.c:6613
  netlink_unicast_kernel net/netlink/af_netlink.c:1335 [inline]
  netlink_unicast+0xf4c/0x1260 net/netlink/af_netlink.c:1361
  netlink_sendmsg+0x10df/0x11f0 net/netlink/af_netlink.c:1905
  sock_sendmsg_nosec net/socket.c:730 [inline]
  __sock_sendmsg+0x30f/0x380 net/socket.c:745
  ____sys_sendmsg+0x877/0xb60 net/socket.c:2584
  ___sys_sendmsg+0x28d/0x3c0 net/socket.c:2638
  __sys_sendmsg net/socket.c:2667 [inline]
  __do_sys_sendmsg net/socket.c:2676 [inline]
  __se_sys_sendmsg net/socket.c:2674 [inline]
  __x64_sys_sendmsg+0x307/0x4a0 net/socket.c:2674
 do_syscall_64+0xd5/0x1f0
 entry_SYSCALL_64_after_hwframe+0x6d/0x75

Uninit was stored to memory at:
  __nla_put lib/nlattr.c:1041 [inline]
  nla_put+0x1c6/0x230 lib/nlattr.c:1099
  tcf_skbmod_dump+0x23f/0xc20 net/sched/act_skbmod.c:256
  tcf_action_dump_old net/sched/act_api.c:1191 [inline]
  tcf_action_dump_1+0x85e/0x970 net/sched/act_api.c:1227
  tcf_action_dump+0x1fd/0x460 net/sched/act_api.c:1251
  tca_get_fill+0x519/0x7a0 net/sched/act_api.c:1628
  tcf_add_notify_msg net/sched/act_api.c:2023 [inline]
  tcf_add_notify net/sched/act_api.c:2042 [inline]
  tcf_action_add net/sched/act_api.c:2071 [inline]
  tc_ctl_action+0x1365/0x19d0 net/sched/act_api.c:2119
  rtnetlink_rcv_msg+0x1737/0x1900 net/core/rtnetlink.c:6595
  netlink_rcv_skb+0x375/0x650 net/netlink/af_netli
---truncated---</description><pubDate>Sun, 19 May 2024 08:37:54 +0000</pubDate></item><item><title>CVE-2024-35894 | mptcp: prevent BPF accessing lowat from a subflow socket.</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35894</link><description>In the Linux kernel, the following vulnerability has been resolved:

mptcp: prevent BPF accessing lowat from a subflow socket.

Alexei reported the following splat:

 WARNING: CPU: 32 PID: 3276 at net/mptcp/subflow.c:1430 subflow_data_ready+0x147/0x1c0
 Modules linked in: dummy bpf_testmod(O) [last unloaded: bpf_test_no_cfi(O)]
 CPU: 32 PID: 3276 Comm: test_progs Tainted: GO       6.8.0-12873-g2c43c33bfd23
 Call Trace:
  
  mptcp_set_rcvlowat+0x79/0x1d0
  sk_setsockopt+0x6c0/0x1540
  __bpf_setsockopt+0x6f/0x90
  bpf_sock_ops_setsockopt+0x3c/0x90
  bpf_prog_509ce5db2c7f9981_bpf_test_sockopt_int+0xb4/0x11b
  bpf_prog_dce07e362d941d2b_bpf_test_socket_sockopt+0x12b/0x132
  bpf_prog_348c9b5faaf10092_skops_sockopt+0x954/0xe86
  __cgroup_bpf_run_filter_sock_ops+0xbc/0x250
  tcp_connect+0x879/0x1160
  tcp_v6_connect+0x50c/0x870
  mptcp_connect+0x129/0x280
  __inet_stream_connect+0xce/0x370
  inet_stream_connect+0x36/0x50
  bpf_trampoline_6442491565+0x49/0xef
  inet_stream_connect+0x5/0x50
  __sys_connect+0x63/0x90
  __x64_sys_connect+0x14/0x20

The root cause of the issue is that bpf allows accessing mptcp-level
proto_ops from a tcp subflow scope.

Fix the issue detecting the problematic call and preventing any action.</description><pubDate>Sun, 19 May 2024 08:37:55 +0000</pubDate></item><item><title>CVE-2024-35895 | bpf, sockmap: Prevent lock inversion deadlock in map delete elem</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35895</link><description>In the Linux kernel, the following vulnerability has been resolved:

bpf, sockmap: Prevent lock inversion deadlock in map delete elem

syzkaller started using corpuses where a BPF tracing program deletes
elements from a sockmap/sockhash map. Because BPF tracing programs can be
invoked from any interrupt context, locks taken during a map_delete_elem
operation must be hardirq-safe. Otherwise a deadlock due to lock inversion
is possible, as reported by lockdep:

       CPU0                    CPU1
       ----                    ----
  lock(&amp;amp;htab-&gt;buckets[i].lock);
                               local_irq_disable();
                               lock(&amp;amp;host-&gt;lock);
                               lock(&amp;amp;htab-&gt;buckets[i].lock);
  
    lock(&amp;amp;host-&gt;lock);

Locks in sockmap are hardirq-unsafe by design. We expects elements to be
deleted from sockmap/sockhash only in task (normal) context with interrupts
enabled, or in softirq context.

Detect when map_delete_elem operation is invoked from a context which is
_not_ hardirq-unsafe, that is interrupts are disabled, and bail out with an
error.

Note that map updates are not affected by this issue. BPF verifier does not
allow updating sockmap/sockhash from a BPF tracing program today.</description><pubDate>Sun, 19 May 2024 08:37:55 +0000</pubDate></item><item><title>CVE-2024-35896 | netfilter: validate user input for expected length</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35896</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: validate user input for expected length

I got multiple syzbot reports showing old bugs exposed
by BPF after commit 20f2505fb436 ("bpf: Try to avoid kzalloc
in cgroup/{s,g}etsockopt")

setsockopt() @optlen argument should be taken into account
before copying data.

 BUG: KASAN: slab-out-of-bounds in copy_from_sockptr_offset include/linux/sockptr.h:49 [inline]
 BUG: KASAN: slab-out-of-bounds in copy_from_sockptr include/linux/sockptr.h:55 [inline]
 BUG: KASAN: slab-out-of-bounds in do_replace net/ipv4/netfilter/ip_tables.c:1111 [inline]
 BUG: KASAN: slab-out-of-bounds in do_ipt_set_ctl+0x902/0x3dd0 net/ipv4/netfilter/ip_tables.c:1627
Read of size 96 at addr ffff88802cd73da0 by task syz-executor.4/7238

CPU: 1 PID: 7238 Comm: syz-executor.4 Not tainted 6.9.0-rc2-next-20240403-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/27/2024
Call Trace:
 
  __dump_stack lib/dump_stack.c:88 [inline]
  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114
  print_address_description mm/kasan/report.c:377 [inline]
  print_report+0x169/0x550 mm/kasan/report.c:488
  kasan_report+0x143/0x180 mm/kasan/report.c:601
  kasan_check_range+0x282/0x290 mm/kasan/generic.c:189
  __asan_memcpy+0x29/0x70 mm/kasan/shadow.c:105
  copy_from_sockptr_offset include/linux/sockptr.h:49 [inline]
  copy_from_sockptr include/linux/sockptr.h:55 [inline]
  do_replace net/ipv4/netfilter/ip_tables.c:1111 [inline]
  do_ipt_set_ctl+0x902/0x3dd0 net/ipv4/netfilter/ip_tables.c:1627
  nf_setsockopt+0x295/0x2c0 net/netfilter/nf_sockopt.c:101
  do_sock_setsockopt+0x3af/0x720 net/socket.c:2311
  __sys_setsockopt+0x1ae/0x250 net/socket.c:2334
  __do_sys_setsockopt net/socket.c:2343 [inline]
  __se_sys_setsockopt net/socket.c:2340 [inline]
  __x64_sys_setsockopt+0xb5/0xd0 net/socket.c:2340
 do_syscall_64+0xfb/0x240
 entry_SYSCALL_64_after_hwframe+0x72/0x7a
RIP: 0033:0x7fd22067dde9
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 &lt;48&gt; 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fd21f9ff0c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000036
RAX: ffffffffffffffda RBX: 00007fd2207abf80 RCX: 00007fd22067dde9
RDX: 0000000000000040 RSI: 0000000000000000 RDI: 0000000000000003
RBP: 00007fd2206ca47a R08: 0000000000000001 R09: 0000000000000000
R10: 0000000020000880 R11: 0000000000000246 R12: 0000000000000000
R13: 000000000000000b R14: 00007fd2207abf80 R15: 00007ffd2d0170d8
 

Allocated by task 7238:
  kasan_save_stack mm/kasan/common.c:47 [inline]
  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68
  poison_kmalloc_redzone mm/kasan/common.c:370 [inline]
  __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c:387
  kasan_kmalloc include/linux/kasan.h:211 [inline]
  __do_kmalloc_node mm/slub.c:4069 [inline]
  __kmalloc_noprof+0x200/0x410 mm/slub.c:4082
  kmalloc_noprof include/linux/slab.h:664 [inline]
  __cgroup_bpf_run_filter_setsockopt+0xd47/0x1050 kernel/bpf/cgroup.c:1869
  do_sock_setsockopt+0x6b4/0x720 net/socket.c:2293
  __sys_setsockopt+0x1ae/0x250 net/socket.c:2334
  __do_sys_setsockopt net/socket.c:2343 [inline]
  __se_sys_setsockopt net/socket.c:2340 [inline]
  __x64_sys_setsockopt+0xb5/0xd0 net/socket.c:2340
 do_syscall_64+0xfb/0x240
 entry_SYSCALL_64_after_hwframe+0x72/0x7a

The buggy address belongs to the object at ffff88802cd73da0
 which belongs to the cache kmalloc-8 of size 8
The buggy address is located 0 bytes inside of
 allocated 1-byte region [ffff88802cd73da0, ffff88802cd73da1)

The buggy address belongs to the physical page:
page: refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff88802cd73020 pfn:0x2cd73
flags: 0xfff80000000000(node=0|zone=1|lastcpupid=0xfff)
page_type: 0xffffefff(slab)
raw: 00fff80000000000 ffff888015041280 dead000000000100 dead000000000122
raw: ffff88802cd73020 000000008080007f 00000001ffffefff 00
---truncated---</description><pubDate>Sun, 19 May 2024 08:37:55 +0000</pubDate></item><item><title>CVE-2024-35897 | netfilter: nf_tables: discard table flag update with pending basechain deletion</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35897</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: nf_tables: discard table flag update with pending basechain deletion

Hook unregistration is deferred to the commit phase, same occurs with
hook updates triggered by the table dormant flag. When both commands are
combined, this results in deleting a basechain while leaving its hook
still registered in the core.</description><pubDate>Sun, 19 May 2024 08:37:56 +0000</pubDate></item><item><title>CVE-2024-35898 | netfilter: nf_tables: Fix potential data-race in __nft_flowtable_type_get()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35898</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: nf_tables: Fix potential data-race in __nft_flowtable_type_get()

nft_unregister_flowtable_type() within nf_flow_inet_module_exit() can
concurrent with __nft_flowtable_type_get() within nf_tables_newflowtable().
And thhere is not any protection when iterate over nf_tables_flowtables
list in __nft_flowtable_type_get(). Therefore, there is pertential
data-race of nf_tables_flowtables list entry.

Use list_for_each_entry_rcu() to iterate over nf_tables_flowtables list
in __nft_flowtable_type_get(), and use rcu_read_lock() in the caller
nft_flowtable_type_get() to protect the entire type query process.</description><pubDate>Sun, 19 May 2024 08:37:56 +0000</pubDate></item><item><title>CVE-2024-35899 | netfilter: nf_tables: flush pending destroy work before exit_net release</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35899</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: nf_tables: flush pending destroy work before exit_net release

Similar to 2c9f0293280e ("netfilter: nf_tables: flush pending destroy
work before netlink notifier") to address a race between exit_net and
the destroy workqueue.

The trace below shows an element to be released via destroy workqueue
while exit_net path (triggered via module removal) has already released
the set that is used in such transaction.

[ 1360.547789] BUG: KASAN: slab-use-after-free in nf_tables_trans_destroy_work+0x3f5/0x590 [nf_tables]
[ 1360.547861] Read of size 8 at addr ffff888140500cc0 by task kworker/4:1/152465
[ 1360.547870] CPU: 4 PID: 152465 Comm: kworker/4:1 Not tainted 6.8.0+ #359
[ 1360.547882] Workqueue: events nf_tables_trans_destroy_work [nf_tables]
[ 1360.547984] Call Trace:
[ 1360.547991]  
[ 1360.547998]  dump_stack_lvl+0x53/0x70
[ 1360.548014]  print_report+0xc4/0x610
[ 1360.548026]  ? __virt_addr_valid+0xba/0x160
[ 1360.548040]  ? __pfx__raw_spin_lock_irqsave+0x10/0x10
[ 1360.548054]  ? nf_tables_trans_destroy_work+0x3f5/0x590 [nf_tables]
[ 1360.548176]  kasan_report+0xae/0xe0
[ 1360.548189]  ? nf_tables_trans_destroy_work+0x3f5/0x590 [nf_tables]
[ 1360.548312]  nf_tables_trans_destroy_work+0x3f5/0x590 [nf_tables]
[ 1360.548447]  ? __pfx_nf_tables_trans_destroy_work+0x10/0x10 [nf_tables]
[ 1360.548577]  ? _raw_spin_unlock_irq+0x18/0x30
[ 1360.548591]  process_one_work+0x2f1/0x670
[ 1360.548610]  worker_thread+0x4d3/0x760
[ 1360.548627]  ? __pfx_worker_thread+0x10/0x10
[ 1360.548640]  kthread+0x16b/0x1b0
[ 1360.548653]  ? __pfx_kthread+0x10/0x10
[ 1360.548665]  ret_from_fork+0x2f/0x50
[ 1360.548679]  ? __pfx_kthread+0x10/0x10
[ 1360.548690]  ret_from_fork_asm+0x1a/0x30
[ 1360.548707]  

[ 1360.548719] Allocated by task 192061:
[ 1360.548726]  kasan_save_stack+0x20/0x40
[ 1360.548739]  kasan_save_track+0x14/0x30
[ 1360.548750]  __kasan_kmalloc+0x8f/0xa0
[ 1360.548760]  __kmalloc_node+0x1f1/0x450
[ 1360.548771]  nf_tables_newset+0x10c7/0x1b50 [nf_tables]
[ 1360.548883]  nfnetlink_rcv_batch+0xbc4/0xdc0 [nfnetlink]
[ 1360.548909]  nfnetlink_rcv+0x1a8/0x1e0 [nfnetlink]
[ 1360.548927]  netlink_unicast+0x367/0x4f0
[ 1360.548935]  netlink_sendmsg+0x34b/0x610
[ 1360.548944]  ____sys_sendmsg+0x4d4/0x510
[ 1360.548953]  ___sys_sendmsg+0xc9/0x120
[ 1360.548961]  __sys_sendmsg+0xbe/0x140
[ 1360.548971]  do_syscall_64+0x55/0x120
[ 1360.548982]  entry_SYSCALL_64_after_hwframe+0x55/0x5d

[ 1360.548994] Freed by task 192222:
[ 1360.548999]  kasan_save_stack+0x20/0x40
[ 1360.549009]  kasan_save_track+0x14/0x30
[ 1360.549019]  kasan_save_free_info+0x3b/0x60
[ 1360.549028]  poison_slab_object+0x100/0x180
[ 1360.549036]  __kasan_slab_free+0x14/0x30
[ 1360.549042]  kfree+0xb6/0x260
[ 1360.549049]  __nft_release_table+0x473/0x6a0 [nf_tables]
[ 1360.549131]  nf_tables_exit_net+0x170/0x240 [nf_tables]
[ 1360.549221]  ops_exit_list+0x50/0xa0
[ 1360.549229]  free_exit_list+0x101/0x140
[ 1360.549236]  unregister_pernet_operations+0x107/0x160
[ 1360.549245]  unregister_pernet_subsys+0x1c/0x30
[ 1360.549254]  nf_tables_module_exit+0x43/0x80 [nf_tables]
[ 1360.549345]  __do_sys_delete_module+0x253/0x370
[ 1360.549352]  do_syscall_64+0x55/0x120
[ 1360.549360]  entry_SYSCALL_64_after_hwframe+0x55/0x5d

(gdb) list *__nft_release_table+0x473
0x1e033 is in __nft_release_table (net/netfilter/nf_tables_api.c:11354).
11349           list_for_each_entry_safe(flowtable, nf, &amp;amp;table-&gt;flowtables, list) {
11350                   list_del(&amp;amp;flowtable-&gt;list);
11351                   nft_use_dec(&amp;amp;table-&gt;use);
11352                   nf_tables_flowtable_destroy(flowtable);
11353           }
11354           list_for_each_entry_safe(set, ns, &amp;amp;table-&gt;sets, list) {
11355                   list_del(&amp;amp;set-&gt;list);
11356                   nft_use_dec(&amp;amp;table-&gt;use);
11357                   if (set-&gt;flags &amp; (NFT_SET_MAP | NFT_SET_OBJECT))
11358                           nft_map_deactivat
---truncated---</description><pubDate>Sun, 19 May 2024 08:37:56 +0000</pubDate></item><item><title>CVE-2024-35900 | netfilter: nf_tables: reject new basechain after table flag update</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35900</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: nf_tables: reject new basechain after table flag update

When dormant flag is toggled, hooks are disabled in the commit phase by
iterating over current chains in table (existing and new).

The following configuration allows for an inconsistent state:

  add table x
  add chain x y { type filter hook input priority 0; }
  add table x { flags dormant; }
  add chain x w { type filter hook input priority 1; }

which triggers the following warning when trying to unregister chain w
which is already unregistered.

[  127.322252] WARNING: CPU: 7 PID: 1211 at net/netfilter/core.c:50                                                                     1 __nf_unregister_net_hook+0x21a/0x260
[...]
[  127.322519] Call Trace:
[  127.322521]  
[  127.322524]  ? __warn+0x9f/0x1a0
[  127.322531]  ? __nf_unregister_net_hook+0x21a/0x260
[  127.322537]  ? report_bug+0x1b1/0x1e0
[  127.322545]  ? handle_bug+0x3c/0x70
[  127.322552]  ? exc_invalid_op+0x17/0x40
[  127.322556]  ? asm_exc_invalid_op+0x1a/0x20
[  127.322563]  ? kasan_save_free_info+0x3b/0x60
[  127.322570]  ? __nf_unregister_net_hook+0x6a/0x260
[  127.322577]  ? __nf_unregister_net_hook+0x21a/0x260
[  127.322583]  ? __nf_unregister_net_hook+0x6a/0x260
[  127.322590]  ? __nf_tables_unregister_hook+0x8a/0xe0 [nf_tables]
[  127.322655]  nft_table_disable+0x75/0xf0 [nf_tables]
[  127.322717]  nf_tables_commit+0x2571/0x2620 [nf_tables]</description><pubDate>Sun, 19 May 2024 08:37:57 +0000</pubDate></item><item><title>CVE-2024-35901 | net: mana: Fix Rx DMA datasize and skb_over_panic</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35901</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: mana: Fix Rx DMA datasize and skb_over_panic

mana_get_rxbuf_cfg() aligns the RX buffer's DMA datasize to be
multiple of 64. So a packet slightly bigger than mtu+14, say 1536,
can be received and cause skb_over_panic.

Sample dmesg:
[ 5325.237162] skbuff: skb_over_panic: text:ffffffffc043277a len:1536 put:1536 head:ff1100018b517000 data:ff1100018b517100 tail:0x700 end:0x6ea dev:
[ 5325.243689] ------------[ cut here ]------------
[ 5325.245748] kernel BUG at net/core/skbuff.c:192!
[ 5325.247838] invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
[ 5325.258374] RIP: 0010:skb_panic+0x4f/0x60
[ 5325.302941] Call Trace:
[ 5325.304389]  
[ 5325.315794]  ? skb_panic+0x4f/0x60
[ 5325.317457]  ? asm_exc_invalid_op+0x1f/0x30
[ 5325.319490]  ? skb_panic+0x4f/0x60
[ 5325.321161]  skb_put+0x4e/0x50
[ 5325.322670]  mana_poll+0x6fa/0xb50 [mana]
[ 5325.324578]  __napi_poll+0x33/0x1e0
[ 5325.326328]  net_rx_action+0x12e/0x280

As discussed internally, this alignment is not necessary. To fix
this bug, remove it from the code. So oversized packets will be
marked as CQE_RX_TRUNCATED by NIC, and dropped.</description><pubDate>Sun, 19 May 2024 08:37:57 +0000</pubDate></item><item><title>CVE-2024-35902 | net/rds: fix possible cp null dereference</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35902</link><description>In the Linux kernel, the following vulnerability has been resolved:

net/rds: fix possible cp null dereference

cp might be null, calling cp-&gt;cp_conn would produce null dereference

[Simon Horman adds:]

Analysis:

* cp is a parameter of __rds_rdma_map and is not reassigned.

* The following call-sites pass a NULL cp argument to __rds_rdma_map()

  - rds_get_mr()
  - rds_get_mr_for_dest

* Prior to the code above, the following assumes that cp may be NULL
  (which is indicative, but could itself be unnecessary)

	trans_private = rs-&gt;rs_transport-&gt;get_mr(
		sg, nents, rs, &amp;amp;mr-&gt;r_key, cp ? cp-&gt;cp_conn : NULL,
		args-&gt;vec.addr, args-&gt;vec.bytes,
		need_odp ? ODP_ZEROBASED : ODP_NOT_NEEDED);

* The code modified by this patch is guarded by IS_ERR(trans_private),
  where trans_private is assigned as per the previous point in this analysis.

  The only implementation of get_mr that I could locate is rds_ib_get_mr()
  which can return an ERR_PTR if the conn (4th) argument is NULL.

* ret is set to PTR_ERR(trans_private).
  rds_ib_get_mr can return ERR_PTR(-ENODEV) if the conn (4th) argument is NULL.
  Thus ret may be -ENODEV in which case the code in question will execute.

Conclusion:
* cp may be NULL at the point where this patch adds a check;
  this patch does seem to address a possible bug</description><pubDate>Sun, 19 May 2024 08:37:57 +0000</pubDate></item><item><title>CVE-2024-35903 | x86/bpf: Fix IP after emitting call depth accounting</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35903</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/bpf: Fix IP after emitting call depth accounting

Adjust the IP passed to `emit_patch` so it calculates the correct offset
for the CALL instruction if `x86_call_depth_emit_accounting` emits code.
Otherwise we will skip some instructions and most likely crash.</description><pubDate>Sun, 19 May 2024 08:37:58 +0000</pubDate></item><item><title>CVE-2024-35904 | selinux: avoid dereference of garbage after mount failure</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35904</link><description>In the Linux kernel, the following vulnerability has been resolved:

selinux: avoid dereference of garbage after mount failure

In case kern_mount() fails and returns an error pointer return in the
error branch instead of continuing and dereferencing the error pointer.

While on it drop the never read static variable selinuxfs_mount.</description><pubDate>Sun, 19 May 2024 08:37:58 +0000</pubDate></item><item><title>CVE-2024-35905 | bpf: Protect against int overflow for stack access size</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35905</link><description>In the Linux kernel, the following vulnerability has been resolved:

bpf: Protect against int overflow for stack access size

This patch re-introduces protection against the size of access to stack
memory being negative; the access size can appear negative as a result
of overflowing its signed int representation. This should not actually
happen, as there are other protections along the way, but we should
protect against it anyway. One code path was missing such protections
(fixed in the previous patch in the series), causing out-of-bounds array
accesses in check_stack_range_initialized(). This patch causes the
verification of a program with such a non-sensical access size to fail.

This check used to exist in a more indirect way, but was inadvertendly
removed in a833a17aeac7.</description><pubDate>Sun, 19 May 2024 08:37:58 +0000</pubDate></item><item><title>CVE-2024-35906 | drm/amd/display: Send DTBCLK disable message on first commit</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35906</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/display: Send DTBCLK disable message on first commit

[Why]
Previous patch to allow DTBCLK disable didn't address boot case. Driver
thinks DTBCLK is disabled by default, so we don't send disable message to
PMFW. DTBCLK is then enabled at idle desktop on boot, burning power.

[How]
Set dtbclk_en to true on boot so that disable message is sent during first
commit.</description><pubDate>Sun, 19 May 2024 08:37:59 +0000</pubDate></item><item><title>CVE-2024-35907 | mlxbf_gige: call request_irq() after NAPI initialized</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35907</link><description>In the Linux kernel, the following vulnerability has been resolved:

mlxbf_gige: call request_irq() after NAPI initialized

The mlxbf_gige driver encounters a NULL pointer exception in
mlxbf_gige_open() when kdump is enabled.  The sequence to reproduce
the exception is as follows:
a) enable kdump
b) trigger kdump via "echo c &gt; /proc/sysrq-trigger"
c) kdump kernel executes
d) kdump kernel loads mlxbf_gige module
e) the mlxbf_gige module runs its open() as the
   the "oob_net0" interface is brought up
f) mlxbf_gige module will experience an exception
   during its open(), something like:

     Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
     Mem abort info:
       ESR = 0x0000000086000004
       EC = 0x21: IABT (current EL), IL = 32 bits
       SET = 0, FnV = 0
       EA = 0, S1PTW = 0
       FSC = 0x04: level 0 translation fault
     user pgtable: 4k pages, 48-bit VAs, pgdp=00000000e29a4000
     [0000000000000000] pgd=0000000000000000, p4d=0000000000000000
     Internal error: Oops: 0000000086000004 [#1] SMP
     CPU: 0 PID: 812 Comm: NetworkManager Tainted: G           OE     5.15.0-1035-bluefield #37-Ubuntu
     Hardware name: https://www.mellanox.com BlueField-3 SmartNIC Main Card/BlueField-3 SmartNIC Main Card, BIOS 4.6.0.13024 Jan 19 2024
     pstate: 80400009 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
     pc : 0x0
     lr : __napi_poll+0x40/0x230
     sp : ffff800008003e00
     x29: ffff800008003e00 x28: 0000000000000000 x27: 00000000ffffffff
     x26: ffff000066027238 x25: ffff00007cedec00 x24: ffff800008003ec8
     x23: 000000000000012c x22: ffff800008003eb7 x21: 0000000000000000
     x20: 0000000000000001 x19: ffff000066027238 x18: 0000000000000000
     x17: ffff578fcb450000 x16: ffffa870b083c7c0 x15: 0000aaab010441d0
     x14: 0000000000000001 x13: 00726f7272655f65 x12: 6769675f6662786c
     x11: 0000000000000000 x10: 0000000000000000 x9 : ffffa870b0842398
     x8 : 0000000000000004 x7 : fe5a48b9069706ea x6 : 17fdb11fc84ae0d2
     x5 : d94a82549d594f35 x4 : 0000000000000000 x3 : 0000000000400100
     x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff000066027238
     Call trace:
      0x0
      net_rx_action+0x178/0x360
      __do_softirq+0x15c/0x428
      __irq_exit_rcu+0xac/0xec
      irq_exit+0x18/0x2c
      handle_domain_irq+0x6c/0xa0
      gic_handle_irq+0xec/0x1b0
      call_on_irq_stack+0x20/0x2c
      do_interrupt_handler+0x5c/0x70
      el1_interrupt+0x30/0x50
      el1h_64_irq_handler+0x18/0x2c
      el1h_64_irq+0x7c/0x80
      __setup_irq+0x4c0/0x950
      request_threaded_irq+0xf4/0x1bc
      mlxbf_gige_request_irqs+0x68/0x110 [mlxbf_gige]
      mlxbf_gige_open+0x5c/0x170 [mlxbf_gige]
      __dev_open+0x100/0x220
      __dev_change_flags+0x16c/0x1f0
      dev_change_flags+0x2c/0x70
      do_setlink+0x220/0xa40
      __rtnl_newlink+0x56c/0x8a0
      rtnl_newlink+0x58/0x84
      rtnetlink_rcv_msg+0x138/0x3c4
      netlink_rcv_skb+0x64/0x130
      rtnetlink_rcv+0x20/0x30
      netlink_unicast+0x2ec/0x360
      netlink_sendmsg+0x278/0x490
      __sock_sendmsg+0x5c/0x6c
      ____sys_sendmsg+0x290/0x2d4
      ___sys_sendmsg+0x84/0xd0
      __sys_sendmsg+0x70/0xd0
      __arm64_sys_sendmsg+0x2c/0x40
      invoke_syscall+0x78/0x100
      el0_svc_common.constprop.0+0x54/0x184
      do_el0_svc+0x30/0xac
      el0_svc+0x48/0x160
      el0t_64_sync_handler+0xa4/0x12c
      el0t_64_sync+0x1a4/0x1a8
     Code: bad PC value
     ---[ end trace 7d1c3f3bf9d81885 ]---
     Kernel panic - not syncing: Oops: Fatal exception in interrupt
     Kernel Offset: 0x2870a7a00000 from 0xffff800008000000
     PHYS_OFFSET: 0x80000000
     CPU features: 0x0,000005c1,a3332a5a
     Memory Limit: none
     ---[ end Kernel panic - not syncing: Oops: Fatal exception in interrupt ]---

The exception happens because there is a pending RX interrupt before the
call to request_irq(RX IRQ) executes.  Then, the RX IRQ handler fires
immediately after this request_irq() completes. The
---truncated---</description><pubDate>Sun, 19 May 2024 08:37:59 +0000</pubDate></item><item><title>CVE-2024-35908 | tls: get psock ref after taking rxlock to avoid leak</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35908</link><description>In the Linux kernel, the following vulnerability has been resolved:

tls: get psock ref after taking rxlock to avoid leak

At the start of tls_sw_recvmsg, we take a reference on the psock, and
then call tls_rx_reader_lock. If that fails, we return directly
without releasing the reference.

Instead of adding a new label, just take the reference after locking
has succeeded, since we don't need it before.</description><pubDate>Sun, 19 May 2024 08:37:59 +0000</pubDate></item><item><title>CVE-2024-35909 | net: wwan: t7xx: Split 64bit accesses to fix alignment issues</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35909</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: wwan: t7xx: Split 64bit accesses to fix alignment issues

Some of the registers are aligned on a 32bit boundary, causing
alignment faults on 64bit platforms.

 Unable to handle kernel paging request at virtual address ffffffc084a1d004
 Mem abort info:
 ESR = 0x0000000096000061
 EC = 0x25: DABT (current EL), IL = 32 bits
 SET = 0, FnV = 0
 EA = 0, S1PTW = 0
 FSC = 0x21: alignment fault
 Data abort info:
 ISV = 0, ISS = 0x00000061, ISS2 = 0x00000000
 CM = 0, WnR = 1, TnD = 0, TagAccess = 0
 GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0
 swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000046ad6000
 [ffffffc084a1d004] pgd=100000013ffff003, p4d=100000013ffff003, pud=100000013ffff003, pmd=0068000020a00711
 Internal error: Oops: 0000000096000061 [#1] SMP
 Modules linked in: mtk_t7xx(+) qcserial pppoe ppp_async option nft_fib_inet nf_flow_table_inet mt7921u(O) mt7921s(O) mt7921e(O) mt7921_common(O) iwlmvm(O) iwldvm(O) usb_wwan rndis_host qmi_wwan pppox ppp_generic nft_reject_ipv6 nft_reject_ipv4 nft_reject_inet nft_reject nft_redir nft_quota nft_numgen nft_nat nft_masq nft_log nft_limit nft_hash nft_flow_offload nft_fib_ipv6 nft_fib_ipv4 nft_fib nft_ct nft_chain_nat nf_tables nf_nat nf_flow_table nf_conntrack mt7996e(O) mt792x_usb(O) mt792x_lib(O) mt7915e(O) mt76_usb(O) mt76_sdio(O) mt76_connac_lib(O) mt76(O) mac80211(O) iwlwifi(O) huawei_cdc_ncm cfg80211(O) cdc_ncm cdc_ether wwan usbserial usbnet slhc sfp rtc_pcf8563 nfnetlink nf_reject_ipv6 nf_reject_ipv4 nf_log_syslog nf_defrag_ipv6 nf_defrag_ipv4 mt6577_auxadc mdio_i2c libcrc32c compat(O) cdc_wdm cdc_acm at24 crypto_safexcel pwm_fan i2c_gpio i2c_smbus industrialio i2c_algo_bit i2c_mux_reg i2c_mux_pca954x i2c_mux_pca9541 i2c_mux_gpio i2c_mux dummy oid_registry tun sha512_arm64 sha1_ce sha1_generic seqiv
 md5 geniv des_generic libdes cbc authencesn authenc leds_gpio xhci_plat_hcd xhci_pci xhci_mtk_hcd xhci_hcd nvme nvme_core gpio_button_hotplug(O) dm_mirror dm_region_hash dm_log dm_crypt dm_mod dax usbcore usb_common ptp aquantia pps_core mii tpm encrypted_keys trusted
 CPU: 3 PID: 5266 Comm: kworker/u9:1 Tainted: G O 6.6.22 #0
 Hardware name: Bananapi BPI-R4 (DT)
 Workqueue: md_hk_wq t7xx_fsm_uninit [mtk_t7xx]
 pstate: 804000c5 (Nzcv daIF +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
 pc : t7xx_cldma_hw_set_start_addr+0x1c/0x3c [mtk_t7xx]
 lr : t7xx_cldma_start+0xac/0x13c [mtk_t7xx]
 sp : ffffffc085d63d30
 x29: ffffffc085d63d30 x28: 0000000000000000 x27: 0000000000000000
 x26: 0000000000000000 x25: ffffff80c804f2c0 x24: ffffff80ca196c05
 x23: 0000000000000000 x22: ffffff80c814b9b8 x21: ffffff80c814b128
 x20: 0000000000000001 x19: ffffff80c814b080 x18: 0000000000000014
 x17: 0000000055c9806b x16: 000000007c5296d0 x15: 000000000f6bca68
 x14: 00000000dbdbdce4 x13: 000000001aeaf72a x12: 0000000000000001
 x11: 0000000000000000 x10: 0000000000000000 x9 : 0000000000000000
 x8 : ffffff80ca1ef6b4 x7 : ffffff80c814b818 x6 : 0000000000000018
 x5 : 0000000000000870 x4 : 0000000000000000 x3 : 0000000000000000
 x2 : 000000010a947000 x1 : ffffffc084a1d004 x0 : ffffffc084a1d004
 Call trace:
 t7xx_cldma_hw_set_start_addr+0x1c/0x3c [mtk_t7xx]
 t7xx_fsm_uninit+0x578/0x5ec [mtk_t7xx]
 process_one_work+0x154/0x2a0
 worker_thread+0x2ac/0x488
 kthread+0xe0/0xec
 ret_from_fork+0x10/0x20
 Code: f9400800 91001000 8b214001 d50332bf (f9000022)
 ---[ end trace 0000000000000000 ]---

The inclusion of io-64-nonatomic-lo-hi.h indicates that all 64bit
accesses can be replaced by pairs of nonatomic 32bit access.  Fix
alignment by forcing all accesses to be 32bit on 64bit platforms.</description><pubDate>Sun, 19 May 2024 08:38:00 +0000</pubDate></item><item><title>CVE-2024-35910 | tcp: properly terminate timers for kernel sockets</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35910</link><description>In the Linux kernel, the following vulnerability has been resolved:

tcp: properly terminate timers for kernel sockets

We had various syzbot reports about tcp timers firing after
the corresponding netns has been dismantled.

Fortunately Josef Bacik could trigger the issue more often,
and could test a patch I wrote two years ago.

When TCP sockets are closed, we call inet_csk_clear_xmit_timers()
to 'stop' the timers.

inet_csk_clear_xmit_timers() can be called from any context,
including when socket lock is held.
This is the reason it uses sk_stop_timer(), aka del_timer().
This means that ongoing timers might finish much later.

For user sockets, this is fine because each running timer
holds a reference on the socket, and the user socket holds
a reference on the netns.

For kernel sockets, we risk that the netns is freed before
timer can complete, because kernel sockets do not hold
reference on the netns.

This patch adds inet_csk_clear_xmit_timers_sync() function
that using sk_stop_timer_sync() to make sure all timers
are terminated before the kernel socket is released.
Modules using kernel sockets close them in their netns exit()
handler.

Also add sock_not_owned_by_me() helper to get LOCKDEP
support : inet_csk_clear_xmit_timers_sync() must not be called
while socket lock is held.

It is very possible we can revert in the future commit
3a58f13a881e ("net: rds: acquire refcount on TCP sockets")
which attempted to solve the issue in rds only.
(net/smc/af_smc.c and net/mptcp/subflow.c have similar code)

We probably can remove the check_net() tests from
tcp_out_of_resources() and __tcp_close() in the future.</description><pubDate>Sun, 19 May 2024 08:38:00 +0000</pubDate></item><item><title>CVE-2024-35911 | ice: fix memory corruption bug with suspend and rebuild</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35911</link><description>In the Linux kernel, the following vulnerability has been resolved:

ice: fix memory corruption bug with suspend and rebuild

The ice driver would previously panic after suspend. This is caused
from the driver *only* calling the ice_vsi_free_q_vectors() function by
itself, when it is suspending. Since commit b3e7b3a6ee92 ("ice: prevent
NULL pointer deref during reload") the driver has zeroed out
num_q_vectors, and only restored it in ice_vsi_cfg_def().

This further causes the ice_rebuild() function to allocate a zero length
buffer, after which num_q_vectors is updated, and then the new value of
num_q_vectors is used to index into the zero length buffer, which
corrupts memory.

The fix entails making sure all the code referencing num_q_vectors only
does so after it has been reset via ice_vsi_cfg_def().

I didn't perform a full bisect, but I was able to test against 6.1.77
kernel and that ice driver works fine for suspend/resume with no panic,
so sometime since then, this problem was introduced.

Also clean up an un-needed init of a local variable in the function
being modified.

PANIC from 6.8.0-rc1:

[1026674.915596] PM: suspend exit
[1026675.664697] ice 0000:17:00.1: PTP reset successful
[1026675.664707] ice 0000:17:00.1: 2755 msecs passed between update to cached PHC time
[1026675.667660] ice 0000:b1:00.0: PTP reset successful
[1026675.675944] ice 0000:b1:00.0: 2832 msecs passed between update to cached PHC time
[1026677.137733] ixgbe 0000:31:00.0 ens787: NIC Link is Up 1 Gbps, Flow Control: None
[1026677.190201] BUG: kernel NULL pointer dereference, address: 0000000000000010
[1026677.192753] ice 0000:17:00.0: PTP reset successful
[1026677.192764] ice 0000:17:00.0: 4548 msecs passed between update to cached PHC time
[1026677.197928] #PF: supervisor read access in kernel mode
[1026677.197933] #PF: error_code(0x0000) - not-present page
[1026677.197937] PGD 1557a7067 P4D 0
[1026677.212133] ice 0000:b1:00.1: PTP reset successful
[1026677.212143] ice 0000:b1:00.1: 4344 msecs passed between update to cached PHC time
[1026677.212575]
[1026677.243142] Oops: 0000 [#1] PREEMPT SMP NOPTI
[1026677.247918] CPU: 23 PID: 42790 Comm: kworker/23:0 Kdump: loaded Tainted: G        W          6.8.0-rc1+ #1
[1026677.257989] Hardware name: Intel Corporation M50CYP2SBSTD/M50CYP2SBSTD, BIOS SE5C620.86B.01.01.0005.2202160810 02/16/2022
[1026677.269367] Workqueue: ice ice_service_task [ice]
[1026677.274592] RIP: 0010:ice_vsi_rebuild_set_coalesce+0x130/0x1e0 [ice]
[1026677.281421] Code: 0f 84 3a ff ff ff 41 0f b7 74 ec 02 66 89 b0 22 02 00 00 81 e6 ff 1f 00 00 e8 ec fd ff ff e9 35 ff ff ff 48 8b 43 30 49 63 ed &lt;41&gt; 0f b7 34 24 41 83 c5 01 48 8b 3c e8 66 89 b7 aa 02 00 00 81 e6
[1026677.300877] RSP: 0018:ff3be62a6399bcc0 EFLAGS: 00010202
[1026677.306556] RAX: ff28691e28980828 RBX: ff28691e41099828 RCX: 0000000000188000
[1026677.314148] RDX: 0000000000000000 RSI: 0000000000000010 RDI: ff28691e41099828
[1026677.321730] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
[1026677.329311] R10: 0000000000000007 R11: ffffffffffffffc0 R12: 0000000000000010
[1026677.336896] R13: 0000000000000000 R14: 0000000000000000 R15: ff28691e0eaa81a0
[1026677.344472] FS:  0000000000000000(0000) GS:ff28693cbffc0000(0000) knlGS:0000000000000000
[1026677.353000] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[1026677.359195] CR2: 0000000000000010 CR3: 0000000128df4001 CR4: 0000000000771ef0
[1026677.366779] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
[1026677.374369] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
[1026677.381952] PKRU: 55555554
[1026677.385116] Call Trace:
[1026677.388023]  
[1026677.390589]  ? __die+0x20/0x70
[1026677.394105]  ? page_fault_oops+0x82/0x160
[1026677.398576]  ? do_user_addr_fault+0x65/0x6a0
[1026677.403307]  ? exc_page_fault+0x6a/0x150
[1026677.407694]  ? asm_exc_page_fault+0x22/0x30
[1026677.412349]  ? ice_vsi_rebuild_set_coalesce+0x130/0x1e0 [ice]
[1026677.4186
---truncated---</description><pubDate>Sun, 19 May 2024 08:38:00 +0000</pubDate></item><item><title>CVE-2024-35912 | wifi: iwlwifi: mvm: rfi: fix potential response leaks</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35912</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: iwlwifi: mvm: rfi: fix potential response leaks

If the rx payload length check fails, or if kmemdup() fails,
we still need to free the command response. Fix that.</description><pubDate>Sun, 19 May 2024 08:38:01 +0000</pubDate></item><item><title>CVE-2024-35913 | wifi: iwlwifi: mvm: pick the version of SESSION_PROTECTION_NOTIF</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35913</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: iwlwifi: mvm: pick the version of SESSION_PROTECTION_NOTIF

When we want to know whether we should look for the mac_id or the
link_id in struct iwl_mvm_session_prot_notif, we should look at the
version of SESSION_PROTECTION_NOTIF.

This causes WARNINGs:

WARNING: CPU: 0 PID: 11403 at drivers/net/wireless/intel/iwlwifi/mvm/time-event.c:959 iwl_mvm_rx_session_protect_notif+0x333/0x340 [iwlmvm]
RIP: 0010:iwl_mvm_rx_session_protect_notif+0x333/0x340 [iwlmvm]
Code: 00 49 c7 84 24 48 07 00 00 00 00 00 00 41 c6 84 24 78 07 00 00 ff 4c 89 f7 e8 e9 71 54 d9 e9 7d fd ff ff 0f 0b e9 23 fe ff ff &lt;0f&gt; 0b e9 1c fe ff ff 66 0f 1f 44 00 00 90 90 90 90 90 90 90 90 90
RSP: 0018:ffffb4bb00003d40 EFLAGS: 00010202
RAX: 0000000000000000 RBX: ffff9ae63a361000 RCX: ffff9ae4a98b60d4
RDX: ffff9ae4588499c0 RSI: 0000000000000305 RDI: ffff9ae4a98b6358
RBP: ffffb4bb00003d68 R08: 0000000000000003 R09: 0000000000000010
R10: ffffb4bb00003d00 R11: 000000000000000f R12: ffff9ae441399050
R13: ffff9ae4761329e8 R14: 0000000000000001 R15: 0000000000000000
FS:  0000000000000000(0000) GS:ffff9ae7af400000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 000055fb75680018 CR3: 00000003dae32006 CR4: 0000000000f70ef0
PKRU: 55555554
Call Trace:
 
 ? show_regs+0x69/0x80
 ? __warn+0x8d/0x150
 ? iwl_mvm_rx_session_protect_notif+0x333/0x340 [iwlmvm]
 ? report_bug+0x196/0x1c0
 ? handle_bug+0x45/0x80
 ? exc_invalid_op+0x1c/0xb0
 ? asm_exc_invalid_op+0x1f/0x30
 ? iwl_mvm_rx_session_protect_notif+0x333/0x340 [iwlmvm]
 iwl_mvm_rx_common+0x115/0x340 [iwlmvm]
 iwl_mvm_rx_mq+0xa6/0x100 [iwlmvm]
 iwl_pcie_rx_handle+0x263/0xa10 [iwlwifi]
 iwl_pcie_napi_poll_msix+0x32/0xd0 [iwlwifi]</description><pubDate>Sun, 19 May 2024 08:38:01 +0000</pubDate></item><item><title>CVE-2024-35914 | nfsd: Fix error cleanup path in nfsd_rename()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35914</link><description>In the Linux kernel, the following vulnerability has been resolved:

nfsd: Fix error cleanup path in nfsd_rename()

Commit a8b0026847b8 ("rename(): avoid a deadlock in the case of parents
having no common ancestor") added an error bail out path. However this
path does not drop the remount protection that has been acquired. Fix
the cleanup path to properly drop the remount protection.</description><pubDate>Sun, 19 May 2024 08:38:01 +0000</pubDate></item><item><title>CVE-2024-35915 | nfc: nci: Fix uninit-value in nci_dev_up and nci_ntf_packet</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35915</link><description>In the Linux kernel, the following vulnerability has been resolved:

nfc: nci: Fix uninit-value in nci_dev_up and nci_ntf_packet

syzbot reported the following uninit-value access issue [1][2]:

nci_rx_work() parses and processes received packet. When the payload
length is zero, each message type handler reads uninitialized payload
and KMSAN detects this issue. The receipt of a packet with a zero-size
payload is considered unexpected, and therefore, such packets should be
silently discarded.

This patch resolved this issue by checking payload size before calling
each message type handler codes.</description><pubDate>Sun, 19 May 2024 08:38:02 +0000</pubDate></item><item><title>CVE-2024-35916 | dma-buf: Fix NULL pointer dereference in sanitycheck()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35916</link><description>In the Linux kernel, the following vulnerability has been resolved:

dma-buf: Fix NULL pointer dereference in sanitycheck()

If due to a memory allocation failure mock_chain() returns NULL, it is
passed to dma_fence_enable_sw_signaling() resulting in NULL pointer
dereference there.

Call dma_fence_enable_sw_signaling() only if mock_chain() succeeds.

Found by Linux Verification Center (linuxtesting.org) with SVACE.</description><pubDate>Sun, 19 May 2024 08:38:02 +0000</pubDate></item><item><title>CVE-2024-35917 | s390/bpf: Fix bpf_plt pointer arithmetic</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35917</link><description>In the Linux kernel, the following vulnerability has been resolved:

s390/bpf: Fix bpf_plt pointer arithmetic

Kui-Feng Lee reported a crash on s390x triggered by the
dummy_st_ops/dummy_init_ptr_arg test [1]:

  [&lt;0000000000000002&gt;] 0x2
  [&lt;00000000009d5cde&gt;] bpf_struct_ops_test_run+0x156/0x250
  [&lt;000000000033145a&gt;] __sys_bpf+0xa1a/0xd00
  [&lt;00000000003319dc&gt;] __s390x_sys_bpf+0x44/0x50
  [&lt;0000000000c4382c&gt;] __do_syscall+0x244/0x300
  [&lt;0000000000c59a40&gt;] system_call+0x70/0x98

This is caused by GCC moving memcpy() after assignments in
bpf_jit_plt(), resulting in NULL pointers being written instead of
the return and the target addresses.

Looking at the GCC internals, the reordering is allowed because the
alias analysis thinks that the memcpy() destination and the assignments'
left-hand-sides are based on different objects: new_plt and
bpf_plt_ret/bpf_plt_target respectively, and therefore they cannot
alias.

This is in turn due to a violation of the C standard:

  When two pointers are subtracted, both shall point to elements of the
  same array object, or one past the last element of the array object
  ...

From the C's perspective, bpf_plt_ret and bpf_plt are distinct objects
and cannot be subtracted. In the practical terms, doing so confuses the
GCC's alias analysis.

The code was written this way in order to let the C side know a few
offsets defined in the assembly. While nice, this is by no means
necessary. Fix the noncompliance by hardcoding these offsets.

[1] https://lore.kernel.org/bpf/c9923c1d-971d-4022-8dc8-1364e929d34c@gmail.com/</description><pubDate>Sun, 19 May 2024 08:38:02 +0000</pubDate></item><item><title>CVE-2024-5099 | SourceCodester Simple Inventory System updateprice.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5099</link><description>A vulnerability was found in SourceCodester Simple Inventory System 1.0 and classified as critical. Affected by this issue is some unknown functionality of the file updateprice.php. The manipulation of the argument ITEM leads to sql injection. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. VDB-265082 is the identifier assigned to this vulnerability.</description><pubDate>Sun, 19 May 2024 08:09:23 +0000</pubDate></item><item><title>CVE-2024-5098 | SourceCodester Simple Inventory System login.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5098</link><description>A vulnerability has been found in SourceCodester Simple Inventory System 1.0 and classified as critical. Affected by this vulnerability is an unknown functionality of the file login.php. The manipulation of the argument username leads to sql injection. The exploit has been disclosed to the public and may be used. The identifier VDB-265081 was assigned to this vulnerability.</description><pubDate>Sun, 19 May 2024 06:24:50 +0000</pubDate></item><item><title>CVE-2024-5097 | SourceCodester Simple Inventory System tableedit.php#page=editprice cross-site request forgery</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5097</link><description>A vulnerability, which was classified as problematic, was found in SourceCodester Simple Inventory System 1.0. Affected is an unknown function of the file /tableedit.php#page=editprice. The manipulation of the argument itemnumber leads to cross-site request forgery. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-265080.</description><pubDate>Sun, 19 May 2024 03:17:56 +0000</pubDate></item><item><title>CVE-2024-5096 | Hipcam Device MAC Address wifi.mac information disclosure</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5096</link><description>A vulnerability classified as problematic was found in Hipcam Device up to 20240511. This vulnerability affects unknown code of the file /log/wifi.mac of the component MAC Address Handler. The manipulation leads to information disclosure. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-265078 is the identifier assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.</description><pubDate>Sun, 19 May 2024 02:08:21 +0000</pubDate></item><item><title>CVE-2024-5095 | Victor Zsviot Camera MQTT Packet denial of service</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5095</link><description>A vulnerability classified as problematic has been found in Victor Zsviot Camera 8.26.31. This affects an unknown part of the component MQTT Packet Handler. The manipulation leads to denial of service. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-265077 was assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.</description><pubDate>Sun, 19 May 2024 02:08:22 +0000</pubDate></item><item><title>CVE-2024-28064 | Kiteworks Totemomail 7.x and 8.x before 8.3.0 allows /responsiveUI/EnvelopeOpenServlet messageId directory traversal for unauthenticated fil...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-28064</link><description>Kiteworks Totemomail 7.x and 8.x before 8.3.0 allows /responsiveUI/EnvelopeOpenServlet messageId directory traversal for unauthenticated file read and delete operations (with displayLoginChunkedImages) and write operations (with storeLoginChunkedImages).</description><pubDate>Sat, 18 May 2024 22:07:39 +0000</pubDate></item><item><title>CVE-2024-28063 | Kiteworks Totemomail through 7.0.0 allows /responsiveUI/EnvelopeOpenServlet envelopeRecipient reflected XSS.</title><link>https://www.cve.org/CVERecord?id=CVE-2024-28063</link><description>Kiteworks Totemomail through 7.0.0 allows /responsiveUI/EnvelopeOpenServlet envelopeRecipient reflected XSS.</description><pubDate>Sat, 18 May 2024 22:07:39 +0000</pubDate></item><item><title>CVE-2024-36050 | Nix through 2.22.1 mishandles certain usage of hash caches, which makes it easier for attackers to replace current source code with attacker...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-36050</link><description>Nix through 2.22.1 mishandles certain usage of hash caches, which makes it easier for attackers to replace current source code with attacker-controlled source code by luring a maintainer into accepting a malicious pull request.</description><pubDate>Sat, 18 May 2024 21:33:26 +0000</pubDate></item><item><title>CVE-2024-36048 | QAbstractOAuth in Qt Network Authorization in Qt before 5.15.17, 6.x before 6.2.13, 6.3.x through 6.5.x before 6.5.6, and 6.6.x through 6.7....</title><link>https://www.cve.org/CVERecord?id=CVE-2024-36048</link><description>QAbstractOAuth in Qt Network Authorization in Qt before 5.15.17, 6.x before 6.2.13, 6.3.x through 6.5.x before 6.5.6, and 6.6.x through 6.7.x before 6.7.1 uses only the time to seed the PRNG, which may result in guessable values.</description><pubDate>Sat, 18 May 2024 20:37:04 +0000</pubDate></item><item><title>CVE-2024-5094 | SourceCodester Best House Rental Management System view_payment.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5094</link><description>A vulnerability was found in SourceCodester Best House Rental Management System 1.0 and classified as critical. This issue affects some unknown processing of the file view_payment.php. The manipulation of the argument id leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-265073 was assigned to this vulnerability.</description><pubDate>Sat, 18 May 2024 20:14:26 +0000</pubDate></item><item><title>CVE-2024-36043 | question_image.ts in SurveyJS Form Library before 1.10.4 allows contentMode=youtube XSS via the imageLink property.</title><link>https://www.cve.org/CVERecord?id=CVE-2024-36043</link><description>question_image.ts in SurveyJS Form Library before 1.10.4 allows contentMode=youtube XSS via the imageLink property.</description><pubDate>Sat, 18 May 2024 19:36:24 +0000</pubDate></item><item><title>CVE-2024-5093 | SourceCodester Best House Rental Management System login.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5093</link><description>A vulnerability has been found in SourceCodester Best House Rental Management System 1.0 and classified as critical. This vulnerability affects unknown code of the file login.php. The manipulation of the argument username/password leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-265072.</description><pubDate>Sat, 18 May 2024 18:42:04 +0000</pubDate></item><item><title>CVE-2024-34083 | STARTTLS unencrypted commands injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34083</link><description>aiosmptd is  a reimplementation of the Python stdlib smtpd.py based on asyncio. Prior to version 1.4.6, servers based on aiosmtpd accept extra unencrypted commands after STARTTLS, treating them as if they came from inside the encrypted connection. This could be exploited by a man-in-the-middle attack. Version 1.4.6 contains a patch for the issue.</description><pubDate>Sat, 18 May 2024 18:19:09 +0000</pubDate></item><item><title>CVE-2024-31879 | IBM i denial of service</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31879</link><description>IBM i 7.2, 7.3, and 7.4 could allow a remote attacker to execute arbitrary code leading to a denial of service of network ports on the system, caused by the deserialization of untrusted data.  IBM X-Force ID:  287539.</description><pubDate>Sat, 18 May 2024 15:50:49 +0000</pubDate></item><item><title>CVE-2024-3745 | MSI Afterburner v4.6.6.16381 Beta 3 - ACL Bypass</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3745</link><description>MSI Afterburner v4.6.6.16381 Beta 3 is vulnerable to an ACL Bypass vulnerability in the RTCore64.sys driver, which leads to triggering vulnerabilities like CVE-2024-1443 and CVE-2024-1460 from a low privileged user.</description><pubDate>Sat, 18 May 2024 12:46:44 +0000</pubDate></item><item><title>CVE-2024-5088 | Happy Addons for Elementor &amp;lt;= 3.10.8 - Authenticated (Contributor+) Stored Cross-Site Scripting</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5088</link><description>The Happy Addons for Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the ‘_id’ parameter in all versions up to, and including, 3.10.8 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with Contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 11:45:59 +0000</pubDate></item><item><title>CVE-2024-3658 | Build App Online &amp;lt;= 1.0.21 - Authentication Bypass via Header</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3658</link><description>The Build App Online plugin for WordPress is vulnerable to authentication bypass in versions up to, and including, 1.0.21. This is due to missing authentication checking in the 'set_user_cart' function with the 'user_id' header value. This makes it possible for unauthenticated attackers to log in as any existing user on the site, such as an administrator, if they have access to the user id.</description><pubDate>Sat, 18 May 2024 09:49:54 +0000</pubDate></item><item><title>CVE-2024-4432 | Piotnet Addons For Elementor &amp;lt;= 2.4.26 - Authenticated (Contributor+) Stored Cross-Site Scripting via Multiple Widgets</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4432</link><description>The Piotnet Addons For Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the plugin's widgets in all versions up to, and including, 2.4.26 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 09:49:54 +0000</pubDate></item><item><title>CVE-2024-2771 | Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp;amp; Drop WP Form Builder &amp;lt;= 5.1.16 - Missing Authorization to Settings Update and Limited Privilege Escalation</title><link>https://www.cve.org/CVERecord?id=CVE-2024-2771</link><description>The Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp; Drop WP Form Builder plugin for WordPress is vulnerable to privilege escalation due to a missing capability check on the /wp-json/fluentform/v1/managers REST API endpoint in all versions up to, and including, 5.1.16. This makes it possible for unauthenticated attackers to grant users with Fluent Form management permissions which gives them access to all of the plugin's settings and features. This also makes it possible for unauthenticated attackers to delete manager accounts.</description><pubDate>Sat, 18 May 2024 07:44:40 +0000</pubDate></item><item><title>CVE-2024-2772 | Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp;amp; Drop WP Form Builder &amp;lt;= 5.1.13 - Authenticated (Subscriber+) Stored Cross-Site Scripting</title><link>https://www.cve.org/CVERecord?id=CVE-2024-2772</link><description>The Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp; Drop WP Form Builder plugin for WordPress is vulnerable to Stored Cross-Site Scripting via form settings in all versions up to, and including, 5.1.13 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with access to the Fluent Forms settings, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. This can be chained with CVE-2024-2771 for a low-privileged user to inject malicious web scripts.</description><pubDate>Sat, 18 May 2024 07:44:40 +0000</pubDate></item><item><title>CVE-2024-2782 | Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp;amp; Drop WP Form Builder &amp;lt;= 5.1.16 - Missing Authorization to Setting Manipulation</title><link>https://www.cve.org/CVERecord?id=CVE-2024-2782</link><description>The Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp; Drop WP Form Builder plugin for WordPress is vulnerable to unauthorized modification of data due to a missing capability check on the /wp-json/fluentform/v1/global-settings REST API endpoint in all versions up to, and including, 5.1.16. This makes it possible for unauthenticated attackers to modify all of the plugin's settings.</description><pubDate>Sat, 18 May 2024 07:44:40 +0000</pubDate></item><item><title>CVE-2024-4698 | Testimonial Carousel For Elementor &amp;lt;= 10.1.1 - Authenticated (Contributor+) Stored Cross-Site Scripting</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4698</link><description>The Testimonial Carousel For Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the 'show_line_text ' and 'slide_button_hover_animation' parameters in versions up to, and including, 10.1.1 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with contributor-level permissions and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 07:44:41 +0000</pubDate></item><item><title>CVE-2024-4709 | Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp;amp; Drop WP Form Builder &amp;lt;= 5.1.16 - Authenticated (Contributor+) Stored Cross-Site Scripting</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4709</link><description>The Contact Form Plugin by Fluent Forms for Quiz, Survey, and Drag &amp; Drop WP Form Builder plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the ‘subject’ parameter in versions up to, and including, 5.1.16 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with contributor-level permissions and above, and access granted by an administrator, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 07:44:41 +0000</pubDate></item><item><title>CVE-2024-3810 | Salient Shortcodes &amp;lt;= 1.5.3 - Authenticated (Contributor+) Local File Inclusion via Shortcode</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3810</link><description>The Salient Shortcodes plugin for WordPress is vulnerable to Local File Inclusion in all versions up to, and including, 1.5.3 via the 'icon' shortcode 'image' attribute. This makes it possible for authenticated attackers, with contributor-level and above permissions, to include and execute arbitrary files on the server, allowing the execution of any PHP code in those files. This can be used to bypass access controls, obtain sensitive data, or achieve code execution in cases where php file type can be uploaded and included.</description><pubDate>Sat, 18 May 2024 05:50:05 +0000</pubDate></item><item><title>CVE-2024-3811 | Salient Shortcodes &amp;lt;= 1.5.3 - Authenticated (Contributor+) Stored Cross-Site Scripting via Shortcode</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3811</link><description>The Salient Shortcodes plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the plugin's 'icon' shortcode in all versions up to, and including, 1.5.3 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 05:50:05 +0000</pubDate></item><item><title>CVE-2024-3812 | Salient Core &amp;lt;= 2.0.7 - Authenticated (Contributor+) Local File Inclusion via Shortcode</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3812</link><description>The Salient Core plugin for WordPress is vulnerable to Local File Inclusion in all versions up to, and including, 2.0.7 via the 'nectar_icon' shortcode 'icon_linea' attribute. This makes it possible for authenticated attackers, with contributor-level and above permissions, to include and execute arbitrary files on the server, allowing the execution of any PHP code in those files. This can be used to bypass access controls, obtain sensitive data, or achieve code execution in cases where php file type can be uploaded and included.</description><pubDate>Sat, 18 May 2024 05:50:05 +0000</pubDate></item><item><title>CVE-2024-4849 | WordPress Automatic &amp;lt;= 3.94.0 - Authenticated (Contributor+) Stored Cross-Site Scripting via autoplay Parameter</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4849</link><description>The WordPress Automatic Plugin plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the ‘autoplay’ parameter in all versions up to, and including, 3.94.0 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with Contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 05:50:05 +0000</pubDate></item><item><title>CVE-2024-3714 | GiveWP – Donation Plugin and Fundraising Platform &amp;lt;= 3.10.0 - Authenticated (Contributor+) Stored Cross-Site Scripting</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3714</link><description>The GiveWP – Donation Plugin and Fundraising Platform plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the plugin's 'give_form' shortcode when used with a legacy form in all versions up to, and including, 3.10.0 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 04:41:30 +0000</pubDate></item><item><title>CVE-2024-4374 | DethemeKit For Elementor &amp;lt;= 2.1.3 - Authenticated (Contributor+) Stored Cross-Site Scripting via Multiple Widgets</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4374</link><description>The DethemeKit For Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the plugin's widgets in all versions up to, and including, 2.1.3 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 04:41:30 +0000</pubDate></item><item><title>CVE-2024-4891 | Essential Blocks – Page Builder Gutenberg Blocks, Patterns &amp;amp; Templates &amp;lt;= 4.5.12 - Authenticated (Contributor+) Stored Cross-Site Scripting</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4891</link><description>The Essential Blocks – Page Builder Gutenberg Blocks, Patterns &amp; Templates plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the ‘tagName’ parameter in versions up to, and including, 4.5.12 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with contributor-level permissions and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 04:41:31 +0000</pubDate></item><item><title>CVE-2024-4865 | Happy Addons for Elementor &amp;lt;= 3.10.8 - Authenticated (Contributor+) Stored Cross-Site Scripting via _id Parameter</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4865</link><description>The Happy Addons for Elementor plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the ‘_id’ parameter in all versions up to, and including, 3.10.8 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with Contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description><pubDate>Sat, 18 May 2024 03:11:36 +0000</pubDate></item><item><title>CVE-2024-4264 | Remote Code Execution in berriai/litellm</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4264</link><description>A remote code execution (RCE) vulnerability exists in the berriai/litellm project due to improper control of the generation of code when using the `eval` function unsafely in the `litellm.get_secret()` method. Specifically, when the server utilizes Google KMS, untrusted data is passed to the `eval` function without any sanitization. Attackers can exploit this vulnerability by injecting malicious values into environment variables through the `/config/update` endpoint, which allows for the update of settings in `proxy_server_config.yaml`.</description><pubDate>Sat, 18 May 2024 01:23:37 +0000</pubDate></item><item><title>CVE-2024-23556 | HCL BigFix Platform is impacted by a failure to restrict SSL/TLS renegotiation</title><link>https://www.cve.org/CVERecord?id=CVE-2024-23556</link><description>SSL/TLS Renegotiation functionality potentially leading to DoS attack vulnerability.</description><pubDate>Fri, 17 May 2024 23:50:02 +0000</pubDate></item><item><title>CVE-2024-23554 | HCL BigFix Platform is susceptible to Cross-Site Request Forgery</title><link>https://www.cve.org/CVERecord?id=CVE-2024-23554</link><description>Cross-Site Request Forgery (CSRF) on Session Token vulnerability that could potentially lead to Remote Code Execution (RCE).</description><pubDate>Fri, 17 May 2024 23:40:13 +0000</pubDate></item><item><title>CVE-2024-23583 | HCL BigFix Platform is susceptible to insufficiently protected credentials</title><link>https://www.cve.org/CVERecord?id=CVE-2024-23583</link><description>An attacker could potentially intercept credentials via the task manager and perform unauthorized access to the Client Deploy Tool on Windows systems.</description><pubDate>Fri, 17 May 2024 23:19:35 +0000</pubDate></item><item><title>CVE-2024-35312 | In Tor Arti before 1.2.3, STUB circuits incorrectly have a length of 2 (with lite vanguards), aka TROVE-2024-003.</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35312</link><description>In Tor Arti before 1.2.3, STUB circuits incorrectly have a length of 2 (with lite vanguards), aka TROVE-2024-003.</description><pubDate>Fri, 17 May 2024 21:35:08 +0000</pubDate></item><item><title>CVE-2024-35313 | In Tor Arti before 1.2.3, circuits sometimes incorrectly have a length of 3 (with full vanguards), aka TROVE-2024-004.</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35313</link><description>In Tor Arti before 1.2.3, circuits sometimes incorrectly have a length of 3 (with full vanguards), aka TROVE-2024-004.</description><pubDate>Fri, 17 May 2024 21:35:08 +0000</pubDate></item><item><title>CVE-2024-25742 | In the Linux kernel before 6.9, an untrusted hypervisor can inject virtual interrupt 29 (#VC) at any point in time and can trigger its handl...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-25742</link><description>In the Linux kernel before 6.9, an untrusted hypervisor can inject virtual interrupt 29 (#VC) at any point in time and can trigger its handler. This affects AMD SEV-SNP and AMD SEV-ES.</description><pubDate>Fri, 17 May 2024 21:24:12 +0000</pubDate></item><item><title>CVE-2024-5069 | SourceCodester Simple Online Mens Salon Management System view_service.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5069</link><description>A vulnerability, which was classified as critical, has been found in SourceCodester Simple Online Mens Salon Management System 1.0. Affected by this issue is some unknown functionality of the file view_service.php. The manipulation of the argument id leads to sql injection. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. VDB-264926 is the identifier assigned to this vulnerability.</description><pubDate>Fri, 17 May 2024 21:13:20 +0000</pubDate></item><item><title>CVE-2023-52424 | The IEEE 802.11 standard sometimes enables an adversary to trick a victim into connecting to an unintended or untrusted network with Home WE...</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52424</link><description>The IEEE 802.11 standard sometimes enables an adversary to trick a victim into connecting to an unintended or untrusted network with Home WEP, Home WPA3 SAE-loop. Enterprise 802.1X/EAP, Mesh AMPE, or FILS, aka an "SSID Confusion" issue. This occurs because the SSID is not always used to derive the pairwise master key or session keys, and because there is not a protected exchange of an SSID during a 4-way handshake.</description><pubDate>Fri, 17 May 2024 20:36:50 +0000</pubDate></item><item><title>CVE-2024-5065 | PHPGurukul Online Course Registration System sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5065</link><description>A vulnerability classified as critical has been found in PHPGurukul Online Course Registration System 3.1. Affected is an unknown function of the file /onlinecourse/. The manipulation of the argument regno leads to sql injection. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-264924.</description><pubDate>Fri, 17 May 2024 20:14:01 +0000</pubDate></item><item><title>CVE-2024-5066 | PHPGurukul Online Course Registration System pincode-verification.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5066</link><description>A vulnerability classified as critical was found in PHPGurukul Online Course Registration System 3.1. Affected by this vulnerability is an unknown functionality of the file /pincode-verification.php. The manipulation of the argument pincode leads to sql injection. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-264925 was assigned to this vulnerability.</description><pubDate>Fri, 17 May 2024 20:14:01 +0000</pubDate></item><item><title>CVE-2024-34959 | DedeCMS V5.7.113 is vulnerable to Cross Site Scripting (XSS) via sys_data_replace.php.</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34959</link><description>DedeCMS V5.7.113 is vulnerable to Cross Site Scripting (XSS) via sys_data_replace.php.</description><pubDate>Fri, 17 May 2024 19:55:20 +0000</pubDate></item><item><title>CVE-2024-34997 | joblib v1.4.2 was discovered to contain a deserialization vulnerability via the component joblib.numpy_pickle::NumpyArrayWrapper().read_arra...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34997</link><description>joblib v1.4.2 was discovered to contain a deserialization vulnerability via the component joblib.numpy_pickle::NumpyArrayWrapper().read_array().</description><pubDate>Fri, 17 May 2024 19:15:27 +0000</pubDate></item><item><title>CVE-2024-5022 | The file scheme of URLs would be hidden, resulting in potential spoofing of a website's address in the location bar This vulnerability affec...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5022</link><description>The file scheme of URLs would be hidden, resulting in potential spoofing of a website's address in the location bar This vulnerability affects Focus for iOS &lt; 126.</description><pubDate>Fri, 17 May 2024 18:49:03 +0000</pubDate></item><item><title>CVE-2021-22508 | Potential SQL injection in OpenText Operations Bridge Reporter</title><link>https://www.cve.org/CVERecord?id=CVE-2021-22508</link><description>A potential vulnerability has been identified for OpenText Operations Bridge Reporter.  The vulnerability could be exploited to inject malicious SQL queries.  An attack requires to be an authenticated administrator of OBR with network access to the OBR web application.</description><pubDate>Fri, 17 May 2024 18:39:22 +0000</pubDate></item><item><title>CVE-2024-5063 | PHPGurukul Online Course Registration System index.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5063</link><description>A vulnerability was found in PHPGurukul Online Course Registration System 3.1. It has been declared as critical. This vulnerability affects unknown code of the file /admin/index.php. The manipulation of the argument username/password leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-264922 is the identifier assigned to this vulnerability.</description><pubDate>Fri, 17 May 2024 18:39:23 +0000</pubDate></item><item><title>CVE-2024-5064 | PHPGurukul Online Course Registration System news-details.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5064</link><description>A vulnerability was found in PHPGurukul Online Course Registration System 3.1. It has been rated as critical. This issue affects some unknown processing of the file news-details.php. The manipulation of the argument nid leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-264923.</description><pubDate>Fri, 17 May 2024 18:39:23 +0000</pubDate></item><item><title>CVE-2024-3292 | Race Condition</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3292</link><description>A race condition vulnerability exists where an authenticated, local attacker on a Windows Nessus Agent host could modify installation parameters at installation time, which could lead to the execution of arbitrary code on the Nessus host. - CVE-2024-3292</description><pubDate>Fri, 17 May 2024 17:30:05 +0000</pubDate></item><item><title>CVE-2024-35190 | Asterisk&amp;#x27; res_pjsip_endpoint_identifier_ip: wrongly matches ALL unauthorized SIP requests</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35190</link><description>Asterisk is an open source private branch exchange and telephony toolkit. After upgrade to 18.23.0, ALL unauthorized SIP requests are identified as PJSIP Endpoint of local asterisk server. This vulnerability is fixed in 18.23.1, 20.8.1, and 21.3.1.</description><pubDate>Fri, 17 May 2024 17:18:07 +0000</pubDate></item><item><title>CVE-2024-3291 | Privilege Escalation</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3291</link><description>When installing Nessus Agent to a directory outside of the default location on a Windows host, Nessus Agent versions prior to 10.6.4 did not enforce secure permissions for sub-directories. This could allow for local privilege escalation if users had not secured the directories in the non-default installation location.</description><pubDate>Fri, 17 May 2024 17:18:07 +0000</pubDate></item><item><title>CVE-2023-5597 | Stored Cross-site Scripting (XSS) vulnerability affecting 3DDashboard in 3DSwymer from Release 3DEXPERIENCE R2023x through Release 3DEXPERIENCE R2024x</title><link>https://www.cve.org/CVERecord?id=CVE-2023-5597</link><description>A stored Cross-site Scripting (XSS) vulnerability affecting 3DDashboard in 3DSwymer from Release 3DEXPERIENCE R2023x through Release 3DEXPERIENCE R2024x allows an attacker to execute arbitrary script code.</description><pubDate>Fri, 17 May 2024 16:58:51 +0000</pubDate></item><item><title>CVE-2024-3289 | When installing Nessus to a directory outside of the default location on a Windows host, Nessus versions prior to 10.7.3 did not enforce sec...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3289</link><description>When installing Nessus to a directory outside of the default location on a Windows host, Nessus versions prior to 10.7.3 did not enforce secure permissions for sub-directories. This could allow for local privilege escalation if users had not secured the directories in the non-default installation location.</description><pubDate>Fri, 17 May 2024 16:58:51 +0000</pubDate></item><item><title>CVE-2024-3290 | Race Condition</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3290</link><description>A race condition vulnerability exists where an authenticated, local attacker on a Windows Nessus host could modify installation parameters at installation time, which could lead to the execution of arbitrary code on the Nessus host</description><pubDate>Fri, 17 May 2024 16:58:52 +0000</pubDate></item><item><title>CVE-2024-31974 | The com.solarized.firedown (aka Solarized FireDown Browser &amp; Downloader) application 1.0.76 for Android allows a remote attacker to execute ...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31974</link><description>The com.solarized.firedown (aka Solarized FireDown Browser &amp; Downloader) application 1.0.76 for Android allows a remote attacker to execute arbitrary JavaScript code via a crafted intent. com.solarized.firedown.IntentActivity uses a WebView component to display web content and doesn't adequately sanitize the URI or any extra data passed in the intent by any installed application (with no permissions).</description><pubDate>Fri, 17 May 2024 15:40:30 +0000</pubDate></item><item><title>CVE-2024-34058 | The WebTop package for NethServer 7 and 8 allows stored XSS (for example, via the Subject field if an e-mail message).</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34058</link><description>The WebTop package for NethServer 7 and 8 allows stored XSS (for example, via the Subject field if an e-mail message).</description><pubDate>Fri, 17 May 2024 15:40:31 +0000</pubDate></item><item><title>CVE-2024-22429 | Dell BIOS contains an Improper Input Validation vulnerability. A local authenticated malicious user with admin privileges could potentially ...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-22429</link><description>Dell BIOS contains an Improper Input Validation vulnerability. A local authenticated malicious user with admin privileges could potentially exploit this vulnerability, leading to arbitrary code execution.</description><pubDate>Fri, 17 May 2024 15:30:51 +0000</pubDate></item><item><title>CVE-2024-34241 | A cross-site scripting (XSS) vulnerability in Rocketsoft Rocket LMS 1.9 allows an administrator to store a JavaScript payload using the admi...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34241</link><description>A cross-site scripting (XSS) vulnerability in Rocketsoft Rocket LMS 1.9 allows an administrator to store a JavaScript payload using the admin web interface when creating new courses and new course notifications.</description><pubDate>Fri, 17 May 2024 15:30:51 +0000</pubDate></item><item><title>CVE-2024-5072 | Improper input validation in PAM JIT elevation feature in Devolutions Server 2024.1.11.0 and earlier allows an authenticated user with acces...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5072</link><description>Improper input validation in PAM JIT elevation feature in Devolutions Server 2024.1.11.0 and earlier allows an authenticated user with access to the PAM JIT elevation feature to manipulate the LDAP filter query via a specially crafted request.</description><pubDate>Fri, 17 May 2024 15:30:51 +0000</pubDate></item><item><title>CVE-2024-35846 | mm: zswap: fix shrinker NULL crash with cgroup_disable=memory</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35846</link><description>In the Linux kernel, the following vulnerability has been resolved:

mm: zswap: fix shrinker NULL crash with cgroup_disable=memory

Christian reports a NULL deref in zswap that he bisected down to the zswap
shrinker.  The issue also cropped up in the bug trackers of libguestfs [1]
and the Red Hat bugzilla [2].

The problem is that when memcg is disabled with the boot time flag, the
zswap shrinker might get called with sc-&gt;memcg == NULL.  This is okay in
many places, like the lruvec operations.  But it crashes in
memcg_page_state() - which is only used due to the non-node accounting of
cgroup's the zswap memory to begin with.

Nhat spotted that the memcg can be NULL in the memcg-disabled case, and I
was then able to reproduce the crash locally as well.

[1] https://github.com/libguestfs/libguestfs/issues/139
[2] https://bugzilla.redhat.com/show_bug.cgi?id=2275252</description><pubDate>Fri, 17 May 2024 14:59:18 +0000</pubDate></item><item><title>CVE-2024-35847 | irqchip/gic-v3-its: Prevent double free on error</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35847</link><description>In the Linux kernel, the following vulnerability has been resolved:

irqchip/gic-v3-its: Prevent double free on error

The error handling path in its_vpe_irq_domain_alloc() causes a double free
when its_vpe_init() fails after successfully allocating at least one
interrupt. This happens because its_vpe_irq_domain_free() frees the
interrupts along with the area bitmap and the vprop_page and
its_vpe_irq_domain_alloc() subsequently frees the area bitmap and the
vprop_page again.

Fix this by unconditionally invoking its_vpe_irq_domain_free() which
handles all cases correctly and by removing the bitmap/vprop_page freeing
from its_vpe_irq_domain_alloc().

[ tglx: Massaged change log ]</description><pubDate>Fri, 17 May 2024 14:59:18 +0000</pubDate></item><item><title>CVE-2024-35848 | eeprom: at24: fix memory corruption race condition</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35848</link><description>In the Linux kernel, the following vulnerability has been resolved:

eeprom: at24: fix memory corruption race condition

If the eeprom is not accessible, an nvmem device will be registered, the
read will fail, and the device will be torn down. If another driver
accesses the nvmem device after the teardown, it will reference
invalid memory.

Move the failure point before registering the nvmem device.</description><pubDate>Fri, 17 May 2024 14:59:19 +0000</pubDate></item><item><title>CVE-2024-35849 | btrfs: fix information leak in btrfs_ioctl_logical_to_ino()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35849</link><description>In the Linux kernel, the following vulnerability has been resolved:

btrfs: fix information leak in btrfs_ioctl_logical_to_ino()

Syzbot reported the following information leak for in
btrfs_ioctl_logical_to_ino():

  BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:114 [inline]
  BUG: KMSAN: kernel-infoleak in _copy_to_user+0xbc/0x110 lib/usercopy.c:40
   instrument_copy_to_user include/linux/instrumented.h:114 [inline]
   _copy_to_user+0xbc/0x110 lib/usercopy.c:40
   copy_to_user include/linux/uaccess.h:191 [inline]
   btrfs_ioctl_logical_to_ino+0x440/0x750 fs/btrfs/ioctl.c:3499
   btrfs_ioctl+0x714/0x1260
   vfs_ioctl fs/ioctl.c:51 [inline]
   __do_sys_ioctl fs/ioctl.c:904 [inline]
   __se_sys_ioctl+0x261/0x450 fs/ioctl.c:890
   __x64_sys_ioctl+0x96/0xe0 fs/ioctl.c:890
   x64_sys_call+0x1883/0x3b50 arch/x86/include/generated/asm/syscalls_64.h:17
   do_syscall_x64 arch/x86/entry/common.c:52 [inline]
   do_syscall_64+0xcf/0x1e0 arch/x86/entry/common.c:83
   entry_SYSCALL_64_after_hwframe+0x77/0x7f

  Uninit was created at:
   __kmalloc_large_node+0x231/0x370 mm/slub.c:3921
   __do_kmalloc_node mm/slub.c:3954 [inline]
   __kmalloc_node+0xb07/0x1060 mm/slub.c:3973
   kmalloc_node include/linux/slab.h:648 [inline]
   kvmalloc_node+0xc0/0x2d0 mm/util.c:634
   kvmalloc include/linux/slab.h:766 [inline]
   init_data_container+0x49/0x1e0 fs/btrfs/backref.c:2779
   btrfs_ioctl_logical_to_ino+0x17c/0x750 fs/btrfs/ioctl.c:3480
   btrfs_ioctl+0x714/0x1260
   vfs_ioctl fs/ioctl.c:51 [inline]
   __do_sys_ioctl fs/ioctl.c:904 [inline]
   __se_sys_ioctl+0x261/0x450 fs/ioctl.c:890
   __x64_sys_ioctl+0x96/0xe0 fs/ioctl.c:890
   x64_sys_call+0x1883/0x3b50 arch/x86/include/generated/asm/syscalls_64.h:17
   do_syscall_x64 arch/x86/entry/common.c:52 [inline]
   do_syscall_64+0xcf/0x1e0 arch/x86/entry/common.c:83
   entry_SYSCALL_64_after_hwframe+0x77/0x7f

  Bytes 40-65535 of 65536 are uninitialized
  Memory access of size 65536 starts at ffff888045a40000

This happens, because we're copying a 'struct btrfs_data_container' back
to user-space. This btrfs_data_container is allocated in
'init_data_container()' via kvmalloc(), which does not zero-fill the
memory.

Fix this by using kvzalloc() which zeroes out the memory on allocation.</description><pubDate>Fri, 17 May 2024 14:59:19 +0000</pubDate></item><item><title>CVE-2024-35850 | Bluetooth: qca: fix NULL-deref on non-serdev setup</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35850</link><description>In the Linux kernel, the following vulnerability has been resolved:

Bluetooth: qca: fix NULL-deref on non-serdev setup

Qualcomm ROME controllers can be registered from the Bluetooth line
discipline and in this case the HCI UART serdev pointer is NULL.

Add the missing sanity check to prevent a NULL-pointer dereference when
setup() is called for a non-serdev controller.</description><pubDate>Fri, 17 May 2024 14:59:19 +0000</pubDate></item><item><title>CVE-2024-35851 | Bluetooth: qca: fix NULL-deref on non-serdev suspend</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35851</link><description>In the Linux kernel, the following vulnerability has been resolved:

Bluetooth: qca: fix NULL-deref on non-serdev suspend

Qualcomm ROME controllers can be registered from the Bluetooth line
discipline and in this case the HCI UART serdev pointer is NULL.

Add the missing sanity check to prevent a NULL-pointer dereference when
wakeup() is called for a non-serdev controller during suspend.

Just return true for now to restore the original behaviour and address
the crash with pre-6.2 kernels, which do not have commit e9b3e5b8c657
("Bluetooth: hci_qca: only assign wakeup with serial port support") that
causes the crash to happen already at setup() time.</description><pubDate>Fri, 17 May 2024 14:59:20 +0000</pubDate></item><item><title>CVE-2024-35852 | mlxsw: spectrum_acl_tcam: Fix memory leak when canceling rehash work</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35852</link><description>In the Linux kernel, the following vulnerability has been resolved:

mlxsw: spectrum_acl_tcam: Fix memory leak when canceling rehash work

The rehash delayed work is rescheduled with a delay if the number of
credits at end of the work is not negative as supposedly it means that
the migration ended. Otherwise, it is rescheduled immediately.

After "mlxsw: spectrum_acl_tcam: Fix possible use-after-free during
rehash" the above is no longer accurate as a non-negative number of
credits is no longer indicative of the migration being done. It can also
happen if the work encountered an error in which case the migration will
resume the next time the work is scheduled.

The significance of the above is that it is possible for the work to be
pending and associated with hints that were allocated when the migration
started. This leads to the hints being leaked [1] when the work is
canceled while pending as part of ACL region dismantle.

Fix by freeing the hints if hints are associated with a work that was
canceled while pending.

Blame the original commit since the reliance on not having a pending
work associated with hints is fragile.

[1]
unreferenced object 0xffff88810e7c3000 (size 256):
  comm "kworker/0:16", pid 176, jiffies 4295460353
  hex dump (first 32 bytes):
    00 30 95 11 81 88 ff ff 61 00 00 00 00 00 00 80  .0......a.......
    00 00 61 00 40 00 00 00 00 00 00 00 04 00 00 00  ..a.@...........
  backtrace (crc 2544ddb9):
    [&lt;00000000cf8cfab3&gt;] kmalloc_trace+0x23f/0x2a0
    [&lt;000000004d9a1ad9&gt;] objagg_hints_get+0x42/0x390
    [&lt;000000000b143cf3&gt;] mlxsw_sp_acl_erp_rehash_hints_get+0xca/0x400
    [&lt;0000000059bdb60a&gt;] mlxsw_sp_acl_tcam_vregion_rehash_work+0x868/0x1160
    [&lt;00000000e81fd734&gt;] process_one_work+0x59c/0xf20
    [&lt;00000000ceee9e81&gt;] worker_thread+0x799/0x12c0
    [&lt;00000000bda6fe39&gt;] kthread+0x246/0x300
    [&lt;0000000070056d23&gt;] ret_from_fork+0x34/0x70
    [&lt;00000000dea2b93e&gt;] ret_from_fork_asm+0x1a/0x30</description><pubDate>Fri, 17 May 2024 14:59:20 +0000</pubDate></item><item><title>CVE-2024-35853 | mlxsw: spectrum_acl_tcam: Fix memory leak during rehash</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35853</link><description>In the Linux kernel, the following vulnerability has been resolved:

mlxsw: spectrum_acl_tcam: Fix memory leak during rehash

The rehash delayed work migrates filters from one region to another.
This is done by iterating over all chunks (all the filters with the same
priority) in the region and in each chunk iterating over all the
filters.

If the migration fails, the code tries to migrate the filters back to
the old region. However, the rollback itself can also fail in which case
another migration will be erroneously performed. Besides the fact that
this ping pong is not a very good idea, it also creates a problem.

Each virtual chunk references two chunks: The currently used one
('vchunk-&gt;chunk') and a backup ('vchunk-&gt;chunk2'). During migration the
first holds the chunk we want to migrate filters to and the second holds
the chunk we are migrating filters from.

The code currently assumes - but does not verify - that the backup chunk
does not exist (NULL) if the currently used chunk does not reference the
target region. This assumption breaks when we are trying to rollback a
rollback, resulting in the backup chunk being overwritten and leaked
[1].

Fix by not rolling back a failed rollback and add a warning to avoid
future cases.

[1]
WARNING: CPU: 5 PID: 1063 at lib/parman.c:291 parman_destroy+0x17/0x20
Modules linked in:
CPU: 5 PID: 1063 Comm: kworker/5:11 Tainted: G        W          6.9.0-rc2-custom-00784-gc6a05c468a0b #14
Hardware name: Mellanox Technologies Ltd. MSN3700/VMOD0005, BIOS 5.11 01/06/2019
Workqueue: mlxsw_core mlxsw_sp_acl_tcam_vregion_rehash_work
RIP: 0010:parman_destroy+0x17/0x20
[...]
Call Trace:
 
 mlxsw_sp_acl_atcam_region_fini+0x19/0x60
 mlxsw_sp_acl_tcam_region_destroy+0x49/0xf0
 mlxsw_sp_acl_tcam_vregion_rehash_work+0x1f1/0x470
 process_one_work+0x151/0x370
 worker_thread+0x2cb/0x3e0
 kthread+0xd0/0x100
 ret_from_fork+0x34/0x50
 ret_from_fork_asm+0x1a/0x30</description><pubDate>Fri, 17 May 2024 14:59:20 +0000</pubDate></item><item><title>CVE-2024-35854 | mlxsw: spectrum_acl_tcam: Fix possible use-after-free during rehash</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35854</link><description>In the Linux kernel, the following vulnerability has been resolved:

mlxsw: spectrum_acl_tcam: Fix possible use-after-free during rehash

The rehash delayed work migrates filters from one region to another
according to the number of available credits.

The migrated from region is destroyed at the end of the work if the
number of credits is non-negative as the assumption is that this is
indicative of migration being complete. This assumption is incorrect as
a non-negative number of credits can also be the result of a failed
migration.

The destruction of a region that still has filters referencing it can
result in a use-after-free [1].

Fix by not destroying the region if migration failed.

[1]
BUG: KASAN: slab-use-after-free in mlxsw_sp_acl_ctcam_region_entry_remove+0x21d/0x230
Read of size 8 at addr ffff8881735319e8 by task kworker/0:31/3858

CPU: 0 PID: 3858 Comm: kworker/0:31 Tainted: G        W          6.9.0-rc2-custom-00782-gf2275c2157d8 #5
Hardware name: Mellanox Technologies Ltd. MSN3700/VMOD0005, BIOS 5.11 01/06/2019
Workqueue: mlxsw_core mlxsw_sp_acl_tcam_vregion_rehash_work
Call Trace:
 
 dump_stack_lvl+0xc6/0x120
 print_report+0xce/0x670
 kasan_report+0xd7/0x110
 mlxsw_sp_acl_ctcam_region_entry_remove+0x21d/0x230
 mlxsw_sp_acl_ctcam_entry_del+0x2e/0x70
 mlxsw_sp_acl_atcam_entry_del+0x81/0x210
 mlxsw_sp_acl_tcam_vchunk_migrate_all+0x3cd/0xb50
 mlxsw_sp_acl_tcam_vregion_rehash_work+0x157/0x1300
 process_one_work+0x8eb/0x19b0
 worker_thread+0x6c9/0xf70
 kthread+0x2c9/0x3b0
 ret_from_fork+0x4d/0x80
 ret_from_fork_asm+0x1a/0x30
 

Allocated by task 174:
 kasan_save_stack+0x33/0x60
 kasan_save_track+0x14/0x30
 __kasan_kmalloc+0x8f/0xa0
 __kmalloc+0x19c/0x360
 mlxsw_sp_acl_tcam_region_create+0xdf/0x9c0
 mlxsw_sp_acl_tcam_vregion_rehash_work+0x954/0x1300
 process_one_work+0x8eb/0x19b0
 worker_thread+0x6c9/0xf70
 kthread+0x2c9/0x3b0
 ret_from_fork+0x4d/0x80
 ret_from_fork_asm+0x1a/0x30

Freed by task 7:
 kasan_save_stack+0x33/0x60
 kasan_save_track+0x14/0x30
 kasan_save_free_info+0x3b/0x60
 poison_slab_object+0x102/0x170
 __kasan_slab_free+0x14/0x30
 kfree+0xc1/0x290
 mlxsw_sp_acl_tcam_region_destroy+0x272/0x310
 mlxsw_sp_acl_tcam_vregion_rehash_work+0x731/0x1300
 process_one_work+0x8eb/0x19b0
 worker_thread+0x6c9/0xf70
 kthread+0x2c9/0x3b0
 ret_from_fork+0x4d/0x80
 ret_from_fork_asm+0x1a/0x30</description><pubDate>Fri, 17 May 2024 14:59:21 +0000</pubDate></item><item><title>CVE-2024-35855 | mlxsw: spectrum_acl_tcam: Fix possible use-after-free during activity update</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35855</link><description>In the Linux kernel, the following vulnerability has been resolved:

mlxsw: spectrum_acl_tcam: Fix possible use-after-free during activity update

The rule activity update delayed work periodically traverses the list of
configured rules and queries their activity from the device.

As part of this task it accesses the entry pointed by 'ventry-&gt;entry',
but this entry can be changed concurrently by the rehash delayed work,
leading to a use-after-free [1].

Fix by closing the race and perform the activity query under the
'vregion-&gt;lock' mutex.

[1]
BUG: KASAN: slab-use-after-free in mlxsw_sp_acl_tcam_flower_rule_activity_get+0x121/0x140
Read of size 8 at addr ffff8881054ed808 by task kworker/0:18/181

CPU: 0 PID: 181 Comm: kworker/0:18 Not tainted 6.9.0-rc2-custom-00781-gd5ab772d32f7 #2
Hardware name: Mellanox Technologies Ltd. MSN3700/VMOD0005, BIOS 5.11 01/06/2019
Workqueue: mlxsw_core mlxsw_sp_acl_rule_activity_update_work
Call Trace:
 
 dump_stack_lvl+0xc6/0x120
 print_report+0xce/0x670
 kasan_report+0xd7/0x110
 mlxsw_sp_acl_tcam_flower_rule_activity_get+0x121/0x140
 mlxsw_sp_acl_rule_activity_update_work+0x219/0x400
 process_one_work+0x8eb/0x19b0
 worker_thread+0x6c9/0xf70
 kthread+0x2c9/0x3b0
 ret_from_fork+0x4d/0x80
 ret_from_fork_asm+0x1a/0x30
 

Allocated by task 1039:
 kasan_save_stack+0x33/0x60
 kasan_save_track+0x14/0x30
 __kasan_kmalloc+0x8f/0xa0
 __kmalloc+0x19c/0x360
 mlxsw_sp_acl_tcam_entry_create+0x7b/0x1f0
 mlxsw_sp_acl_tcam_vchunk_migrate_all+0x30d/0xb50
 mlxsw_sp_acl_tcam_vregion_rehash_work+0x157/0x1300
 process_one_work+0x8eb/0x19b0
 worker_thread+0x6c9/0xf70
 kthread+0x2c9/0x3b0
 ret_from_fork+0x4d/0x80
 ret_from_fork_asm+0x1a/0x30

Freed by task 1039:
 kasan_save_stack+0x33/0x60
 kasan_save_track+0x14/0x30
 kasan_save_free_info+0x3b/0x60
 poison_slab_object+0x102/0x170
 __kasan_slab_free+0x14/0x30
 kfree+0xc1/0x290
 mlxsw_sp_acl_tcam_vchunk_migrate_all+0x3d7/0xb50
 mlxsw_sp_acl_tcam_vregion_rehash_work+0x157/0x1300
 process_one_work+0x8eb/0x19b0
 worker_thread+0x6c9/0xf70
 kthread+0x2c9/0x3b0
 ret_from_fork+0x4d/0x80
 ret_from_fork_asm+0x1a/0x30</description><pubDate>Fri, 17 May 2024 14:59:21 +0000</pubDate></item><item><title>CVE-2024-35856 | Bluetooth: btusb: mediatek: Fix double free of skb in coredump</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35856</link><description>In the Linux kernel, the following vulnerability has been resolved:

Bluetooth: btusb: mediatek: Fix double free of skb in coredump

hci_devcd_append() would free the skb on error so the caller don't
have to free it again otherwise it would cause the double free of skb.

Reported-by : Dan Carpenter</description><pubDate>Fri, 17 May 2024 14:59:21 +0000</pubDate></item><item><title>CVE-2024-35857 | icmp: prevent possible NULL dereferences from icmp_build_probe()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35857</link><description>In the Linux kernel, the following vulnerability has been resolved:

icmp: prevent possible NULL dereferences from icmp_build_probe()

First problem is a double call to __in_dev_get_rcu(), because
the second one could return NULL.

if (__in_dev_get_rcu(dev) &amp;&amp; __in_dev_get_rcu(dev)-&gt;ifa_list)

Second problem is a read from dev-&gt;ip6_ptr with no NULL check:

if (!list_empty(&amp;amp;rcu_dereference(dev-&gt;ip6_ptr)-&gt;addr_list))

Use the correct RCU API to fix these.

v2: add missing include &lt;net/addrconf.h&gt;</description><pubDate>Fri, 17 May 2024 14:59:22 +0000</pubDate></item><item><title>CVE-2024-35858 | net: bcmasp: fix memory leak when bringing down interface</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35858</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: bcmasp: fix memory leak when bringing down interface

When bringing down the TX rings we flush the rings but forget to
reclaimed the flushed packets. This leads to a memory leak since we
do not free the dma mapped buffers. This also leads to tx control
block corruption when bringing down the interface for power
management.</description><pubDate>Fri, 17 May 2024 14:59:22 +0000</pubDate></item><item><title>CVE-2024-35859 | block: fix module reference leakage from bdev_open_by_dev error path</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35859</link><description>In the Linux kernel, the following vulnerability has been resolved:

block: fix module reference leakage from bdev_open_by_dev error path

At the time bdev_may_open() is called, module reference is grabbed
already, hence module reference should be released if bdev_may_open()
failed.

This problem is found by code review.</description><pubDate>Fri, 17 May 2024 14:59:22 +0000</pubDate></item><item><title>CVE-2024-35843 | iommu/vt-d: Use device rbtree in iopf reporting path</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35843</link><description>In the Linux kernel, the following vulnerability has been resolved:

iommu/vt-d: Use device rbtree in iopf reporting path

The existing I/O page fault handler currently locates the PCI device by
calling pci_get_domain_bus_and_slot(). This function searches the list
of all PCI devices until the desired device is found. To improve lookup
efficiency, replace it with device_rbtree_find() to search the device
within the probed device rbtree.

The I/O page fault is initiated by the device, which does not have any
synchronization mechanism with the software to ensure that the device
stays in the probed device tree. Theoretically, a device could be released
by the IOMMU subsystem after device_rbtree_find() and before
iopf_get_dev_fault_param(), which would cause a use-after-free problem.

Add a mutex to synchronize the I/O page fault reporting path and the IOMMU
release device path. This lock doesn't introduce any performance overhead,
as the conflict between I/O page fault reporting and device releasing is
very rare.</description><pubDate>Fri, 17 May 2024 14:49:38 +0000</pubDate></item><item><title>CVE-2024-35844 | f2fs: compress: fix reserve_cblocks counting error when out of space</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35844</link><description>In the Linux kernel, the following vulnerability has been resolved:

f2fs: compress: fix reserve_cblocks counting error when out of space

When a file only needs one direct_node, performing the following
operations will cause the file to be unrepairable:

unisoc # ./f2fs_io compress test.apk
unisoc #df -h | grep dm-48
/dev/block/dm-48 112G 112G 1.2M 100% /data

unisoc # ./f2fs_io release_cblocks test.apk
924
unisoc # df -h | grep dm-48
/dev/block/dm-48 112G 112G 4.8M 100% /data

unisoc # dd if=/dev/random of=file4 bs=1M count=3
3145728 bytes (3.0 M) copied, 0.025 s, 120 M/s
unisoc # df -h | grep dm-48
/dev/block/dm-48 112G 112G 1.8M 100% /data

unisoc # ./f2fs_io reserve_cblocks test.apk
F2FS_IOC_RESERVE_COMPRESS_BLOCKS failed: No space left on device

adb reboot
unisoc # df -h  | grep dm-48
/dev/block/dm-48             112G 112G   11M 100% /data
unisoc # ./f2fs_io reserve_cblocks test.apk
0

This is because the file has only one direct_node. After returning
to -ENOSPC, reserved_blocks += ret will not be executed. As a result,
the reserved_blocks at this time is still 0, which is not the real
number of reserved blocks. Therefore, fsck cannot be set to repair
the file.

After this patch, the fsck flag will be set to fix this problem.

unisoc # df -h | grep dm-48
/dev/block/dm-48             112G 112G  1.8M 100% /data
unisoc # ./f2fs_io reserve_cblocks test.apk
F2FS_IOC_RESERVE_COMPRESS_BLOCKS failed: No space left on device

adb reboot then fsck will be executed
unisoc # df -h  | grep dm-48
/dev/block/dm-48             112G 112G   11M 100% /data
unisoc # ./f2fs_io reserve_cblocks test.apk
924</description><pubDate>Fri, 17 May 2024 14:49:39 +0000</pubDate></item><item><title>CVE-2024-35845 | wifi: iwlwifi: dbg-tlv: ensure NUL termination</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35845</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: iwlwifi: dbg-tlv: ensure NUL termination

The iwl_fw_ini_debug_info_tlv is used as a string, so we must
ensure the string is terminated correctly before using it.</description><pubDate>Fri, 17 May 2024 14:49:39 +0000</pubDate></item><item><title>CVE-2023-52684 | firmware: qcom: qseecom: fix memory leaks in error paths</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52684</link><description>In the Linux kernel, the following vulnerability has been resolved:

firmware: qcom: qseecom: fix memory leaks in error paths

Fix instances of returning error codes directly instead of jumping to
the relevant labels where memory allocated for the SCM calls would be
freed.</description><pubDate>Fri, 17 May 2024 14:39:21 +0000</pubDate></item><item><title>CVE-2023-52685 | pstore: ram_core: fix possible overflow in persistent_ram_init_ecc()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52685</link><description>In the Linux kernel, the following vulnerability has been resolved:

pstore: ram_core: fix possible overflow in persistent_ram_init_ecc()

In persistent_ram_init_ecc(), on 64-bit arches DIV_ROUND_UP() will return
64-bit value since persistent_ram_zone::buffer_size has type size_t which
is derived from the 64-bit *unsigned long*, while the ecc_blocks variable
this value gets assigned to has (always 32-bit) *int* type.  Even if that
value fits into *int* type, an overflow is still possible when calculating
the size_t typed ecc_total variable further below since there's no cast to
any 64-bit type before multiplication.  Declaring the ecc_blocks variable
as *size_t* should fix this mess...

Found by Linux Verification Center (linuxtesting.org) with the SVACE static
analysis tool.</description><pubDate>Fri, 17 May 2024 14:39:22 +0000</pubDate></item><item><title>CVE-2023-52686 | powerpc/powernv: Add a null pointer check in opal_event_init()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52686</link><description>In the Linux kernel, the following vulnerability has been resolved:

powerpc/powernv: Add a null pointer check in opal_event_init()

kasprintf() returns a pointer to dynamically allocated memory
which can be NULL upon failure.</description><pubDate>Fri, 17 May 2024 14:39:22 +0000</pubDate></item><item><title>CVE-2023-52692 | ALSA: scarlett2: Add missing error check to scarlett2_usb_set_config()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52692</link><description>In the Linux kernel, the following vulnerability has been resolved:

ALSA: scarlett2: Add missing error check to scarlett2_usb_set_config()

scarlett2_usb_set_config() calls scarlett2_usb_get() but was not
checking the result. Return the error if it fails rather than
continuing with an invalid value.</description><pubDate>Fri, 17 May 2024 14:39:22 +0000</pubDate></item><item><title>CVE-2023-52693 | ACPI: video: check for error while searching for backlight device parent</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52693</link><description>In the Linux kernel, the following vulnerability has been resolved:

ACPI: video: check for error while searching for backlight device parent

If acpi_get_parent() called in acpi_video_dev_register_backlight()
fails, for example, because acpi_ut_acquire_mutex() fails inside
acpi_get_parent), this can lead to incorrect (uninitialized)
acpi_parent handle being passed to acpi_get_pci_dev() for detecting
the parent pci device.

Check acpi_get_parent() result and set parent device only in case of success.

Found by Linux Verification Center (linuxtesting.org) with SVACE.</description><pubDate>Fri, 17 May 2024 14:39:23 +0000</pubDate></item><item><title>CVE-2023-52694 | drm/bridge: tpd12s015: Drop buggy __exit annotation for remove function</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52694</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/bridge: tpd12s015: Drop buggy __exit annotation for remove function

With tpd12s015_remove() marked with __exit this function is discarded
when the driver is compiled as a built-in. The result is that when the
driver unbinds there is no cleanup done which results in resource
leakage or worse.</description><pubDate>Fri, 17 May 2024 14:39:23 +0000</pubDate></item><item><title>CVE-2023-52695 | drm/amd/display: Check writeback connectors in create_validate_stream_for_sink</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52695</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/display: Check writeback connectors in create_validate_stream_for_sink

[WHY &amp; HOW]
This is to check connector type to avoid
unhandled null pointer for writeback connectors.</description><pubDate>Fri, 17 May 2024 14:39:23 +0000</pubDate></item><item><title>CVE-2023-52696 | powerpc/powernv: Add a null pointer check in opal_powercap_init()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52696</link><description>In the Linux kernel, the following vulnerability has been resolved:

powerpc/powernv: Add a null pointer check in opal_powercap_init()

kasprintf() returns a pointer to dynamically allocated memory
which can be NULL upon failure.</description><pubDate>Fri, 17 May 2024 14:39:24 +0000</pubDate></item><item><title>CVE-2023-52697 | ASoC: Intel: sof_sdw_rt_sdca_jack_common: ctx-&amp;gt;headset_codec_dev = NULL</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52697</link><description>In the Linux kernel, the following vulnerability has been resolved:

ASoC: Intel: sof_sdw_rt_sdca_jack_common: ctx-&gt;headset_codec_dev = NULL

sof_sdw_rt_sdca_jack_exit() are used by different codecs, and some of
them use the same dai name.
For example, rt712 and rt713 both use "rt712-sdca-aif1" and
sof_sdw_rt_sdca_jack_exit().
As a result, sof_sdw_rt_sdca_jack_exit() will be called twice by
mc_dailink_exit_loop(). Set ctx-&gt;headset_codec_dev = NULL; after
put_device(ctx-&gt;headset_codec_dev); to avoid ctx-&gt;headset_codec_dev
being put twice.</description><pubDate>Fri, 17 May 2024 14:39:24 +0000</pubDate></item><item><title>CVE-2023-52698 | calipso: fix memory leak in netlbl_calipso_add_pass()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52698</link><description>In the Linux kernel, the following vulnerability has been resolved:

calipso: fix memory leak in netlbl_calipso_add_pass()

If IPv6 support is disabled at boot (ipv6.disable=1),
the calipso_init() -&gt; netlbl_calipso_ops_register() function isn't called,
and the netlbl_calipso_ops_get() function always returns NULL.
In this case, the netlbl_calipso_add_pass() function allocates memory
for the doi_def variable but doesn't free it with the calipso_doi_free().

BUG: memory leak
unreferenced object 0xffff888011d68180 (size 64):
  comm "syz-executor.1", pid 10746, jiffies 4295410986 (age 17.928s)
  hex dump (first 32 bytes):
    00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00  ................
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  backtrace:
    [&lt;...&gt;] kmalloc include/linux/slab.h:552 [inline]
    [&lt;...&gt;] netlbl_calipso_add_pass net/netlabel/netlabel_calipso.c:76 [inline]
    [&lt;...&gt;] netlbl_calipso_add+0x22e/0x4f0 net/netlabel/netlabel_calipso.c:111
    [&lt;...&gt;] genl_family_rcv_msg_doit+0x22f/0x330 net/netlink/genetlink.c:739
    [&lt;...&gt;] genl_family_rcv_msg net/netlink/genetlink.c:783 [inline]
    [&lt;...&gt;] genl_rcv_msg+0x341/0x5a0 net/netlink/genetlink.c:800
    [&lt;...&gt;] netlink_rcv_skb+0x14d/0x440 net/netlink/af_netlink.c:2515
    [&lt;...&gt;] genl_rcv+0x29/0x40 net/netlink/genetlink.c:811
    [&lt;...&gt;] netlink_unicast_kernel net/netlink/af_netlink.c:1313 [inline]
    [&lt;...&gt;] netlink_unicast+0x54b/0x800 net/netlink/af_netlink.c:1339
    [&lt;...&gt;] netlink_sendmsg+0x90a/0xdf0 net/netlink/af_netlink.c:1934
    [&lt;...&gt;] sock_sendmsg_nosec net/socket.c:651 [inline]
    [&lt;...&gt;] sock_sendmsg+0x157/0x190 net/socket.c:671
    [&lt;...&gt;] ____sys_sendmsg+0x712/0x870 net/socket.c:2342
    [&lt;...&gt;] ___sys_sendmsg+0xf8/0x170 net/socket.c:2396
    [&lt;...&gt;] __sys_sendmsg+0xea/0x1b0 net/socket.c:2429
    [&lt;...&gt;] do_syscall_64+0x30/0x40 arch/x86/entry/common.c:46
    [&lt;...&gt;] entry_SYSCALL_64_after_hwframe+0x61/0xc6

Found by InfoTeCS on behalf of Linux Verification Center
(linuxtesting.org) with Syzkaller

[PM: merged via the LSM tree at Jakub Kicinski request]</description><pubDate>Fri, 17 May 2024 14:39:24 +0000</pubDate></item><item><title>CVE-2024-35839 | netfilter: bridge: replace physindev with physinif in nf_bridge_info</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35839</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: bridge: replace physindev with physinif in nf_bridge_info

An skb can be added to a neigh-&gt;arp_queue while waiting for an arp
reply. Where original skb's skb-&gt;dev can be different to neigh's
neigh-&gt;dev. For instance in case of bridging dnated skb from one veth to
another, the skb would be added to a neigh-&gt;arp_queue of the bridge.

As skb-&gt;dev can be reset back to nf_bridge-&gt;physindev and used, and as
there is no explicit mechanism that prevents this physindev from been
freed under us (for instance neigh_flush_dev doesn't cleanup skbs from
different device's neigh queue) we can crash on e.g. this stack:

arp_process
  neigh_update
    skb = __skb_dequeue(&amp;amp;neigh-&gt;arp_queue)
      neigh_resolve_output(..., skb)
        ...
          br_nf_dev_xmit
            br_nf_pre_routing_finish_bridge_slow
              skb-&gt;dev = nf_bridge-&gt;physindev
              br_handle_frame_finish

Let's use plain ifindex instead of net_device link. To peek into the
original net_device we will use dev_get_by_index_rcu(). Thus either we
get device and are safe to use it or we don't get it and drop skb.</description><pubDate>Fri, 17 May 2024 14:39:25 +0000</pubDate></item><item><title>CVE-2024-35840 | mptcp: use OPTION_MPTCP_MPJ_SYNACK in subflow_finish_connect()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35840</link><description>In the Linux kernel, the following vulnerability has been resolved:

mptcp: use OPTION_MPTCP_MPJ_SYNACK in subflow_finish_connect()

subflow_finish_connect() uses four fields (backup, join_id, thmac, none)
that may contain garbage unless OPTION_MPTCP_MPJ_SYNACK has been set
in mptcp_parse_option()</description><pubDate>Fri, 17 May 2024 14:39:25 +0000</pubDate></item><item><title>CVE-2024-35841 | net: tls, fix WARNIING in __sk_msg_free</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35841</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: tls, fix WARNIING in __sk_msg_free

A splice with MSG_SPLICE_PAGES will cause tls code to use the
tls_sw_sendmsg_splice path in the TLS sendmsg code to move the user
provided pages from the msg into the msg_pl. This will loop over the
msg until msg_pl is full, checked by sk_msg_full(msg_pl). The user
can also set the MORE flag to hint stack to delay sending until receiving
more pages and ideally a full buffer.

If the user adds more pages to the msg than can fit in the msg_pl
scatterlist (MAX_MSG_FRAGS) we should ignore the MORE flag and send
the buffer anyways.

What actually happens though is we abort the msg to msg_pl scatterlist
setup and then because we forget to set 'full record' indicating we
can no longer consume data without a send we fallthrough to the 'continue'
path which will check if msg_data_left(msg) has more bytes to send and
then attempts to fit them in the already full msg_pl. Then next
iteration of sender doing send will encounter a full msg_pl and throw
the warning in the syzbot report.

To fix simply check if we have a full_record in splice code path and
if not send the msg regardless of MORE flag.</description><pubDate>Fri, 17 May 2024 14:39:25 +0000</pubDate></item><item><title>CVE-2024-35842 | ASoC: mediatek: sof-common: Add NULL check for normal_link string</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35842</link><description>In the Linux kernel, the following vulnerability has been resolved:

ASoC: mediatek: sof-common: Add NULL check for normal_link string

It's not granted that all entries of struct sof_conn_stream declare
a `normal_link` (a non-SOF, direct link) string, and this is the case
for SoCs that support only SOF paths (hence do not support both direct
and SOF usecases).

For example, in the case of MT8188 there is no normal_link string in
any of the sof_conn_stream entries and there will be more drivers
doing that in the future.

To avoid possible NULL pointer KPs, add a NULL check for `normal_link`.</description><pubDate>Fri, 17 May 2024 14:39:26 +0000</pubDate></item><item><title>CVE-2024-5051 | SourceCodester Gas Agency Management System edituser.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5051</link><description>A vulnerability has been found in SourceCodester Gas Agency Management System 1.0 and classified as critical. This vulnerability affects unknown code of the file edituser.php. The manipulation of the argument id leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-264748.</description><pubDate>Fri, 17 May 2024 14:39:26 +0000</pubDate></item><item><title>CVE-2023-52674 | ALSA: scarlett2: Add clamp() in scarlett2_mixer_ctl_put()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52674</link><description>In the Linux kernel, the following vulnerability has been resolved:

ALSA: scarlett2: Add clamp() in scarlett2_mixer_ctl_put()

Ensure the value passed to scarlett2_mixer_ctl_put() is between 0 and
SCARLETT2_MIXER_MAX_VALUE so we don't attempt to access outside
scarlett2_mixer_values[].</description><pubDate>Fri, 17 May 2024 14:29:33 +0000</pubDate></item><item><title>CVE-2023-52675 | powerpc/imc-pmu: Add a null pointer check in update_events_in_group()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52675</link><description>In the Linux kernel, the following vulnerability has been resolved:

powerpc/imc-pmu: Add a null pointer check in update_events_in_group()

kasprintf() returns a pointer to dynamically allocated memory
which can be NULL upon failure.</description><pubDate>Fri, 17 May 2024 14:29:34 +0000</pubDate></item><item><title>CVE-2023-52676 | bpf: Guard stack limits against 32bit overflow</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52676</link><description>In the Linux kernel, the following vulnerability has been resolved:

bpf: Guard stack limits against 32bit overflow

This patch promotes the arithmetic around checking stack bounds to be
done in the 64-bit domain, instead of the current 32bit. The arithmetic
implies adding together a 64-bit register with a int offset. The
register was checked to be below 1&lt;&lt;29 when it was variable, but not
when it was fixed. The offset either comes from an instruction (in which
case it is 16 bit), from another register (in which case the caller
checked it to be below 1&lt;&lt;29 [1]), or from the size of an argument to a
kfunc (in which case it can be a u32 [2]). Between the register being
inconsistently checked to be below 1&lt;&lt;29, and the offset being up to an
u32, it appears that we were open to overflowing the `int`s which were
currently used for arithmetic.

[1] https://github.com/torvalds/linux/blob/815fb87b753055df2d9e50f6cd80eb10235fe3e9/kernel/bpf/verifier.c#L7494-L7498
[2] https://github.com/torvalds/linux/blob/815fb87b753055df2d9e50f6cd80eb10235fe3e9/kernel/bpf/verifier.c#L11904</description><pubDate>Fri, 17 May 2024 14:29:34 +0000</pubDate></item><item><title>CVE-2023-52677 | riscv: Check if the code to patch lies in the exit section</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52677</link><description>In the Linux kernel, the following vulnerability has been resolved:

riscv: Check if the code to patch lies in the exit section

Otherwise we fall through to vmalloc_to_page() which panics since the
address does not lie in the vmalloc region.</description><pubDate>Fri, 17 May 2024 14:29:34 +0000</pubDate></item><item><title>CVE-2023-52678 | drm/amdkfd: Confirm list is non-empty before utilizing list_first_entry in kfd_topology.c</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52678</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amdkfd: Confirm list is non-empty before utilizing list_first_entry in kfd_topology.c

Before using list_first_entry, make sure to check that list is not
empty, if list is empty return -ENODATA.

Fixes the below:
drivers/gpu/drm/amd/amdgpu/../amdkfd/kfd_topology.c:1347 kfd_create_indirect_link_prop() warn: can 'gpu_link' even be NULL?
drivers/gpu/drm/amd/amdgpu/../amdkfd/kfd_topology.c:1428 kfd_add_peer_prop() warn: can 'iolink1' even be NULL?
drivers/gpu/drm/amd/amdgpu/../amdkfd/kfd_topology.c:1433 kfd_add_peer_prop() warn: can 'iolink2' even be NULL?</description><pubDate>Fri, 17 May 2024 14:29:35 +0000</pubDate></item><item><title>CVE-2023-52679 | of: Fix double free in of_parse_phandle_with_args_map</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52679</link><description>In the Linux kernel, the following vulnerability has been resolved:

of: Fix double free in of_parse_phandle_with_args_map

In of_parse_phandle_with_args_map() the inner loop that
iterates through the map entries calls of_node_put(new)
to free the reference acquired by the previous iteration
of the inner loop. This assumes that the value of "new" is
NULL on the first iteration of the inner loop.

Make sure that this is true in all iterations of the outer
loop by setting "new" to NULL after its value is assigned to "cur".

Extend the unittest to detect the double free and add an additional
test case that actually triggers this path.</description><pubDate>Fri, 17 May 2024 14:29:35 +0000</pubDate></item><item><title>CVE-2023-52680 | ALSA: scarlett2: Add missing error checks to *_ctl_get()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52680</link><description>In the Linux kernel, the following vulnerability has been resolved:

ALSA: scarlett2: Add missing error checks to *_ctl_get()

The *_ctl_get() functions which call scarlett2_update_*() were not
checking the return value. Fix to check the return value and pass to
the caller.</description><pubDate>Fri, 17 May 2024 14:29:35 +0000</pubDate></item><item><title>CVE-2023-52681 | efivarfs: Free s_fs_info on unmount</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52681</link><description>In the Linux kernel, the following vulnerability has been resolved:

efivarfs: Free s_fs_info on unmount

Now that we allocate a s_fs_info struct on fs context creation, we
should ensure that we free it again when the superblock goes away.</description><pubDate>Fri, 17 May 2024 14:29:36 +0000</pubDate></item><item><title>CVE-2023-52682 | f2fs: fix to wait on block writeback for post_read case</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52682</link><description>In the Linux kernel, the following vulnerability has been resolved:

f2fs: fix to wait on block writeback for post_read case

If inode is compressed, but not encrypted, it missed to call
f2fs_wait_on_block_writeback() to wait for GCed page writeback
in IPU write path.

Thread A				GC-Thread
					- f2fs_gc
					 - do_garbage_collect
					  - gc_data_segment
					   - move_data_block
					    - f2fs_submit_page_write
					     migrate normal cluster's block via
					     meta_inode's page cache
- f2fs_write_single_data_page
 - f2fs_do_write_data_page
  - f2fs_inplace_write_data
   - f2fs_submit_page_bio

IRQ
- f2fs_read_end_io
					IRQ
					old data overrides new data due to
					out-of-order GC and common IO.
					- f2fs_read_end_io</description><pubDate>Fri, 17 May 2024 14:29:36 +0000</pubDate></item><item><title>CVE-2023-52683 | ACPI: LPIT: Avoid u32 multiplication overflow</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52683</link><description>In the Linux kernel, the following vulnerability has been resolved:

ACPI: LPIT: Avoid u32 multiplication overflow

In lpit_update_residency() there is a possibility of overflow
in multiplication, if tsc_khz is large enough (&gt; UINT_MAX/1000).

Change multiplication to mul_u32_u32().

Found by Linux Verification Center (linuxtesting.org) with SVACE.</description><pubDate>Fri, 17 May 2024 14:29:37 +0000</pubDate></item><item><title>CVE-2023-52687 | crypto: safexcel - Add error handling for dma_map_sg() calls</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52687</link><description>In the Linux kernel, the following vulnerability has been resolved:

crypto: safexcel - Add error handling for dma_map_sg() calls

Macro dma_map_sg() may return 0 on error. This patch enables
checks in case of the macro failure and ensures unmapping of
previously mapped buffers with dma_unmap_sg().

Found by Linux Verification Center (linuxtesting.org) with static
analysis tool SVACE.</description><pubDate>Fri, 17 May 2024 14:29:37 +0000</pubDate></item><item><title>CVE-2023-52688 | wifi: ath12k: fix the error handler of rfkill config</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52688</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: ath12k: fix the error handler of rfkill config

When the core rfkill config throws error, it should free the
allocated resources. Currently it is not freeing the core pdev
create resources. Avoid this issue by calling the core pdev
destroy in the error handler of core rfkill config.

Found this issue in the code review and it is compile tested only.</description><pubDate>Fri, 17 May 2024 14:29:37 +0000</pubDate></item><item><title>CVE-2023-52689 | ALSA: scarlett2: Add missing mutex lock around get meter levels</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52689</link><description>In the Linux kernel, the following vulnerability has been resolved:

ALSA: scarlett2: Add missing mutex lock around get meter levels

As scarlett2_meter_ctl_get() uses meter_level_map[], the data_mutex
should be locked while accessing it.</description><pubDate>Fri, 17 May 2024 14:29:38 +0000</pubDate></item><item><title>CVE-2023-52690 | powerpc/powernv: Add a null pointer check to scom_debug_init_one()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52690</link><description>In the Linux kernel, the following vulnerability has been resolved:

powerpc/powernv: Add a null pointer check to scom_debug_init_one()

kasprintf() returns a pointer to dynamically allocated memory
which can be NULL upon failure.
Add a null pointer check, and release 'ent' to avoid memory leaks.</description><pubDate>Fri, 17 May 2024 14:29:38 +0000</pubDate></item><item><title>CVE-2023-52691 | drm/amd/pm: fix a double-free in si_dpm_init</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52691</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/pm: fix a double-free in si_dpm_init

When the allocation of
adev-&gt;pm.dpm.dyn_state.vddc_dependency_on_dispclk.entries fails,
amdgpu_free_extended_power_table is called to free some fields of adev.
However, when the control flow returns to si_dpm_sw_init, it goes to
label dpm_failed and calls si_dpm_fini, which calls
amdgpu_free_extended_power_table again and free those fields again. Thus
a double-free is triggered.</description><pubDate>Fri, 17 May 2024 14:29:38 +0000</pubDate></item><item><title>CVE-2023-52665 | powerpc/ps3_defconfig: Disable PPC64_BIG_ENDIAN_ELF_ABI_V2</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52665</link><description>In the Linux kernel, the following vulnerability has been resolved:

powerpc/ps3_defconfig: Disable PPC64_BIG_ENDIAN_ELF_ABI_V2

Commit 8c5fa3b5c4df ("powerpc/64: Make ELFv2 the default for big-endian
builds"), merged in Linux-6.5-rc1 changes the calling ABI in a way
that is incompatible with the current code for the PS3's LV1 hypervisor
calls.

This change just adds the line '# CONFIG_PPC64_BIG_ENDIAN_ELF_ABI_V2 is not set'
to the ps3_defconfig file so that the PPC64_ELF_ABI_V1 is used.

Fixes run time errors like these:

  BUG: Kernel NULL pointer dereference at 0x00000000
  Faulting instruction address: 0xc000000000047cf0
  Oops: Kernel access of bad area, sig: 11 [#1]
  Call Trace:
  [c0000000023039e0] [c00000000100ebfc] ps3_create_spu+0xc4/0x2b0 (unreliable)
  [c000000002303ab0] [c00000000100d4c4] create_spu+0xcc/0x3c4
  [c000000002303b40] [c00000000100eae4] ps3_enumerate_spus+0xa4/0xf8</description><pubDate>Fri, 17 May 2024 14:13:58 +0000</pubDate></item><item><title>CVE-2023-52666 | ksmbd: fix potential circular locking issue in smb2_set_ea()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52666</link><description>In the Linux kernel, the following vulnerability has been resolved:

ksmbd: fix potential circular locking issue in smb2_set_ea()

smb2_set_ea() can be called in parent inode lock range.
So add get_write argument to smb2_set_ea() not to call nested
mnt_want_write().</description><pubDate>Fri, 17 May 2024 14:13:59 +0000</pubDate></item><item><title>CVE-2023-52667 | net/mlx5e: fix a potential double-free in fs_any_create_groups</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52667</link><description>In the Linux kernel, the following vulnerability has been resolved:

net/mlx5e: fix a potential double-free in fs_any_create_groups

When kcalloc() for ft-&gt;g succeeds but kvzalloc() for in fails,
fs_any_create_groups() will free ft-&gt;g. However, its caller
fs_any_create_table() will free ft-&gt;g again through calling
mlx5e_destroy_flow_table(), which will lead to a double-free.
Fix this by setting ft-&gt;g to NULL in fs_any_create_groups().</description><pubDate>Fri, 17 May 2024 14:13:59 +0000</pubDate></item><item><title>CVE-2023-52668 | btrfs: zoned: fix lock ordering in btrfs_zone_activate()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52668</link><description>In the Linux kernel, the following vulnerability has been resolved:

btrfs: zoned: fix lock ordering in btrfs_zone_activate()

The btrfs CI reported a lockdep warning as follows by running generic
generic/129.

   WARNING: possible circular locking dependency detected
   6.7.0-rc5+ #1 Not tainted
   ------------------------------------------------------
   kworker/u5:5/793427 is trying to acquire lock:
   ffff88813256d028 (&amp;amp;cache-&gt;lock){+.+.}-{2:2}, at: btrfs_zone_finish_one_bg+0x5e/0x130
   but task is already holding lock:
   ffff88810a23a318 (&amp;amp;fs_info-&gt;zone_active_bgs_lock){+.+.}-{2:2}, at: btrfs_zone_finish_one_bg+0x34/0x130
   which lock already depends on the new lock.

   the existing dependency chain (in reverse order) is:
   -&gt; #1 (&amp;amp;fs_info-&gt;zone_active_bgs_lock){+.+.}-{2:2}:
   ...
   -&gt; #0 (&amp;amp;cache-&gt;lock){+.+.}-{2:2}:
   ...

This is because we take fs_info-&gt;zone_active_bgs_lock after a block_group's
lock in btrfs_zone_activate() while doing the opposite in other places.

Fix the issue by expanding the fs_info-&gt;zone_active_bgs_lock's critical
section and taking it before a block_group's lock.</description><pubDate>Fri, 17 May 2024 14:13:59 +0000</pubDate></item><item><title>CVE-2023-52669 | crypto: s390/aes - Fix buffer overread in CTR mode</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52669</link><description>In the Linux kernel, the following vulnerability has been resolved:

crypto: s390/aes - Fix buffer overread in CTR mode

When processing the last block, the s390 ctr code will always read
a whole block, even if there isn't a whole block of data left.  Fix
this by using the actual length left and copy it into a buffer first
for processing.</description><pubDate>Fri, 17 May 2024 14:14:00 +0000</pubDate></item><item><title>CVE-2023-52670 | rpmsg: virtio: Free driver_override when rpmsg_remove()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52670</link><description>In the Linux kernel, the following vulnerability has been resolved:

rpmsg: virtio: Free driver_override when rpmsg_remove()

Free driver_override when rpmsg_remove(), otherwise
the following memory leak will occur:

unreferenced object 0xffff0000d55d7080 (size 128):
  comm "kworker/u8:2", pid 56, jiffies 4294893188 (age 214.272s)
  hex dump (first 32 bytes):
    72 70 6d 73 67 5f 6e 73 00 00 00 00 00 00 00 00  rpmsg_ns........
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  backtrace:
    [&lt;000000009c94c9c1&gt;] __kmem_cache_alloc_node+0x1f8/0x320
    [&lt;000000002300d89b&gt;] __kmalloc_node_track_caller+0x44/0x70
    [&lt;00000000228a60c3&gt;] kstrndup+0x4c/0x90
    [&lt;0000000077158695&gt;] driver_set_override+0xd0/0x164
    [&lt;000000003e9c4ea5&gt;] rpmsg_register_device_override+0x98/0x170
    [&lt;000000001c0c89a8&gt;] rpmsg_ns_register_device+0x24/0x30
    [&lt;000000008bbf8fa2&gt;] rpmsg_probe+0x2e0/0x3ec
    [&lt;00000000e65a68df&gt;] virtio_dev_probe+0x1c0/0x280
    [&lt;00000000443331cc&gt;] really_probe+0xbc/0x2dc
    [&lt;00000000391064b1&gt;] __driver_probe_device+0x78/0xe0
    [&lt;00000000a41c9a5b&gt;] driver_probe_device+0xd8/0x160
    [&lt;000000009c3bd5df&gt;] __device_attach_driver+0xb8/0x140
    [&lt;0000000043cd7614&gt;] bus_for_each_drv+0x7c/0xd4
    [&lt;000000003b929a36&gt;] __device_attach+0x9c/0x19c
    [&lt;00000000a94e0ba8&gt;] device_initial_probe+0x14/0x20
    [&lt;000000003c999637&gt;] bus_probe_device+0xa0/0xac</description><pubDate>Fri, 17 May 2024 14:14:00 +0000</pubDate></item><item><title>CVE-2023-52671 | drm/amd/display: Fix hang/underflow when transitioning to ODM4:1</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52671</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/display: Fix hang/underflow when transitioning to ODM4:1

[Why]
Under some circumstances, disabling an OPTC and attempting to reclaim
its OPP(s) for a different OPTC could cause a hang/underflow due to OPPs
not being properly disconnected from the disabled OPTC.

[How]
Ensure that all OPPs are unassigned from an OPTC when it gets disabled.</description><pubDate>Fri, 17 May 2024 14:14:00 +0000</pubDate></item><item><title>CVE-2023-52672 | pipe: wakeup wr_wait after setting max_usage</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52672</link><description>In the Linux kernel, the following vulnerability has been resolved:

pipe: wakeup wr_wait after setting max_usage

Commit c73be61cede5 ("pipe: Add general notification queue support") a
regression was introduced that would lock up resized pipes under certain
conditions. See the reproducer in [1].

The commit resizing the pipe ring size was moved to a different
function, doing that moved the wakeup for pipe-&gt;wr_wait before actually
raising pipe-&gt;max_usage. If a pipe was full before the resize occured it
would result in the wakeup never actually triggering pipe_write.

Set @max_usage and @nr_accounted before waking writers if this isn't a
watch queue.

[Christian Brauner : rewrite to account for watch queues]</description><pubDate>Fri, 17 May 2024 14:14:01 +0000</pubDate></item><item><title>CVE-2023-52673 | drm/amd/display: Fix a debugfs null pointer error</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52673</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/display: Fix a debugfs null pointer error

[WHY &amp; HOW]
Check whether get_subvp_en() callback exists before calling it.</description><pubDate>Fri, 17 May 2024 14:14:01 +0000</pubDate></item><item><title>CVE-2024-35834 | xsk: recycle buffer in case Rx queue was full</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35834</link><description>In the Linux kernel, the following vulnerability has been resolved:

xsk: recycle buffer in case Rx queue was full

Add missing xsk_buff_free() call when __xsk_rcv_zc() failed to produce
descriptor to XSK Rx queue.</description><pubDate>Fri, 17 May 2024 14:14:01 +0000</pubDate></item><item><title>CVE-2024-35835 | net/mlx5e: fix a double-free in arfs_create_groups</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35835</link><description>In the Linux kernel, the following vulnerability has been resolved:

net/mlx5e: fix a double-free in arfs_create_groups

When `in` allocated by kvzalloc fails, arfs_create_groups will free
ft-&gt;g and return an error. However, arfs_create_table, the only caller of
arfs_create_groups, will hold this error and call to
mlx5e_destroy_flow_table, in which the ft-&gt;g will be freed again.</description><pubDate>Fri, 17 May 2024 14:14:02 +0000</pubDate></item><item><title>CVE-2024-35836 | dpll: fix pin dump crash for rebound module</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35836</link><description>In the Linux kernel, the following vulnerability has been resolved:

dpll: fix pin dump crash for rebound module

When a kernel module is unbound but the pin resources were not entirely
freed (other kernel module instance of the same PCI device have had kept
the reference to that pin), and kernel module is again bound, the pin
properties would not be updated (the properties are only assigned when
memory for the pin is allocated), prop pointer still points to the
kernel module memory of the kernel module which was deallocated on the
unbind.

If the pin dump is invoked in this state, the result is a kernel crash.
Prevent the crash by storing persistent pin properties in dpll subsystem,
copy the content from the kernel module when pin is allocated, instead of
using memory of the kernel module.</description><pubDate>Fri, 17 May 2024 14:14:02 +0000</pubDate></item><item><title>CVE-2024-35837 | net: mvpp2: clear BM pool before initialization</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35837</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: mvpp2: clear BM pool before initialization

Register value persist after booting the kernel using
kexec which results in kernel panic. Thus clear the
BM pool registers before initialisation to fix the issue.</description><pubDate>Fri, 17 May 2024 14:14:02 +0000</pubDate></item><item><title>CVE-2024-35838 | wifi: mac80211: fix potential sta-link leak</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35838</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: mac80211: fix potential sta-link leak

When a station is allocated, links are added but not
set to valid yet (e.g. during connection to an AP MLD),
we might remove the station without ever marking links
valid, and leak them. Fix that.</description><pubDate>Fri, 17 May 2024 14:14:03 +0000</pubDate></item><item><title>CVE-2024-5049 | Codezips E-Commerce Site editproduct.php unrestricted upload</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5049</link><description>A vulnerability, which was classified as critical, has been found in Codezips E-Commerce Site 1.0. Affected by this issue is some unknown functionality of the file admin/editproduct.php. The manipulation of the argument profilepic leads to unrestricted upload. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. VDB-264746 is the identifier assigned to this vulnerability.</description><pubDate>Fri, 17 May 2024 14:14:03 +0000</pubDate></item><item><title>CVE-2024-5050 | Wangshen SecGate 3600 ?g=log_import_save unrestricted upload</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5050</link><description>A vulnerability, which was classified as critical, was found in Wangshen SecGate 3600 up to 20240516. This affects an unknown part of the file /?g=log_import_save. The manipulation of the argument reqfile leads to unrestricted upload. It is possible to initiate the attack remotely. The associated identifier of this vulnerability is VDB-264747.</description><pubDate>Fri, 17 May 2024 14:14:03 +0000</pubDate></item><item><title>CVE-2024-35832 | bcachefs: kvfree bch_fs::snapshots in bch2_fs_snapshots_exit</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35832</link><description>In the Linux kernel, the following vulnerability has been resolved:

bcachefs: kvfree bch_fs::snapshots in bch2_fs_snapshots_exit

bch_fs::snapshots is allocated by kvzalloc in __snapshot_t_mut.
It should be freed by kvfree not kfree.
Or umount will triger:

[  406.829178 ] BUG: unable to handle page fault for address: ffffe7b487148008
[  406.830676 ] #PF: supervisor read access in kernel mode
[  406.831643 ] #PF: error_code(0x0000) - not-present page
[  406.832487 ] PGD 0 P4D 0
[  406.832898 ] Oops: 0000 [#1] PREEMPT SMP PTI
[  406.833512 ] CPU: 2 PID: 1754 Comm: umount Kdump: loaded Tainted: G           OE      6.7.0-rc7-custom+ #90
[  406.834746 ] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Arch Linux 1.16.3-1-1 04/01/2014
[  406.835796 ] RIP: 0010:kfree+0x62/0x140
[  406.836197 ] Code: 80 48 01 d8 0f 82 e9 00 00 00 48 c7 c2 00 00 00 80 48 2b 15 78 9f 1f 01 48 01 d0 48 c1 e8 0c 48 c1 e0 06 48 03 05 56 9f 1f 01 &lt;48&gt; 8b 50 08 48 89 c7 f6 c2 01 0f 85 b0 00 00 00 66 90 48 8b 07 f6
[  406.837810 ] RSP: 0018:ffffb9d641607e48 EFLAGS: 00010286
[  406.838213 ] RAX: ffffe7b487148000 RBX: ffffb9d645200000 RCX: ffffb9d641607dc4
[  406.838738 ] RDX: 000065bb00000000 RSI: ffffffffc0d88b84 RDI: ffffb9d645200000
[  406.839217 ] RBP: ffff9a4625d00068 R08: 0000000000000001 R09: 0000000000000001
[  406.839650 ] R10: 0000000000000001 R11: 000000000000001f R12: ffff9a4625d4da80
[  406.840055 ] R13: ffff9a4625d00000 R14: ffffffffc0e2eb20 R15: 0000000000000000
[  406.840451 ] FS:  00007f0a264ffb80(0000) GS:ffff9a4e2d500000(0000) knlGS:0000000000000000
[  406.840851 ] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[  406.841125 ] CR2: ffffe7b487148008 CR3: 000000018c4d2000 CR4: 00000000000006f0
[  406.841464 ] Call Trace:
[  406.841583 ]  
[  406.841682 ]  ? __die+0x1f/0x70
[  406.841828 ]  ? page_fault_oops+0x159/0x470
[  406.842014 ]  ? fixup_exception+0x22/0x310
[  406.842198 ]  ? exc_page_fault+0x1ed/0x200
[  406.842382 ]  ? asm_exc_page_fault+0x22/0x30
[  406.842574 ]  ? bch2_fs_release+0x54/0x280 [bcachefs]
[  406.842842 ]  ? kfree+0x62/0x140
[  406.842988 ]  ? kfree+0x104/0x140
[  406.843138 ]  bch2_fs_release+0x54/0x280 [bcachefs]
[  406.843390 ]  kobject_put+0xb7/0x170
[  406.843552 ]  deactivate_locked_super+0x2f/0xa0
[  406.843756 ]  cleanup_mnt+0xba/0x150
[  406.843917 ]  task_work_run+0x59/0xa0
[  406.844083 ]  exit_to_user_mode_prepare+0x197/0x1a0
[  406.844302 ]  syscall_exit_to_user_mode+0x16/0x40
[  406.844510 ]  do_syscall_64+0x4e/0xf0
[  406.844675 ]  entry_SYSCALL_64_after_hwframe+0x6e/0x76
[  406.844907 ] RIP: 0033:0x7f0a2664e4fb</description><pubDate>Fri, 17 May 2024 13:56:12 +0000</pubDate></item><item><title>CVE-2024-35833 | dmaengine: fsl-qdma: Fix a memory leak related to the queue command DMA</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35833</link><description>In the Linux kernel, the following vulnerability has been resolved:

dmaengine: fsl-qdma: Fix a memory leak related to the queue command DMA

This dma_alloc_coherent() is undone neither in the remove function, nor in
the error handling path of fsl_qdma_probe().

Switch to the managed version to fix both issues.</description><pubDate>Fri, 17 May 2024 13:56:12 +0000</pubDate></item><item><title>CVE-2023-52661 | drm/tegra: rgb: Fix missing clk_put() in the error handling paths of tegra_dc_rgb_probe()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52661</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/tegra: rgb: Fix missing clk_put() in the error handling paths of tegra_dc_rgb_probe()

If clk_get_sys(..., "pll_d2_out0") fails, the clk_get_sys() call must be
undone.

Add the missing clk_put and a new 'put_pll_d_out0' label in the error
handling path, and use it.</description><pubDate>Fri, 17 May 2024 13:56:13 +0000</pubDate></item><item><title>CVE-2023-52662 | drm/vmwgfx: fix a memleak in vmw_gmrid_man_get_node</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52662</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/vmwgfx: fix a memleak in vmw_gmrid_man_get_node

When ida_alloc_max fails, resources allocated before should be freed,
including *res allocated by kmalloc and ttm_resource_init.</description><pubDate>Fri, 17 May 2024 13:56:13 +0000</pubDate></item><item><title>CVE-2023-52663 | ASoC: SOF: amd: Fix memory leak in amd_sof_acp_probe()</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52663</link><description>In the Linux kernel, the following vulnerability has been resolved:

ASoC: SOF: amd: Fix memory leak in amd_sof_acp_probe()

Driver uses kasprintf() to initialize fw_{code,data}_bin members of
struct acp_dev_data, but kfree() is never called to deallocate the
memory, which results in a memory leak.

Fix the issue by switching to devm_kasprintf(). Additionally, ensure the
allocation was successful by checking the pointer validity.</description><pubDate>Fri, 17 May 2024 13:56:13 +0000</pubDate></item><item><title>CVE-2023-52664 | net: atlantic: eliminate double free in error handling logic</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52664</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: atlantic: eliminate double free in error handling logic

Driver has a logic leak in ring data allocation/free,
where aq_ring_free could be called multiple times on same ring,
if system is under stress and got memory allocation error.

Ring pointer was used as an indicator of failure, but this is
not correct since only ring data is allocated/deallocated.
Ring itself is an array member.

Changing ring allocation functions to return error code directly.
This simplifies error handling and eliminates aq_ring_free
on higher layer.</description><pubDate>Fri, 17 May 2024 13:56:14 +0000</pubDate></item><item><title>CVE-2024-34919 | An arbitrary file upload vulnerability in the component \modstudent\controller.php of Pisay Online E-Learning System using PHP/MySQL v1.0 al...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34919</link><description>An arbitrary file upload vulnerability in the component \modstudent\controller.php of Pisay Online E-Learning System using PHP/MySQL v1.0 allows attackers to execute arbitrary code via uploading a crafted file.</description><pubDate>Fri, 17 May 2024 13:56:14 +0000</pubDate></item><item><title>CVE-2024-34982 | An arbitrary file upload vulnerability in the component /include/file.php of lylme_spage v1.9.5 allows attackers to execute arbitrary code v...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34982</link><description>An arbitrary file upload vulnerability in the component /include/file.php of lylme_spage v1.9.5 allows attackers to execute arbitrary code via uploading a crafted file.</description><pubDate>Fri, 17 May 2024 13:56:14 +0000</pubDate></item><item><title>CVE-2024-35827 | io_uring/net: fix overflow check in io_recvmsg_mshot_prep()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35827</link><description>In the Linux kernel, the following vulnerability has been resolved:

io_uring/net: fix overflow check in io_recvmsg_mshot_prep()

The "controllen" variable is type size_t (unsigned long).  Casting it
to int could lead to an integer underflow.

The check_add_overflow() function considers the type of the destination
which is type int.  If we add two positive values and the result cannot
fit in an integer then that's counted as an overflow.

However, if we cast "controllen" to an int and it turns negative, then
negative values *can* fit into an int type so there is no overflow.

Good: 100 + (unsigned long)-4 = 96  &lt;-- overflow
 Bad: 100 + (int)-4 = 96 &lt;-- no overflow

I deleted the cast of the sizeof() as well.  That's not a bug but the
cast is unnecessary.</description><pubDate>Fri, 17 May 2024 13:56:15 +0000</pubDate></item><item><title>CVE-2024-35828 | wifi: libertas: fix some memleaks in lbs_allocate_cmd_buffer()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35828</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: libertas: fix some memleaks in lbs_allocate_cmd_buffer()

In the for statement of lbs_allocate_cmd_buffer(), if the allocation of
cmdarray[i].cmdbuf fails, both cmdarray and cmdarray[i].cmdbuf needs to
be freed. Otherwise, there will be memleaks in lbs_allocate_cmd_buffer().</description><pubDate>Fri, 17 May 2024 13:56:15 +0000</pubDate></item><item><title>CVE-2024-35829 | drm/lima: fix a memleak in lima_heap_alloc</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35829</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/lima: fix a memleak in lima_heap_alloc

When lima_vm_map_bo fails, the resources need to be deallocated, or
there will be memleaks.</description><pubDate>Fri, 17 May 2024 13:56:15 +0000</pubDate></item><item><title>CVE-2024-35830 | media: tc358743: register v4l2 async device only after successful setup</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35830</link><description>In the Linux kernel, the following vulnerability has been resolved:

media: tc358743: register v4l2 async device only after successful setup

Ensure the device has been setup correctly before registering the v4l2
async device, thus allowing userspace to access.</description><pubDate>Fri, 17 May 2024 13:56:16 +0000</pubDate></item><item><title>CVE-2024-35831 | io_uring: Fix release of pinned pages when __io_uaddr_map fails</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35831</link><description>In the Linux kernel, the following vulnerability has been resolved:

io_uring: Fix release of pinned pages when __io_uaddr_map fails

Looking at the error path of __io_uaddr_map, if we fail after pinning
the pages for any reasons, ret will be set to -EINVAL and the error
handler won't properly release the pinned pages.

I didn't manage to trigger it without forcing a failure, but it can
happen in real life when memory is heavily fragmented.</description><pubDate>Fri, 17 May 2024 13:56:16 +0000</pubDate></item><item><title>CVE-2024-5047 | SourceCodester Student Management System controller.php unrestricted upload</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5047</link><description>A vulnerability classified as critical has been found in SourceCodester Student Management System 1.0. Affected is an unknown function of the file /student/controller.php. The manipulation of the argument photo leads to unrestricted upload. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-264744.</description><pubDate>Fri, 17 May 2024 13:36:49 +0000</pubDate></item><item><title>CVE-2024-5048 | code-projects Budget Management index.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5048</link><description>A vulnerability classified as critical was found in code-projects Budget Management 1.0. Affected by this vulnerability is an unknown functionality of the file /index.php. The manipulation of the argument edit leads to sql injection. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-264745 was assigned to this vulnerability.</description><pubDate>Fri, 17 May 2024 13:36:50 +0000</pubDate></item><item><title>CVE-2024-35795 | drm/amdgpu: fix deadlock while reading mqd from debugfs</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35795</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amdgpu: fix deadlock while reading mqd from debugfs

An errant disk backup on my desktop got into debugfs and triggered the
following deadlock scenario in the amdgpu debugfs files. The machine
also hard-resets immediately after those lines are printed (although I
wasn't able to reproduce that part when reading by hand):

[ 1318.016074][ T1082] ======================================================
[ 1318.016607][ T1082] WARNING: possible circular locking dependency detected
[ 1318.017107][ T1082] 6.8.0-rc7-00015-ge0c8221b72c0 #17 Not tainted
[ 1318.017598][ T1082] ------------------------------------------------------
[ 1318.018096][ T1082] tar/1082 is trying to acquire lock:
[ 1318.018585][ T1082] ffff98c44175d6a0 (&amp;amp;mm-&gt;mmap_lock){++++}-{3:3}, at: __might_fault+0x40/0x80
[ 1318.019084][ T1082]
[ 1318.019084][ T1082] but task is already holding lock:
[ 1318.020052][ T1082] ffff98c4c13f55f8 (reservation_ww_class_mutex){+.+.}-{3:3}, at: amdgpu_debugfs_mqd_read+0x6a/0x250 [amdgpu]
[ 1318.020607][ T1082]
[ 1318.020607][ T1082] which lock already depends on the new lock.
[ 1318.020607][ T1082]
[ 1318.022081][ T1082]
[ 1318.022081][ T1082] the existing dependency chain (in reverse order) is:
[ 1318.023083][ T1082]
[ 1318.023083][ T1082] -&gt; #2 (reservation_ww_class_mutex){+.+.}-{3:3}:
[ 1318.024114][ T1082]        __ww_mutex_lock.constprop.0+0xe0/0x12f0
[ 1318.024639][ T1082]        ww_mutex_lock+0x32/0x90
[ 1318.025161][ T1082]        dma_resv_lockdep+0x18a/0x330
[ 1318.025683][ T1082]        do_one_initcall+0x6a/0x350
[ 1318.026210][ T1082]        kernel_init_freeable+0x1a3/0x310
[ 1318.026728][ T1082]        kernel_init+0x15/0x1a0
[ 1318.027242][ T1082]        ret_from_fork+0x2c/0x40
[ 1318.027759][ T1082]        ret_from_fork_asm+0x11/0x20
[ 1318.028281][ T1082]
[ 1318.028281][ T1082] -&gt; #1 (reservation_ww_class_acquire){+.+.}-{0:0}:
[ 1318.029297][ T1082]        dma_resv_lockdep+0x16c/0x330
[ 1318.029790][ T1082]        do_one_initcall+0x6a/0x350
[ 1318.030263][ T1082]        kernel_init_freeable+0x1a3/0x310
[ 1318.030722][ T1082]        kernel_init+0x15/0x1a0
[ 1318.031168][ T1082]        ret_from_fork+0x2c/0x40
[ 1318.031598][ T1082]        ret_from_fork_asm+0x11/0x20
[ 1318.032011][ T1082]
[ 1318.032011][ T1082] -&gt; #0 (&amp;amp;mm-&gt;mmap_lock){++++}-{3:3}:
[ 1318.032778][ T1082]        __lock_acquire+0x14bf/0x2680
[ 1318.033141][ T1082]        lock_acquire+0xcd/0x2c0
[ 1318.033487][ T1082]        __might_fault+0x58/0x80
[ 1318.033814][ T1082]        amdgpu_debugfs_mqd_read+0x103/0x250 [amdgpu]
[ 1318.034181][ T1082]        full_proxy_read+0x55/0x80
[ 1318.034487][ T1082]        vfs_read+0xa7/0x360
[ 1318.034788][ T1082]        ksys_read+0x70/0xf0
[ 1318.035085][ T1082]        do_syscall_64+0x94/0x180
[ 1318.035375][ T1082]        entry_SYSCALL_64_after_hwframe+0x46/0x4e
[ 1318.035664][ T1082]
[ 1318.035664][ T1082] other info that might help us debug this:
[ 1318.035664][ T1082]
[ 1318.036487][ T1082] Chain exists of:
[ 1318.036487][ T1082]   &amp;amp;mm-&gt;mmap_lock --&gt; reservation_ww_class_acquire --&gt; reservation_ww_class_mutex
[ 1318.036487][ T1082]
[ 1318.037310][ T1082]  Possible unsafe locking scenario:
[ 1318.037310][ T1082]
[ 1318.037838][ T1082]        CPU0                    CPU1
[ 1318.038101][ T1082]        ----                    ----
[ 1318.038350][ T1082]   lock(reservation_ww_class_mutex);
[ 1318.038590][ T1082]                                lock(reservation_ww_class_acquire);
[ 1318.038839][ T1082]                                lock(reservation_ww_class_mutex);
[ 1318.039083][ T1082]   rlock(&amp;amp;mm-&gt;mmap_lock);
[ 1318.039328][ T1082]
[ 1318.039328][ T1082]  *** DEADLOCK ***
[ 1318.039328][ T1082]
[ 1318.040029][ T1082] 1 lock held by tar/1082:
[ 1318.040259][ T1082]  #0: ffff98c4c13f55f8 (reservation_ww_class_mutex){+.+.}-{3:3}, at: amdgpu_debugfs_mqd_read+0x6a/0x250 [amdgpu]
[ 1318.040560][ T1082]
[ 1318.040560][ T1082] stack backtrace:
[
---truncated---</description><pubDate>Fri, 17 May 2024 13:36:50 +0000</pubDate></item><item><title>CVE-2024-35796 | net: ll_temac: platform_get_resource replaced by wrong function</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35796</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: ll_temac: platform_get_resource replaced by wrong function

The function platform_get_resource was replaced with
devm_platform_ioremap_resource_byname and is called using 0 as name.

This eventually ends up in platform_get_resource_byname in the call
stack, where it causes a null pointer in strcmp.

	if (type == resource_type(r) &amp;&amp; !strcmp(r-&gt;name, name))

It should have been replaced with devm_platform_ioremap_resource.</description><pubDate>Fri, 17 May 2024 13:36:51 +0000</pubDate></item><item><title>CVE-2024-35797 | mm: cachestat: fix two shmem bugs</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35797</link><description>In the Linux kernel, the following vulnerability has been resolved:

mm: cachestat: fix two shmem bugs

When cachestat on shmem races with swapping and invalidation, there
are two possible bugs:

1) A swapin error can have resulted in a poisoned swap entry in the
   shmem inode's xarray. Calling get_shadow_from_swap_cache() on it
   will result in an out-of-bounds access to swapper_spaces[].

   Validate the entry with non_swap_entry() before going further.

2) When we find a valid swap entry in the shmem's inode, the shadow
   entry in the swapcache might not exist yet: swap IO is still in
   progress and we're before __remove_mapping; swapin, invalidation,
   or swapoff have removed the shadow from swapcache after we saw the
   shmem swap entry.

   This will send a NULL to workingset_test_recent(). The latter
   purely operates on pointer bits, so it won't crash - node 0, memcg
   ID 0, eviction timestamp 0, etc. are all valid inputs - but it's a
   bogus test. In theory that could result in a false "recently
   evicted" count.

   Such a false positive wouldn't be the end of the world. But for
   code clarity and (future) robustness, be explicit about this case.

   Bail on get_shadow_from_swap_cache() returning NULL.</description><pubDate>Fri, 17 May 2024 13:36:51 +0000</pubDate></item><item><title>CVE-2024-35798 | btrfs: fix race in read_extent_buffer_pages()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35798</link><description>In the Linux kernel, the following vulnerability has been resolved:

btrfs: fix race in read_extent_buffer_pages()

There are reports from tree-checker that detects corrupted nodes,
without any obvious pattern so possibly an overwrite in memory.
After some debugging it turns out there's a race when reading an extent
buffer the uptodate status can be missed.

To prevent concurrent reads for the same extent buffer,
read_extent_buffer_pages() performs these checks:

    /* (1) */
    if (test_bit(EXTENT_BUFFER_UPTODATE, &amp;amp;eb-&gt;bflags))
        return 0;

    /* (2) */
    if (test_and_set_bit(EXTENT_BUFFER_READING, &amp;amp;eb-&gt;bflags))
        goto done;

At this point, it seems safe to start the actual read operation. Once
that completes, end_bbio_meta_read() does

    /* (3) */
    set_extent_buffer_uptodate(eb);

    /* (4) */
    clear_bit(EXTENT_BUFFER_READING, &amp;amp;eb-&gt;bflags);

Normally, this is enough to ensure only one read happens, and all other
callers wait for it to finish before returning.  Unfortunately, there is
a racey interleaving:

    Thread A | Thread B | Thread C
    ---------+----------+---------
       (1)   |          |
             |    (1)   |
       (2)   |          |
       (3)   |          |
       (4)   |          |
             |    (2)   |
             |          |    (1)

When this happens, thread B kicks of an unnecessary read. Worse, thread
C will see UPTODATE set and return immediately, while the read from
thread B is still in progress.  This race could result in tree-checker
errors like this as the extent buffer is concurrently modified:

    BTRFS critical (device dm-0): corrupted node, root=256
    block=8550954455682405139 owner mismatch, have 11858205567642294356
    expect [256, 18446744073709551360]

Fix it by testing UPTODATE again after setting the READING bit, and if
it's been set, skip the unnecessary read.

[ minor update of changelog ]</description><pubDate>Fri, 17 May 2024 13:36:51 +0000</pubDate></item><item><title>CVE-2024-35799 | drm/amd/display: Prevent crash when disable stream</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35799</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/display: Prevent crash when disable stream

[Why]
Disabling stream encoder invokes a function that no longer exists.

[How]
Check if the function declaration is NULL in disable stream encoder.</description><pubDate>Fri, 17 May 2024 13:36:52 +0000</pubDate></item><item><title>CVE-2024-35800 | efi: fix panic in kdump kernel</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35800</link><description>In the Linux kernel, the following vulnerability has been resolved:

efi: fix panic in kdump kernel

Check if get_next_variable() is actually valid pointer before
calling it. In kdump kernel this method is set to NULL that causes
panic during the kexec-ed kernel boot.

Tested with QEMU and OVMF firmware.</description><pubDate>Fri, 17 May 2024 13:36:52 +0000</pubDate></item><item><title>CVE-2024-35801 | x86/fpu: Keep xfd_state in sync with MSR_IA32_XFD</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35801</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/fpu: Keep xfd_state in sync with MSR_IA32_XFD

Commit 672365477ae8 ("x86/fpu: Update XFD state where required") and
commit 8bf26758ca96 ("x86/fpu: Add XFD state to fpstate") introduced a
per CPU variable xfd_state to keep the MSR_IA32_XFD value cached, in
order to avoid unnecessary writes to the MSR.

On CPU hotplug MSR_IA32_XFD is reset to the init_fpstate.xfd, which
wipes out any stale state. But the per CPU cached xfd value is not
reset, which brings them out of sync.

As a consequence a subsequent xfd_update_state() might fail to update
the MSR which in turn can result in XRSTOR raising a #NM in kernel
space, which crashes the kernel.

To fix this, introduce xfd_set_state() to write xfd_state together
with MSR_IA32_XFD, and use it in all places that set MSR_IA32_XFD.</description><pubDate>Fri, 17 May 2024 13:36:52 +0000</pubDate></item><item><title>CVE-2024-35802 | x86/sev: Fix position dependent variable references in startup code</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35802</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/sev: Fix position dependent variable references in startup code

The early startup code executes from a 1:1 mapping of memory, which
differs from the mapping that the code was linked and/or relocated to
run at. The latter mapping is not active yet at this point, and so
symbol references that rely on it will fault.

Given that the core kernel is built without -fPIC, symbol references are
typically emitted as absolute, and so any such references occuring in
the early startup code will therefore crash the kernel.

While an attempt was made to work around this for the early SEV/SME
startup code, by forcing RIP-relative addressing for certain global
SEV/SME variables via inline assembly (see snp_cpuid_get_table() for
example), RIP-relative addressing must be pervasively enforced for
SEV/SME global variables when accessed prior to page table fixups.

__startup_64() already handles this issue for select non-SEV/SME global
variables using fixup_pointer(), which adjusts the pointer relative to a
`physaddr` argument. To avoid having to pass around this `physaddr`
argument across all functions needing to apply pointer fixups, introduce
a macro RIP_RELATIVE_REF() which generates a RIP-relative reference to
a given global variable. It is used where necessary to force
RIP-relative accesses to global variables.

For backporting purposes, this patch makes no attempt at cleaning up
other occurrences of this pattern, involving either inline asm or
fixup_pointer(). Those will be addressed later.

  [ bp: Call it "rip_rel_ref" everywhere like other code shortens
    "rIP-relative reference" and make the asm wrapper __always_inline. ]</description><pubDate>Fri, 17 May 2024 13:36:53 +0000</pubDate></item><item><title>CVE-2024-35803 | x86/efistub: Call mixed mode boot services on the firmware&amp;#x27;s stack</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35803</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/efistub: Call mixed mode boot services on the firmware's stack

Normally, the EFI stub calls into the EFI boot services using the stack
that was live when the stub was entered. According to the UEFI spec,
this stack needs to be at least 128k in size - this might seem large but
all asynchronous processing and event handling in EFI runs from the same
stack and so quite a lot of space may be used in practice.

In mixed mode, the situation is a bit different: the bootloader calls
the 32-bit EFI stub entry point, which calls the decompressor's 32-bit
entry point, where the boot stack is set up, using a fixed allocation
of 16k. This stack is still in use when the EFI stub is started in
64-bit mode, and so all calls back into the EFI firmware will be using
the decompressor's limited boot stack.

Due to the placement of the boot stack right after the boot heap, any
stack overruns have gone unnoticed. However, commit

  5c4feadb0011983b ("x86/decompressor: Move global symbol references to C code")

moved the definition of the boot heap into C code, and now the boot
stack is placed right at the base of BSS, where any overruns will
corrupt the end of the .data section.

While it would be possible to work around this by increasing the size of
the boot stack, doing so would affect all x86 systems, and mixed mode
systems are a tiny (and shrinking) fraction of the x86 installed base.

So instead, record the firmware stack pointer value when entering from
the 32-bit firmware, and switch to this stack every time a EFI boot
service call is made.</description><pubDate>Fri, 17 May 2024 13:36:53 +0000</pubDate></item><item><title>CVE-2024-35804 | KVM: x86: Mark target gfn of emulated atomic instruction as dirty</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35804</link><description>In the Linux kernel, the following vulnerability has been resolved:

KVM: x86: Mark target gfn of emulated atomic instruction as dirty

When emulating an atomic access on behalf of the guest, mark the target
gfn dirty if the CMPXCHG by KVM is attempted and doesn't fault.  This
fixes a bug where KVM effectively corrupts guest memory during live
migration by writing to guest memory without informing userspace that the
page is dirty.

Marking the page dirty got unintentionally dropped when KVM's emulated
CMPXCHG was converted to do a user access.  Before that, KVM explicitly
mapped the guest page into kernel memory, and marked the page dirty during
the unmap phase.

Mark the page dirty even if the CMPXCHG fails, as the old data is written
back on failure, i.e. the page is still written.  The value written is
guaranteed to be the same because the operation is atomic, but KVM's ABI
is that all writes are dirty logged regardless of the value written.  And
more importantly, that's what KVM did before the buggy commit.

Huge kudos to the folks on the Cc list (and many others), who did all the
actual work of triaging and debugging.

base-commit: 6769ea8da8a93ed4630f1ce64df6aafcaabfce64</description><pubDate>Fri, 17 May 2024 13:36:54 +0000</pubDate></item><item><title>CVE-2024-35805 | dm snapshot: fix lockup in dm_exception_table_exit</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35805</link><description>In the Linux kernel, the following vulnerability has been resolved:

dm snapshot: fix lockup in dm_exception_table_exit

There was reported lockup when we exit a snapshot with many exceptions.
Fix this by adding "cond_resched" to the loop that frees the exceptions.</description><pubDate>Fri, 17 May 2024 13:36:54 +0000</pubDate></item><item><title>CVE-2024-35806 | soc: fsl: qbman: Always disable interrupts when taking cgr_lock</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35806</link><description>In the Linux kernel, the following vulnerability has been resolved:

soc: fsl: qbman: Always disable interrupts when taking cgr_lock

smp_call_function_single disables IRQs when executing the callback. To
prevent deadlocks, we must disable IRQs when taking cgr_lock elsewhere.
This is already done by qman_update_cgr and qman_delete_cgr; fix the
other lockers.</description><pubDate>Fri, 17 May 2024 13:36:54 +0000</pubDate></item><item><title>CVE-2024-35807 | ext4: fix corruption during on-line resize</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35807</link><description>In the Linux kernel, the following vulnerability has been resolved:

ext4: fix corruption during on-line resize

We observed a corruption during on-line resize of a file system that is
larger than 16 TiB with 4k block size. With having more then 2^32 blocks
resize_inode is turned off by default by mke2fs. The issue can be
reproduced on a smaller file system for convenience by explicitly
turning off resize_inode. An on-line resize across an 8 GiB boundary (the
size of a meta block group in this setup) then leads to a corruption:

  dev=/dev/ # should be &gt;= 16 GiB
  mkdir -p /corruption
  /sbin/mke2fs -t ext4 -b 4096 -O ^resize_inode $dev $((2 * 2**21 - 2**15))
  mount -t ext4 $dev /corruption

  dd if=/dev/zero bs=4096 of=/corruption/test count=$((2*2**21 - 4*2**15))
  sha1sum /corruption/test
  # 79d2658b39dcfd77274e435b0934028adafaab11  /corruption/test

  /sbin/resize2fs $dev $((2*2**21))
  # drop page cache to force reload the block from disk
  echo 1 &gt; /proc/sys/vm/drop_caches

  sha1sum /corruption/test
  # 3c2abc63cbf1a94c9e6977e0fbd72cd832c4d5c3  /corruption/test

2^21 = 2^15*2^6 equals 8 GiB whereof 2^15 is the number of blocks per
block group and 2^6 are the number of block groups that make a meta
block group.

The last checksum might be different depending on how the file is laid
out across the physical blocks. The actual corruption occurs at physical
block 63*2^15 = 2064384 which would be the location of the backup of the
meta block group's block descriptor. During the on-line resize the file
system will be converted to meta_bg starting at s_first_meta_bg which is
2 in the example - meaning all block groups after 16 GiB. However, in
ext4_flex_group_add we might add block groups that are not part of the
first meta block group yet. In the reproducer we achieved this by
substracting the size of a whole block group from the point where the
meta block group would start. This must be considered when updating the
backup block group descriptors to follow the non-meta_bg layout. The fix
is to add a test whether the group to add is already part of the meta
block group or not.</description><pubDate>Fri, 17 May 2024 13:36:55 +0000</pubDate></item><item><title>CVE-2024-35808 | md/dm-raid: don&amp;#x27;t call md_reap_sync_thread() directly</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35808</link><description>In the Linux kernel, the following vulnerability has been resolved:

md/dm-raid: don't call md_reap_sync_thread() directly

Currently md_reap_sync_thread() is called from raid_message() directly
without holding 'reconfig_mutex', this is definitely unsafe because
md_reap_sync_thread() can change many fields that is protected by
'reconfig_mutex'.

However, hold 'reconfig_mutex' here is still problematic because this
will cause deadlock, for example, commit 130443d60b1b ("md: refactor
idle/frozen_sync_thread() to fix deadlock").

Fix this problem by using stop_sync_thread() to unregister sync_thread,
like md/raid did.</description><pubDate>Fri, 17 May 2024 13:36:55 +0000</pubDate></item><item><title>CVE-2024-35809 | PCI/PM: Drain runtime-idle callbacks before driver removal</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35809</link><description>In the Linux kernel, the following vulnerability has been resolved:

PCI/PM: Drain runtime-idle callbacks before driver removal

A race condition between the .runtime_idle() callback and the .remove()
callback in the rtsx_pcr PCI driver leads to a kernel crash due to an
unhandled page fault [1].

The problem is that rtsx_pci_runtime_idle() is not expected to be running
after pm_runtime_get_sync() has been called, but the latter doesn't really
guarantee that.  It only guarantees that the suspend and resume callbacks
will not be running when it returns.

However, if a .runtime_idle() callback is already running when
pm_runtime_get_sync() is called, the latter will notice that the runtime PM
status of the device is RPM_ACTIVE and it will return right away without
waiting for the former to complete.  In fact, it cannot wait for
.runtime_idle() to complete because it may be called from that callback (it
arguably does not make much sense to do that, but it is not strictly
prohibited).

Thus in general, whoever is providing a .runtime_idle() callback needs
to protect it from running in parallel with whatever code runs after
pm_runtime_get_sync().  [Note that .runtime_idle() will not start after
pm_runtime_get_sync() has returned, but it may continue running then if it
has started earlier.]

One way to address that race condition is to call pm_runtime_barrier()
after pm_runtime_get_sync() (not before it, because a nonzero value of the
runtime PM usage counter is necessary to prevent runtime PM callbacks from
being invoked) to wait for the .runtime_idle() callback to complete should
it be running at that point.  A suitable place for doing that is in
pci_device_remove() which calls pm_runtime_get_sync() before removing the
driver, so it may as well call pm_runtime_barrier() subsequently, which
will prevent the race in question from occurring, not just in the rtsx_pcr
driver, but in any PCI drivers providing .runtime_idle() callbacks.</description><pubDate>Fri, 17 May 2024 13:36:55 +0000</pubDate></item><item><title>CVE-2024-35810 | drm/vmwgfx: Fix the lifetime of the bo cursor memory</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35810</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/vmwgfx: Fix the lifetime of the bo cursor memory

The cleanup can be dispatched while the atomic update is still active,
which means that the memory acquired in the atomic update needs to
not be invalidated by the cleanup. The buffer objects in vmw_plane_state
instead of using the builtin map_and_cache were trying to handle
the lifetime of the mapped memory themselves, leading to crashes.

Use the map_and_cache instead of trying to manage the lifetime of the
buffer objects held by the vmw_plane_state.

Fixes kernel oops'es in IGT's kms_cursor_legacy forked-bo.</description><pubDate>Fri, 17 May 2024 13:36:56 +0000</pubDate></item><item><title>CVE-2024-35811 | wifi: brcmfmac: Fix use-after-free bug in brcmf_cfg80211_detach</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35811</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: brcmfmac: Fix use-after-free bug in brcmf_cfg80211_detach

This is the candidate patch of CVE-2023-47233 :
https://nvd.nist.gov/vuln/detail/CVE-2023-47233

In brcm80211 driver,it starts with the following invoking chain
to start init a timeout worker:

-&gt;brcmf_usb_probe
  -&gt;brcmf_usb_probe_cb
    -&gt;brcmf_attach
      -&gt;brcmf_bus_started
        -&gt;brcmf_cfg80211_attach
          -&gt;wl_init_priv
            -&gt;brcmf_init_escan
              -&gt;INIT_WORK(&amp;amp;cfg-&gt;escan_timeout_work,
		  brcmf_cfg80211_escan_timeout_worker);

If we disconnect the USB by hotplug, it will call
brcmf_usb_disconnect to make cleanup. The invoking chain is :

brcmf_usb_disconnect
  -&gt;brcmf_usb_disconnect_cb
    -&gt;brcmf_detach
      -&gt;brcmf_cfg80211_detach
        -&gt;kfree(cfg);

While the timeout woker may still be running. This will cause
a use-after-free bug on cfg in brcmf_cfg80211_escan_timeout_worker.

Fix it by deleting the timer and canceling the worker in
brcmf_cfg80211_detach.

[arend.vanspriel@broadcom.com: keep timer delete as is and cancel work just before free]</description><pubDate>Fri, 17 May 2024 13:36:56 +0000</pubDate></item><item><title>CVE-2024-35812 | usb: cdc-wdm: close race between read and workqueue</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35812</link><description>In the Linux kernel, the following vulnerability has been resolved:

usb: cdc-wdm: close race between read and workqueue

wdm_read() cannot race with itself. However, in
service_outstanding_interrupt() it can race with the
workqueue, which can be triggered by error handling.

Hence we need to make sure that the WDM_RESPONDING
flag is not just only set but tested.</description><pubDate>Fri, 17 May 2024 13:36:56 +0000</pubDate></item><item><title>CVE-2024-35813 | mmc: core: Avoid negative index with array access</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35813</link><description>In the Linux kernel, the following vulnerability has been resolved:

mmc: core: Avoid negative index with array access

Commit 4d0c8d0aef63 ("mmc: core: Use mrq.sbc in close-ended ffu") assigns
prev_idata = idatas[i - 1], but doesn't check that the iterator i is
greater than zero. Let's fix this by adding a check.</description><pubDate>Fri, 17 May 2024 13:36:57 +0000</pubDate></item><item><title>CVE-2024-35814 | swiotlb: Fix double-allocation of slots due to broken alignment handling</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35814</link><description>In the Linux kernel, the following vulnerability has been resolved:

swiotlb: Fix double-allocation of slots due to broken alignment handling

Commit bbb73a103fbb ("swiotlb: fix a braino in the alignment check fix"),
which was a fix for commit 0eee5ae10256 ("swiotlb: fix slot alignment
checks"), causes a functional regression with vsock in a virtual machine
using bouncing via a restricted DMA SWIOTLB pool.

When virtio allocates the virtqueues for the vsock device using
dma_alloc_coherent(), the SWIOTLB search can return page-unaligned
allocations if 'area-&gt;index' was left unaligned by a previous allocation
from the buffer:

 # Final address in brackets is the SWIOTLB address returned to the caller
 | virtio-pci 0000:00:07.0: orig_addr 0x0 alloc_size 0x2000, iotlb_align_mask 0x800 stride 0x2: got slot 1645-1649/7168 (0x98326800)
 | virtio-pci 0000:00:07.0: orig_addr 0x0 alloc_size 0x2000, iotlb_align_mask 0x800 stride 0x2: got slot 1649-1653/7168 (0x98328800)
 | virtio-pci 0000:00:07.0: orig_addr 0x0 alloc_size 0x2000, iotlb_align_mask 0x800 stride 0x2: got slot 1653-1657/7168 (0x9832a800)

This ends badly (typically buffer corruption and/or a hang) because
swiotlb_alloc() is expecting a page-aligned allocation and so blindly
returns a pointer to the 'struct page' corresponding to the allocation,
therefore double-allocating the first half (2KiB slot) of the 4KiB page.

Fix the problem by treating the allocation alignment separately to any
additional alignment requirements from the device, using the maximum
of the two as the stride to search the buffer slots and taking care
to ensure a minimum of page-alignment for buffers larger than a page.

This also resolves swiotlb allocation failures occuring due to the
inclusion of ~PAGE_MASK in 'iotlb_align_mask' for large allocations and
resulting in alignment requirements exceeding swiotlb_max_mapping_size().</description><pubDate>Fri, 17 May 2024 13:36:57 +0000</pubDate></item><item><title>CVE-2024-35815 | fs/aio: Check IOCB_AIO_RW before the struct aio_kiocb conversion</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35815</link><description>In the Linux kernel, the following vulnerability has been resolved:

fs/aio: Check IOCB_AIO_RW before the struct aio_kiocb conversion

The first kiocb_set_cancel_fn() argument may point at a struct kiocb
that is not embedded inside struct aio_kiocb. With the current code,
depending on the compiler, the req-&gt;ki_ctx read happens either before
the IOCB_AIO_RW test or after that test. Move the req-&gt;ki_ctx read such
that it is guaranteed that the IOCB_AIO_RW test happens first.</description><pubDate>Fri, 17 May 2024 13:36:57 +0000</pubDate></item><item><title>CVE-2024-35816 | firewire: ohci: prevent leak of left-over IRQ on unbind</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35816</link><description>In the Linux kernel, the following vulnerability has been resolved:

firewire: ohci: prevent leak of left-over IRQ on unbind

Commit 5a95f1ded28691e6 ("firewire: ohci: use devres for requested IRQ")
also removed the call to free_irq() in pci_remove(), leading to a
leftover irq of devm_request_irq() at pci_disable_msi() in pci_remove()
when unbinding the driver from the device

remove_proc_entry: removing non-empty directory 'irq/136', leaking at
least 'firewire_ohci'
Call Trace:
 ? remove_proc_entry+0x19c/0x1c0
 ? __warn+0x81/0x130
 ? remove_proc_entry+0x19c/0x1c0
 ? report_bug+0x171/0x1a0
 ? console_unlock+0x78/0x120
 ? handle_bug+0x3c/0x80
 ? exc_invalid_op+0x17/0x70
 ? asm_exc_invalid_op+0x1a/0x20
 ? remove_proc_entry+0x19c/0x1c0
 unregister_irq_proc+0xf4/0x120
 free_desc+0x3d/0xe0
 ? kfree+0x29f/0x2f0
 irq_free_descs+0x47/0x70
 msi_domain_free_locked.part.0+0x19d/0x1d0
 msi_domain_free_irqs_all_locked+0x81/0xc0
 pci_free_msi_irqs+0x12/0x40
 pci_disable_msi+0x4c/0x60
 pci_remove+0x9d/0xc0 [firewire_ohci
     01b483699bebf9cb07a3d69df0aa2bee71db1b26]
 pci_device_remove+0x37/0xa0
 device_release_driver_internal+0x19f/0x200
 unbind_store+0xa1/0xb0

remove irq with devm_free_irq() before pci_disable_msi()
also remove it in fail_msi: of pci_probe() as this would lead to
an identical leak</description><pubDate>Fri, 17 May 2024 13:36:58 +0000</pubDate></item><item><title>CVE-2024-35817 | drm/amdgpu: amdgpu_ttm_gart_bind set gtt bound flag</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35817</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amdgpu: amdgpu_ttm_gart_bind set gtt bound flag

Otherwise after the GTT bo is released, the GTT and gart space is freed
but amdgpu_ttm_backend_unbind will not clear the gart page table entry
and leave valid mapping entry pointing to the stale system page. Then
if GPU access the gart address mistakely, it will read undefined value
instead page fault, harder to debug and reproduce the real issue.</description><pubDate>Fri, 17 May 2024 13:36:58 +0000</pubDate></item><item><title>CVE-2024-35818 | LoongArch: Define the __io_aw() hook as mmiowb()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35818</link><description>In the Linux kernel, the following vulnerability has been resolved:

LoongArch: Define the __io_aw() hook as mmiowb()

Commit fb24ea52f78e0d595852e ("drivers: Remove explicit invocations of
mmiowb()") remove all mmiowb() in drivers, but it says:

"NOTE: mmiowb() has only ever guaranteed ordering in conjunction with
spin_unlock(). However, pairing each mmiowb() removal in this patch with
the corresponding call to spin_unlock() is not at all trivial, so there
is a small chance that this change may regress any drivers incorrectly
relying on mmiowb() to order MMIO writes between CPUs using lock-free
synchronisation."

The mmio in radeon_ring_commit() is protected by a mutex rather than a
spinlock, but in the mutex fastpath it behaves similar to spinlock. We
can add mmiowb() calls in the radeon driver but the maintainer says he
doesn't like such a workaround, and radeon is not the only example of
mutex protected mmio.

So we should extend the mmiowb tracking system from spinlock to mutex,
and maybe other locking primitives. This is not easy and error prone, so
we solve it in the architectural code, by simply defining the __io_aw()
hook as mmiowb(). And we no longer need to override queued_spin_unlock()
so use the generic definition.

Without this, we get such an error when run 'glxgears' on weak ordering
architectures such as LoongArch:

radeon 0000:04:00.0: ring 0 stalled for more than 10324msec
radeon 0000:04:00.0: ring 3 stalled for more than 10240msec
radeon 0000:04:00.0: GPU lockup (current fence id 0x000000000001f412 last fence id 0x000000000001f414 on ring 3)
radeon 0000:04:00.0: GPU lockup (current fence id 0x000000000000f940 last fence id 0x000000000000f941 on ring 0)
radeon 0000:04:00.0: scheduling IB failed (-35).
[drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn't update BO_VA (-35)
radeon 0000:04:00.0: scheduling IB failed (-35).
[drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn't update BO_VA (-35)
radeon 0000:04:00.0: scheduling IB failed (-35).
[drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn't update BO_VA (-35)
radeon 0000:04:00.0: scheduling IB failed (-35).
[drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn't update BO_VA (-35)
radeon 0000:04:00.0: scheduling IB failed (-35).
[drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn't update BO_VA (-35)
radeon 0000:04:00.0: scheduling IB failed (-35).
[drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn't update BO_VA (-35)
radeon 0000:04:00.0: scheduling IB failed (-35).
[drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn't update BO_VA (-35)</description><pubDate>Fri, 17 May 2024 13:36:58 +0000</pubDate></item><item><title>CVE-2024-35819 | soc: fsl: qbman: Use raw spinlock for cgr_lock</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35819</link><description>In the Linux kernel, the following vulnerability has been resolved:

soc: fsl: qbman: Use raw spinlock for cgr_lock

smp_call_function always runs its callback in hard IRQ context, even on
PREEMPT_RT, where spinlocks can sleep. So we need to use a raw spinlock
for cgr_lock to ensure we aren't waiting on a sleeping task.

Although this bug has existed for a while, it was not apparent until
commit ef2a8d5478b9 ("net: dpaa: Adjust queue depth on rate change")
which invokes smp_call_function_single via qman_update_cgr_safe every
time a link goes up or down.</description><pubDate>Fri, 17 May 2024 13:36:59 +0000</pubDate></item><item><title>CVE-2024-35820 | io_uring: fix io_queue_proc modifying req-&amp;gt;flags</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35820</link><description>In the Linux kernel, the following vulnerability has been resolved:

io_uring: fix io_queue_proc modifying req-&gt;flags

With multiple poll entries __io_queue_proc() might be running in
parallel with poll handlers and possibly task_work, we should not be
carelessly modifying req-&gt;flags there. io_poll_double_prepare() handles
a similar case with locking but it's much easier to move it into
__io_arm_poll_handler().</description><pubDate>Fri, 17 May 2024 13:36:59 +0000</pubDate></item><item><title>CVE-2024-35821 | ubifs: Set page uptodate in the correct place</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35821</link><description>In the Linux kernel, the following vulnerability has been resolved:

ubifs: Set page uptodate in the correct place

Page cache reads are lockless, so setting the freshly allocated page
uptodate before we've overwritten it with the data it's supposed to have
in it will allow a simultaneous reader to see old data.  Move the call
to SetPageUptodate into ubifs_write_end(), which is after we copied the
new data into the page.</description><pubDate>Fri, 17 May 2024 13:36:59 +0000</pubDate></item><item><title>CVE-2024-35822 | usb: udc: remove warning when queue disabled ep</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35822</link><description>In the Linux kernel, the following vulnerability has been resolved:

usb: udc: remove warning when queue disabled ep

It is possible trigger below warning message from mass storage function,

WARNING: CPU: 6 PID: 3839 at drivers/usb/gadget/udc/core.c:294 usb_ep_queue+0x7c/0x104
pc : usb_ep_queue+0x7c/0x104
lr : fsg_main_thread+0x494/0x1b3c

Root cause is mass storage function try to queue request from main thread,
but other thread may already disable ep when function disable.

As there is no function failure in the driver, in order to avoid effort
to fix warning, change WARN_ON_ONCE() in usb_ep_queue() to pr_debug().</description><pubDate>Fri, 17 May 2024 13:37:00 +0000</pubDate></item><item><title>CVE-2024-35823 | vt: fix unicode buffer corruption when deleting characters</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35823</link><description>In the Linux kernel, the following vulnerability has been resolved:

vt: fix unicode buffer corruption when deleting characters

This is the same issue that was fixed for the VGA text buffer in commit
39cdb68c64d8 ("vt: fix memory overlapping when deleting chars in the
buffer"). The cure is also the same i.e. replace memcpy() with memmove()
due to the overlaping buffers.</description><pubDate>Fri, 17 May 2024 13:37:00 +0000</pubDate></item><item><title>CVE-2024-35824 | misc: lis3lv02d_i2c: Fix regulators getting en-/dis-abled twice on suspend/resume</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35824</link><description>In the Linux kernel, the following vulnerability has been resolved:

misc: lis3lv02d_i2c: Fix regulators getting en-/dis-abled twice on suspend/resume

When not configured for wakeup lis3lv02d_i2c_suspend() will call
lis3lv02d_poweroff() even if the device has already been turned off
by the runtime-suspend handler and if configured for wakeup and
the device is runtime-suspended at this point then it is not turned
back on to serve as a wakeup source.

Before commit b1b9f7a49440 ("misc: lis3lv02d_i2c: Add missing setting
of the reg_ctrl callback"), lis3lv02d_poweroff() failed to disable
the regulators which as a side effect made calling poweroff() twice ok.

Now that poweroff() correctly disables the regulators, doing this twice
triggers a WARN() in the regulator core:

unbalanced disables for regulator-dummy
WARNING: CPU: 1 PID: 92 at drivers/regulator/core.c:2999 _regulator_disable
...

Fix lis3lv02d_i2c_suspend() to not call poweroff() a second time if
already runtime-suspended and add a poweron() call when necessary to
make wakeup work.

lis3lv02d_i2c_resume() has similar issues, with an added weirness that
it always powers on the device if it is runtime suspended, after which
the first runtime-resume will call poweron() again, causing the enabled
count for the regulator to increase by 1 every suspend/resume. These
unbalanced regulator_enable() calls cause the regulator to never
be turned off and trigger the following WARN() on driver unbind:

WARNING: CPU: 1 PID: 1724 at drivers/regulator/core.c:2396 _regulator_put

Fix this by making lis3lv02d_i2c_resume() mirror the new suspend().</description><pubDate>Fri, 17 May 2024 13:37:00 +0000</pubDate></item><item><title>CVE-2024-35825 | usb: gadget: ncm: Fix handling of zero block length packets</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35825</link><description>In the Linux kernel, the following vulnerability has been resolved:

usb: gadget: ncm: Fix handling of zero block length packets

While connecting to a Linux host with CDC_NCM_NTB_DEF_SIZE_TX
set to 65536, it has been observed that we receive short packets,
which come at interval of 5-10 seconds sometimes and have block
length zero but still contain 1-2 valid datagrams present.

According to the NCM spec:

"If wBlockLength = 0x0000, the block is terminated by a
short packet. In this case, the USB transfer must still
be shorter than dwNtbInMaxSize or dwNtbOutMaxSize. If
exactly dwNtbInMaxSize or dwNtbOutMaxSize bytes are sent,
and the size is a multiple of wMaxPacketSize for the
given pipe, then no ZLP shall be sent.

wBlockLength= 0x0000 must be used with extreme care, because
of the possibility that the host and device may get out of
sync, and because of test issues.

wBlockLength = 0x0000 allows the sender to reduce latency by
starting to send a very large NTB, and then shortening it when
the sender discovers that there’s not sufficient data to justify
sending a large NTB"

However, there is a potential issue with the current implementation,
as it checks for the occurrence of multiple NTBs in a single
giveback by verifying if the leftover bytes to be processed is zero
or not. If the block length reads zero, we would process the same
NTB infintely because the leftover bytes is never zero and it leads
to a crash. Fix this by bailing out if block length reads zero.</description><pubDate>Fri, 17 May 2024 13:37:01 +0000</pubDate></item><item><title>CVE-2024-35826 | block: Fix page refcounts for unaligned buffers in __bio_release_pages()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35826</link><description>In the Linux kernel, the following vulnerability has been resolved:

block: Fix page refcounts for unaligned buffers in __bio_release_pages()

Fix an incorrect number of pages being released for buffers that do not
start at the beginning of a page.</description><pubDate>Fri, 17 May 2024 13:37:01 +0000</pubDate></item><item><title>CVE-2024-5042 | Submariner-operator: rbac permissions can allow for the spread of node compromises</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5042</link><description>A flaw was found in the Submariner project. Due to unnecessary role-based access control permissions, a privileged attacker can run a malicious container on a node that may allow them to steal service account tokens and further compromise other nodes and potentially the entire cluster.</description><pubDate>Fri, 17 May 2024 13:26:12 +0000</pubDate></item><item><title>CVE-2024-5046 | SourceCodester Online Examination System registeracc.php sql injection</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5046</link><description>A vulnerability was found in SourceCodester Online Examination System 1.0. It has been rated as critical. This issue affects some unknown processing of the file registeracc.php. The manipulation of the argument email leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-264743.</description><pubDate>Fri, 17 May 2024 13:12:18 +0000</pubDate></item><item><title>CVE-2024-35784 | btrfs: fix deadlock with fiemap and extent locking</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35784</link><description>In the Linux kernel, the following vulnerability has been resolved:

btrfs: fix deadlock with fiemap and extent locking

While working on the patchset to remove extent locking I got a lockdep
splat with fiemap and pagefaulting with my new extent lock replacement
lock.

This deadlock exists with our normal code, we just don't have lockdep
annotations with the extent locking so we've never noticed it.

Since we're copying the fiemap extent to user space on every iteration
we have the chance of pagefaulting.  Because we hold the extent lock for
the entire range we could mkwrite into a range in the file that we have
mmap'ed.  This would deadlock with the following stack trace

[&lt;0&gt;] lock_extent+0x28d/0x2f0
[&lt;0&gt;] btrfs_page_mkwrite+0x273/0x8a0
[&lt;0&gt;] do_page_mkwrite+0x50/0xb0
[&lt;0&gt;] do_fault+0xc1/0x7b0
[&lt;0&gt;] __handle_mm_fault+0x2fa/0x460
[&lt;0&gt;] handle_mm_fault+0xa4/0x330
[&lt;0&gt;] do_user_addr_fault+0x1f4/0x800
[&lt;0&gt;] exc_page_fault+0x7c/0x1e0
[&lt;0&gt;] asm_exc_page_fault+0x26/0x30
[&lt;0&gt;] rep_movs_alternative+0x33/0x70
[&lt;0&gt;] _copy_to_user+0x49/0x70
[&lt;0&gt;] fiemap_fill_next_extent+0xc8/0x120
[&lt;0&gt;] emit_fiemap_extent+0x4d/0xa0
[&lt;0&gt;] extent_fiemap+0x7f8/0xad0
[&lt;0&gt;] btrfs_fiemap+0x49/0x80
[&lt;0&gt;] __x64_sys_ioctl+0x3e1/0xb50
[&lt;0&gt;] do_syscall_64+0x94/0x1a0
[&lt;0&gt;] entry_SYSCALL_64_after_hwframe+0x6e/0x76

I wrote an fstest to reproduce this deadlock without my replacement lock
and verified that the deadlock exists with our existing locking.

To fix this simply don't take the extent lock for the entire duration of
the fiemap.  This is safe in general because we keep track of where we
are when we're searching the tree, so if an ordered extent updates in
the middle of our fiemap call we'll still emit the correct extents
because we know what offset we were on before.

The only place we maintain the lock is searching delalloc.  Since the
delalloc stuff can change during writeback we want to lock the extent
range so we have a consistent view of delalloc at the time we're
checking to see if we need to set the delalloc flag.

With this patch applied we no longer deadlock with my testcase.</description><pubDate>Fri, 17 May 2024 12:33:56 +0000</pubDate></item><item><title>CVE-2024-35785 | tee: optee: Fix kernel panic caused by incorrect error handling</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35785</link><description>In the Linux kernel, the following vulnerability has been resolved:

tee: optee: Fix kernel panic caused by incorrect error handling

The error path while failing to register devices on the TEE bus has a
bug leading to kernel panic as follows:

[   15.398930] Unable to handle kernel paging request at virtual address ffff07ed00626d7c
[   15.406913] Mem abort info:
[   15.409722]   ESR = 0x0000000096000005
[   15.413490]   EC = 0x25: DABT (current EL), IL = 32 bits
[   15.418814]   SET = 0, FnV = 0
[   15.421878]   EA = 0, S1PTW = 0
[   15.425031]   FSC = 0x05: level 1 translation fault
[   15.429922] Data abort info:
[   15.432813]   ISV = 0, ISS = 0x00000005, ISS2 = 0x00000000
[   15.438310]   CM = 0, WnR = 0, TnD = 0, TagAccess = 0
[   15.443372]   GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0
[   15.448697] swapper pgtable: 4k pages, 48-bit VAs, pgdp=00000000d9e3e000
[   15.455413] [ffff07ed00626d7c] pgd=1800000bffdf9003, p4d=1800000bffdf9003, pud=0000000000000000
[   15.464146] Internal error: Oops: 0000000096000005 [#1] PREEMPT SMP

Commit 7269cba53d90 ("tee: optee: Fix supplicant based device enumeration")
lead to the introduction of this bug. So fix it appropriately.</description><pubDate>Fri, 17 May 2024 12:33:56 +0000</pubDate></item><item><title>CVE-2024-35786 | drm/nouveau: fix stale locked mutex in nouveau_gem_ioctl_pushbuf</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35786</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/nouveau: fix stale locked mutex in nouveau_gem_ioctl_pushbuf

If VM_BIND is enabled on the client the legacy submission ioctl can't be
used, however if a client tries to do so regardless it will return an
error. In this case the clients mutex remained unlocked leading to a
deadlock inside nouveau_drm_postclose or any other nouveau ioctl call.</description><pubDate>Fri, 17 May 2024 12:33:57 +0000</pubDate></item><item><title>CVE-2024-35787 | md/md-bitmap: fix incorrect usage for sb_index</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35787</link><description>In the Linux kernel, the following vulnerability has been resolved:

md/md-bitmap: fix incorrect usage for sb_index

Commit d7038f951828 ("md-bitmap: don't use -&gt;index for pages backing the
bitmap file") removed page-&gt;index from bitmap code, but left wrong code
logic for clustered-md. current code never set slot offset for cluster
nodes, will sometimes cause crash in clustered env.

Call trace (partly):
 md_bitmap_file_set_bit+0x110/0x1d8 [md_mod]
 md_bitmap_startwrite+0x13c/0x240 [md_mod]
 raid1_make_request+0x6b0/0x1c08 [raid1]
 md_handle_request+0x1dc/0x368 [md_mod]
 md_submit_bio+0x80/0xf8 [md_mod]
 __submit_bio+0x178/0x300
 submit_bio_noacct_nocheck+0x11c/0x338
 submit_bio_noacct+0x134/0x614
 submit_bio+0x28/0xdc
 submit_bh_wbc+0x130/0x1cc
 submit_bh+0x1c/0x28</description><pubDate>Fri, 17 May 2024 12:33:57 +0000</pubDate></item><item><title>CVE-2024-35788 | drm/amd/display: Fix bounds check for dcn35 DcfClocks</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35788</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/amd/display: Fix bounds check for dcn35 DcfClocks

[Why]
NumFclkLevelsEnabled is used for DcfClocks bounds check
instead of designated NumDcfClkLevelsEnabled.
That can cause array index out-of-bounds access.

[How]
Use designated variable for dcn35 DcfClocks bounds check.</description><pubDate>Fri, 17 May 2024 12:33:57 +0000</pubDate></item><item><title>CVE-2024-35789 | wifi: mac80211: check/clear fast rx for non-4addr sta VLAN changes</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35789</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: mac80211: check/clear fast rx for non-4addr sta VLAN changes

When moving a station out of a VLAN and deleting the VLAN afterwards, the
fast_rx entry still holds a pointer to the VLAN's netdev, which can cause
use-after-free bugs. Fix this by immediately calling ieee80211_check_fast_rx
after the VLAN change.</description><pubDate>Fri, 17 May 2024 12:33:58 +0000</pubDate></item><item><title>CVE-2024-35790 | usb: typec: altmodes/displayport: create sysfs nodes as driver&amp;#x27;s default device attribute group</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35790</link><description>In the Linux kernel, the following vulnerability has been resolved:

usb: typec: altmodes/displayport: create sysfs nodes as driver's default device attribute group

The DisplayPort driver's sysfs nodes may be present to the userspace before
typec_altmode_set_drvdata() completes in dp_altmode_probe. This means that
a sysfs read can trigger a NULL pointer error by deferencing dp-&gt;hpd in
hpd_show or dp-&gt;lock in pin_assignment_show, as dev_get_drvdata() returns
NULL in those cases.

Remove manual sysfs node creation in favor of adding attribute group as
default for devices bound to the driver. The ATTRIBUTE_GROUPS() macro is
not used here otherwise the path to the sysfs nodes is no longer compliant
with the ABI.</description><pubDate>Fri, 17 May 2024 12:33:58 +0000</pubDate></item><item><title>CVE-2024-35791 | KVM: SVM: Flush pages under kvm-&amp;gt;lock to fix UAF in svm_register_enc_region()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35791</link><description>In the Linux kernel, the following vulnerability has been resolved:

KVM: SVM: Flush pages under kvm-&gt;lock to fix UAF in svm_register_enc_region()

Do the cache flush of converted pages in svm_register_enc_region() before
dropping kvm-&gt;lock to fix use-after-free issues where region and/or its
array of pages could be freed by a different task, e.g. if userspace has
__unregister_enc_region_locked() already queued up for the region.

Note, the "obvious" alternative of using local variables doesn't fully
resolve the bug, as region-&gt;pages is also dynamically allocated.  I.e. the
region structure itself would be fine, but region-&gt;pages could be freed.

Flushing multiple pages under kvm-&gt;lock is unfortunate, but the entire
flow is a rare slow path, and the manual flush is only needed on CPUs that
lack coherency for encrypted memory.</description><pubDate>Fri, 17 May 2024 12:33:58 +0000</pubDate></item><item><title>CVE-2024-35792 | crypto: rk3288 - Fix use after free in unprepare</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35792</link><description>In the Linux kernel, the following vulnerability has been resolved:

crypto: rk3288 - Fix use after free in unprepare

The unprepare call must be carried out before the finalize call
as the latter can free the request.</description><pubDate>Fri, 17 May 2024 12:33:59 +0000</pubDate></item><item><title>CVE-2024-35793 | debugfs: fix wait/cancellation handling during remove</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35793</link><description>In the Linux kernel, the following vulnerability has been resolved:

debugfs: fix wait/cancellation handling during remove

Ben Greear further reports deadlocks during concurrent debugfs
remove while files are being accessed, even though the code in
question now uses debugfs cancellations. Turns out that despite
all the review on the locking, we missed completely that the
logic is wrong: if the refcount hits zero we can finish (and
need not wait for the completion), but if it doesn't we have
to trigger all the cancellations. As written, we can _never_
get into the loop triggering the cancellations. Fix this, and
explain it better while at it.</description><pubDate>Fri, 17 May 2024 12:33:59 +0000</pubDate></item><item><title>CVE-2024-35794 | dm-raid: really frozen sync_thread during suspend</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35794</link><description>In the Linux kernel, the following vulnerability has been resolved:

dm-raid: really frozen sync_thread during suspend

1) commit f52f5c71f3d4 ("md: fix stopping sync thread") remove
   MD_RECOVERY_FROZEN from __md_stop_writes() and doesn't realize that
   dm-raid relies on __md_stop_writes() to frozen sync_thread
   indirectly. Fix this problem by adding MD_RECOVERY_FROZEN in
   md_stop_writes(), and since stop_sync_thread() is only used for
   dm-raid in this case, also move stop_sync_thread() to
   md_stop_writes().
2) The flag MD_RECOVERY_FROZEN doesn't mean that sync thread is frozen,
   it only prevent new sync_thread to start, and it can't stop the
   running sync thread; In order to frozen sync_thread, after seting the
   flag, stop_sync_thread() should be used.
3) The flag MD_RECOVERY_FROZEN doesn't mean that writes are stopped, use
   it as condition for md_stop_writes() in raid_postsuspend() doesn't
   look correct. Consider that reentrant stop_sync_thread() do nothing,
   always call md_stop_writes() in raid_postsuspend().
4) raid_message can set/clear the flag MD_RECOVERY_FROZEN at anytime,
   and if MD_RECOVERY_FROZEN is cleared while the array is suspended,
   new sync_thread can start unexpected. Fix this by disallow
   raid_message() to change sync_thread status during suspend.

Note that after commit f52f5c71f3d4 ("md: fix stopping sync thread"), the
test shell/lvconvert-raid-reshape.sh start to hang in stop_sync_thread(),
and with previous fixes, the test won't hang there anymore, however, the
test will still fail and complain that ext4 is corrupted. And with this
patch, the test won't hang due to stop_sync_thread() or fail due to ext4
is corrupted anymore. However, there is still a deadlock related to
dm-raid456 that will be fixed in following patches.</description><pubDate>Fri, 17 May 2024 12:34:00 +0000</pubDate></item><item><title>CVE-2024-5045 | SourceCodester Online Birth Certificate Management System admin file access</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5045</link><description>A vulnerability was found in SourceCodester Online Birth Certificate Management System 1.0. It has been declared as problematic. This vulnerability affects unknown code of the file /admin. The manipulation leads to files or directories accessible. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-264742 is the identifier assigned to this vulnerability.</description><pubDate>Fri, 17 May 2024 12:34:00 +0000</pubDate></item><item><title>CVE-2023-52659 | x86/mm: Ensure input to pfn_to_kaddr() is treated as a 64-bit type</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52659</link><description>In the Linux kernel, the following vulnerability has been resolved:

x86/mm: Ensure input to pfn_to_kaddr() is treated as a 64-bit type

On 64-bit platforms, the pfn_to_kaddr() macro requires that the input
value is 64 bits in order to ensure that valid address bits don't get
lost when shifting that input by PAGE_SHIFT to calculate the physical
address to provide a virtual address for.

One such example is in pvalidate_pages() (used by SEV-SNP guests), where
the GFN in the struct used for page-state change requests is a 40-bit
bit-field, so attempts to pass this GFN field directly into
pfn_to_kaddr() ends up causing guest crashes when dealing with addresses
above the 1TB range due to the above.

Fix this issue with SEV-SNP guests, as well as any similar cases that
might cause issues in current/future code, by using an inline function,
instead of a macro, so that the input is implicitly cast to the
expected 64-bit input type prior to performing the shift operation.

While it might be argued that the issue is on the caller side, other
archs/macros have taken similar approaches to deal with instances like
this, such as ARM explicitly casting the input to phys_addr_t:

  e48866647b48 ("ARM: 8396/1: use phys_addr_t in pfn_to_kaddr()")

A C inline function is even better though.

[ mingo: Refined the changelog some more &amp; added __always_inline. ]</description><pubDate>Fri, 17 May 2024 12:34:01 +0000</pubDate></item><item><title>CVE-2023-52660 | media: rkisp1: Fix IRQ handling due to shared interrupts</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52660</link><description>In the Linux kernel, the following vulnerability has been resolved:

media: rkisp1: Fix IRQ handling due to shared interrupts

The driver requests the interrupts as IRQF_SHARED, so the interrupt
handlers can be called at any time. If such a call happens while the ISP
is powered down, the SoC will hang as the driver tries to access the
ISP registers.

This can be reproduced even without the platform sharing the IRQ line:
Enable CONFIG_DEBUG_SHIRQ and unload the driver, and the board will
hang.

Fix this by adding a new field, 'irqs_enabled', which is used to bail
out from the interrupt handler when the ISP is not operational.</description><pubDate>Fri, 17 May 2024 12:34:01 +0000</pubDate></item><item><title>CVE-2024-27432 | net: ethernet: mtk_eth_soc: fix PPE hanging issue</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27432</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: ethernet: mtk_eth_soc: fix PPE hanging issue

A patch to resolve an issue was found in MediaTek's GPL-licensed SDK:
In the mtk_ppe_stop() function, the PPE scan mode is not disabled before
disabling the PPE. This can potentially lead to a hang during the process
of disabling the PPE.

Without this patch, the PPE may experience a hang during the reboot test.</description><pubDate>Fri, 17 May 2024 12:34:01 +0000</pubDate></item><item><title>CVE-2024-27433 | clk: mediatek: mt7622-apmixedsys: Fix an error handling path in clk_mt8135_apmixed_probe()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27433</link><description>In the Linux kernel, the following vulnerability has been resolved:

clk: mediatek: mt7622-apmixedsys: Fix an error handling path in clk_mt8135_apmixed_probe()

'clk_data' is allocated with mtk_devm_alloc_clk_data(). So calling
mtk_free_clk_data() explicitly in the remove function would lead to a
double-free.

Remove the redundant call.</description><pubDate>Fri, 17 May 2024 12:34:02 +0000</pubDate></item><item><title>CVE-2024-27434 | wifi: iwlwifi: mvm: don&amp;#x27;t set the MFP flag for the GTK</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27434</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: iwlwifi: mvm: don't set the MFP flag for the GTK

The firmware doesn't need the MFP flag for the GTK, it can even make the
firmware crash. in case the AP is configured with: group cipher TKIP and
MFPC. We would send the GTK with cipher = TKIP and MFP which is of course
not possible.</description><pubDate>Fri, 17 May 2024 12:34:02 +0000</pubDate></item><item><title>CVE-2024-27435 | nvme: fix reconnection fail due to reserved tag allocation</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27435</link><description>In the Linux kernel, the following vulnerability has been resolved:

nvme: fix reconnection fail due to reserved tag allocation

We found a issue on production environment while using NVMe over RDMA,
admin_q reconnect failed forever while remote target and network is ok.
After dig into it, we found it may caused by a ABBA deadlock due to tag
allocation. In my case, the tag was hold by a keep alive request
waiting inside admin_q, as we quiesced admin_q while reset ctrl, so the
request maked as idle and will not process before reset success. As
fabric_q shares tagset with admin_q, while reconnect remote target, we
need a tag for connect command, but the only one reserved tag was held
by keep alive command which waiting inside admin_q. As a result, we
failed to reconnect admin_q forever. In order to fix this issue, I
think we should keep two reserved tags for admin queue.</description><pubDate>Fri, 17 May 2024 12:34:02 +0000</pubDate></item><item><title>CVE-2024-27436 | ALSA: usb-audio: Stop parsing channels bits when all channels are found.</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27436</link><description>In the Linux kernel, the following vulnerability has been resolved:

ALSA: usb-audio: Stop parsing channels bits when all channels are found.

If a usb audio device sets more bits than the amount of channels
it could write outside of the map array.</description><pubDate>Fri, 17 May 2024 12:34:03 +0000</pubDate></item><item><title>CVE-2023-52658 | Revert &amp;quot;net/mlx5: Block entering switchdev mode with ns inconsistency&amp;quot;</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52658</link><description>In the Linux kernel, the following vulnerability has been resolved:

Revert "net/mlx5: Block entering switchdev mode with ns inconsistency"

This reverts commit 662404b24a4c4d839839ed25e3097571f5938b9b.
The revert is required due to the suspicion it is not good for anything
and cause crash.</description><pubDate>Fri, 17 May 2024 12:34:03 +0000</pubDate></item><item><title>CVE-2024-27419 | netrom: Fix data-races around sysctl_net_busy_read</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27419</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix data-races around sysctl_net_busy_read

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:04 +0000</pubDate></item><item><title>CVE-2024-27420 | netrom: Fix a data-race around sysctl_netrom_link_fails_count</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27420</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_link_fails_count

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:04 +0000</pubDate></item><item><title>CVE-2024-27421 | netrom: Fix a data-race around sysctl_netrom_routing_control</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27421</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_routing_control

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:05 +0000</pubDate></item><item><title>CVE-2024-27422 | netrom: Fix a data-race around sysctl_netrom_transport_no_activity_timeout</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27422</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_transport_no_activity_timeout

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:05 +0000</pubDate></item><item><title>CVE-2024-27423 | netrom: Fix a data-race around sysctl_netrom_transport_requested_window_size</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27423</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_transport_requested_window_size

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:05 +0000</pubDate></item><item><title>CVE-2024-27424 | netrom: Fix a data-race around sysctl_netrom_transport_busy_delay</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27424</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_transport_busy_delay

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:06 +0000</pubDate></item><item><title>CVE-2024-27425 | netrom: Fix a data-race around sysctl_netrom_transport_acknowledge_delay</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27425</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_transport_acknowledge_delay

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:06 +0000</pubDate></item><item><title>CVE-2024-27426 | netrom: Fix a data-race around sysctl_netrom_transport_maximum_tries</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27426</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_transport_maximum_tries

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:06 +0000</pubDate></item><item><title>CVE-2024-27427 | netrom: Fix a data-race around sysctl_netrom_transport_timeout</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27427</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_transport_timeout

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:07 +0000</pubDate></item><item><title>CVE-2024-27428 | netrom: Fix data-races around sysctl_netrom_network_ttl_initialiser</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27428</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix data-races around sysctl_netrom_network_ttl_initialiser

We need to protect the reader reading the sysctl value because the
value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:07 +0000</pubDate></item><item><title>CVE-2024-27429 | netrom: Fix a data-race around sysctl_netrom_obsolescence_count_initialiser</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27429</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_obsolescence_count_initialiser

We need to protect the reader reading the sysctl value
because the value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:07 +0000</pubDate></item><item><title>CVE-2024-27430 | netrom: Fix a data-race around sysctl_netrom_default_path_quality</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27430</link><description>In the Linux kernel, the following vulnerability has been resolved:

netrom: Fix a data-race around sysctl_netrom_default_path_quality

We need to protect the reader reading sysctl_netrom_default_path_quality
because the value can be changed concurrently.</description><pubDate>Fri, 17 May 2024 12:34:08 +0000</pubDate></item><item><title>CVE-2024-27431 | cpumap: Zero-initialise xdp_rxq_info struct before running XDP program</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27431</link><description>In the Linux kernel, the following vulnerability has been resolved:

cpumap: Zero-initialise xdp_rxq_info struct before running XDP program

When running an XDP program that is attached to a cpumap entry, we don't
initialise the xdp_rxq_info data structure being used in the xdp_buff
that backs the XDP program invocation. Tobias noticed that this leads to
random values being returned as the xdp_md-&gt;rx_queue_index value for XDP
programs running in a cpumap.

This means we're basically returning the contents of the uninitialised
memory, which is bad. Fix this by zero-initialising the rxq data
structure before running the XDP program.</description><pubDate>Fri, 17 May 2024 12:34:08 +0000</pubDate></item><item><title>CVE-2024-5055 | Vulnerability of uncontrolled resource consumption in XAMPP</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5055</link><description>Uncontrolled resource consumption vulnerability in XAMPP Windows, versions 7.3.2 and earlier. This vulnerability exists when XAMPP attempts to process many incomplete HTTP requests, resulting in resource consumption and system crashes.</description><pubDate>Fri, 17 May 2024 12:34:08 +0000</pubDate></item><item><title>CVE-2023-52657 | Revert &amp;quot;drm/amd/pm: resolve reboot exception for si oland&amp;quot;</title><link>https://www.cve.org/CVERecord?id=CVE-2023-52657</link><description>In the Linux kernel, the following vulnerability has been resolved:

Revert "drm/amd/pm: resolve reboot exception for si oland"

This reverts commit e490d60a2f76bff636c68ce4fe34c1b6c34bbd86.

This causes hangs on SI when DC is enabled and errors on driver
reboot and power off cycles.</description><pubDate>Fri, 17 May 2024 11:58:46 +0000</pubDate></item><item><title>CVE-2024-27408 | dmaengine: dw-edma: eDMA: Add sync read before starting the DMA transfer in remote setup</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27408</link><description>In the Linux kernel, the following vulnerability has been resolved:

dmaengine: dw-edma: eDMA: Add sync read before starting the DMA transfer in remote setup

The Linked list element and pointer are not stored in the same memory as
the eDMA controller register. If the doorbell register is toggled before
the full write of the linked list a race condition error will occur.
In remote setup we can only use a readl to the memory to assure the full
write has occurred.</description><pubDate>Fri, 17 May 2024 11:58:46 +0000</pubDate></item><item><title>CVE-2024-27409 | dmaengine: dw-edma: HDMA: Add sync read before starting the DMA transfer in remote setup</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27409</link><description>In the Linux kernel, the following vulnerability has been resolved:

dmaengine: dw-edma: HDMA: Add sync read before starting the DMA transfer in remote setup

The Linked list element and pointer are not stored in the same memory as
the HDMA controller register. If the doorbell register is toggled before
the full write of the linked list a race condition error will occur.
In remote setup we can only use a readl to the memory to assure the full
write has occurred.</description><pubDate>Fri, 17 May 2024 11:58:46 +0000</pubDate></item><item><title>CVE-2024-27410 | wifi: nl80211: reject iftype change with mesh ID change</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27410</link><description>In the Linux kernel, the following vulnerability has been resolved:

wifi: nl80211: reject iftype change with mesh ID change

It's currently possible to change the mesh ID when the
interface isn't yet in mesh mode, at the same time as
changing it into mesh mode. This leads to an overwrite
of data in the wdev-&gt;u union for the interface type it
currently has, causing cfg80211_change_iface() to do
wrong things when switching.

We could probably allow setting an interface to mesh
while setting the mesh ID at the same time by doing a
different order of operations here, but realistically
there's no userspace that's going to do this, so just
disallow changes in iftype when setting mesh ID.</description><pubDate>Fri, 17 May 2024 11:58:47 +0000</pubDate></item><item><title>CVE-2024-27411 | drm/nouveau: keep DMA buffers required for suspend/resume</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27411</link><description>In the Linux kernel, the following vulnerability has been resolved:

drm/nouveau: keep DMA buffers required for suspend/resume

Nouveau deallocates a few buffers post GPU init which are required for GPU suspend/resume to function correctly.
This is likely not as big an issue on systems where the NVGPU is the only GPU, but on multi-GPU set ups it leads to a regression where the kernel module errors and results in a system-wide rendering freeze.

This commit addresses that regression by moving the two buffers required for suspend and resume to be deallocated at driver unload instead of post init.</description><pubDate>Fri, 17 May 2024 11:58:47 +0000</pubDate></item><item><title>CVE-2024-27412 | power: supply: bq27xxx-i2c: Do not free non existing IRQ</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27412</link><description>In the Linux kernel, the following vulnerability has been resolved:

power: supply: bq27xxx-i2c: Do not free non existing IRQ

The bq27xxx i2c-client may not have an IRQ, in which case
client-&gt;irq will be 0. bq27xxx_battery_i2c_probe() already has
an if (client-&gt;irq) check wrapping the request_threaded_irq().

But bq27xxx_battery_i2c_remove() unconditionally calls
free_irq(client-&gt;irq) leading to:

[  190.310742] ------------[ cut here ]------------
[  190.310843] Trying to free already-free IRQ 0
[  190.310861] WARNING: CPU: 2 PID: 1304 at kernel/irq/manage.c:1893 free_irq+0x1b8/0x310

Followed by a backtrace when unbinding the driver. Add
an if (client-&gt;irq) to bq27xxx_battery_i2c_remove() mirroring
probe() to fix this.</description><pubDate>Fri, 17 May 2024 11:58:48 +0000</pubDate></item><item><title>CVE-2024-27413 | efi/capsule-loader: fix incorrect allocation size</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27413</link><description>In the Linux kernel, the following vulnerability has been resolved:

efi/capsule-loader: fix incorrect allocation size

gcc-14 notices that the allocation with sizeof(void) on 32-bit architectures
is not enough for a 64-bit phys_addr_t:

drivers/firmware/efi/capsule-loader.c: In function 'efi_capsule_open':
drivers/firmware/efi/capsule-loader.c:295:24: error: allocation of insufficient size '4' for type 'phys_addr_t' {aka 'long long unsigned int'} with size '8' [-Werror=alloc-size]
  295 |         cap_info-&gt;phys = kzalloc(sizeof(void *), GFP_KERNEL);
      |                        ^

Use the correct type instead here.</description><pubDate>Fri, 17 May 2024 11:58:48 +0000</pubDate></item><item><title>CVE-2024-27414 | rtnetlink: fix error logic of IFLA_BRIDGE_FLAGS writing back</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27414</link><description>In the Linux kernel, the following vulnerability has been resolved:

rtnetlink: fix error logic of IFLA_BRIDGE_FLAGS writing back

In the commit d73ef2d69c0d ("rtnetlink: let rtnl_bridge_setlink checks
IFLA_BRIDGE_MODE length"), an adjustment was made to the old loop logic
in the function `rtnl_bridge_setlink` to enable the loop to also check
the length of the IFLA_BRIDGE_MODE attribute. However, this adjustment
removed the `break` statement and led to an error logic of the flags
writing back at the end of this function.

if (have_flags)
    memcpy(nla_data(attr), &amp;amp;flags, sizeof(flags));
    // attr should point to IFLA_BRIDGE_FLAGS NLA !!!

Before the mentioned commit, the `attr` is granted to be IFLA_BRIDGE_FLAGS.
However, this is not necessarily true fow now as the updated loop will let
the attr point to the last NLA, even an invalid NLA which could cause
overflow writes.

This patch introduces a new variable `br_flag` to save the NLA pointer
that points to IFLA_BRIDGE_FLAGS and uses it to resolve the mentioned
error logic.</description><pubDate>Fri, 17 May 2024 11:58:48 +0000</pubDate></item><item><title>CVE-2024-27415 | netfilter: bridge: confirm multicast packets before passing them up the stack</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27415</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: bridge: confirm multicast packets before passing them up the stack

conntrack nf_confirm logic cannot handle cloned skbs referencing
the same nf_conn entry, which will happen for multicast (broadcast)
frames on bridges.

 Example:
    macvlan0
       |
      br0
     /  \
  ethX    ethY

 ethX (or Y) receives a L2 multicast or broadcast packet containing
 an IP packet, flow is not yet in conntrack table.

 1. skb passes through bridge and fake-ip (br_netfilter)Prerouting.
    -&gt; skb-&gt;_nfct now references a unconfirmed entry
 2. skb is broad/mcast packet. bridge now passes clones out on each bridge
    interface.
 3. skb gets passed up the stack.
 4. In macvlan case, macvlan driver retains clone(s) of the mcast skb
    and schedules a work queue to send them out on the lower devices.

    The clone skb-&gt;_nfct is not a copy, it is the same entry as the
    original skb.  The macvlan rx handler then returns RX_HANDLER_PASS.
 5. Normal conntrack hooks (in NF_INET_LOCAL_IN) confirm the orig skb.

The Macvlan broadcast worker and normal confirm path will race.

This race will not happen if step 2 already confirmed a clone. In that
case later steps perform skb_clone() with skb-&gt;_nfct already confirmed (in
hash table).  This works fine.

But such confirmation won't happen when eb/ip/nftables rules dropped the
packets before they reached the nf_confirm step in postrouting.

Pablo points out that nf_conntrack_bridge doesn't allow use of stateful
nat, so we can safely discard the nf_conn entry and let inet call
conntrack again.

This doesn't work for bridge netfilter: skb could have a nat
transformation. Also bridge nf prevents re-invocation of inet prerouting
via 'sabotage_in' hook.

Work around this problem by explicit confirmation of the entry at LOCAL_IN
time, before upper layer has a chance to clone the unconfirmed entry.

The downside is that this disables NAT and conntrack helpers.

Alternative fix would be to add locking to all code parts that deal with
unconfirmed packets, but even if that could be done in a sane way this
opens up other problems, for example:

-m physdev --physdev-out eth0 -j SNAT --snat-to 1.2.3.4
-m physdev --physdev-out eth1 -j SNAT --snat-to 1.2.3.5

For multicast case, only one of such conflicting mappings will be
created, conntrack only handles 1:1 NAT mappings.

Users should set create a setup that explicitly marks such traffic
NOTRACK (conntrack bypass) to avoid this, but we cannot auto-bypass
them, ruleset might have accept rules for untracked traffic already,
so user-visible behaviour would change.</description><pubDate>Fri, 17 May 2024 11:58:49 +0000</pubDate></item><item><title>CVE-2024-27416 | Bluetooth: hci_event: Fix handling of HCI_EV_IO_CAPA_REQUEST</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27416</link><description>In the Linux kernel, the following vulnerability has been resolved:

Bluetooth: hci_event: Fix handling of HCI_EV_IO_CAPA_REQUEST

If we received HCI_EV_IO_CAPA_REQUEST while
HCI_OP_READ_REMOTE_EXT_FEATURES is yet to be responded assume the remote
does support SSP since otherwise this event shouldn't be generated.</description><pubDate>Fri, 17 May 2024 11:58:49 +0000</pubDate></item><item><title>CVE-2024-27417 | ipv6: fix potential &amp;quot;struct net&amp;quot; leak in inet6_rtm_getaddr()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27417</link><description>In the Linux kernel, the following vulnerability has been resolved:

ipv6: fix potential "struct net" leak in inet6_rtm_getaddr()

It seems that if userspace provides a correct IFA_TARGET_NETNSID value
but no IFA_ADDRESS and IFA_LOCAL attributes, inet6_rtm_getaddr()
returns -EINVAL with an elevated "struct net" refcount.</description><pubDate>Fri, 17 May 2024 11:58:49 +0000</pubDate></item><item><title>CVE-2024-27418 | net: mctp: take ownership of skb in mctp_local_output</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27418</link><description>In the Linux kernel, the following vulnerability has been resolved:

net: mctp: take ownership of skb in mctp_local_output

Currently, mctp_local_output only takes ownership of skb on success, and
we may leak an skb if mctp_local_output fails in specific states; the
skb ownership isn't transferred until the actual output routing occurs.

Instead, make mctp_local_output free the skb on all error paths up to
the route action, so it always consumes the passed skb.</description><pubDate>Fri, 17 May 2024 11:58:50 +0000</pubDate></item><item><title>CVE-2024-27402 | phonet/pep: fix racy skb_queue_empty() use</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27402</link><description>In the Linux kernel, the following vulnerability has been resolved:

phonet/pep: fix racy skb_queue_empty() use

The receive queues are protected by their respective spin-lock, not
the socket lock. This could lead to skb_peek() unexpectedly
returning NULL or a pointer to an already dequeued socket buffer.</description><pubDate>Fri, 17 May 2024 11:48:49 +0000</pubDate></item><item><title>CVE-2024-27403 | netfilter: nft_flow_offload: reset dst in route object after setting up flow</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27403</link><description>In the Linux kernel, the following vulnerability has been resolved:

netfilter: nft_flow_offload: reset dst in route object after setting up flow

dst is transferred to the flow object, route object does not own it
anymore.  Reset dst in route object, otherwise if flow_offload_add()
fails, error path releases dst twice, leading to a refcount underflow.</description><pubDate>Fri, 17 May 2024 11:48:50 +0000</pubDate></item><item><title>CVE-2024-27404 | mptcp: fix data races on remote_id</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27404</link><description>In the Linux kernel, the following vulnerability has been resolved:

mptcp: fix data races on remote_id

Similar to the previous patch, address the data race on
remote_id, adding the suitable ONCE annotations.</description><pubDate>Fri, 17 May 2024 11:48:50 +0000</pubDate></item><item><title>CVE-2024-27405 | usb: gadget: ncm: Avoid dropping datagrams of properly parsed NTBs</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27405</link><description>In the Linux kernel, the following vulnerability has been resolved:

usb: gadget: ncm: Avoid dropping datagrams of properly parsed NTBs

It is observed sometimes when tethering is used over NCM with Windows 11
as host, at some instances, the gadget_giveback has one byte appended at
the end of a proper NTB. When the NTB is parsed, unwrap call looks for
any leftover bytes in SKB provided by u_ether and if there are any pending
bytes, it treats them as a separate NTB and parses it. But in case the
second NTB (as per unwrap call) is faulty/corrupt, all the datagrams that
were parsed properly in the first NTB and saved in rx_list are dropped.

Adding a few custom traces showed the following:
[002] d..1  7828.532866: dwc3_gadget_giveback: ep1out:
req 000000003868811a length 1025/16384 zsI ==&gt; 0
[002] d..1  7828.532867: ncm_unwrap_ntb: K: ncm_unwrap_ntb toprocess: 1025
[002] d..1  7828.532867: ncm_unwrap_ntb: K: ncm_unwrap_ntb nth: 1751999342
[002] d..1  7828.532868: ncm_unwrap_ntb: K: ncm_unwrap_ntb seq: 0xce67
[002] d..1  7828.532868: ncm_unwrap_ntb: K: ncm_unwrap_ntb blk_len: 0x400
[002] d..1  7828.532868: ncm_unwrap_ntb: K: ncm_unwrap_ntb ndp_len: 0x10
[002] d..1  7828.532869: ncm_unwrap_ntb: K: Parsed NTB with 1 frames

In this case, the giveback is of 1025 bytes and block length is 1024.
The rest 1 byte (which is 0x00) won't be parsed resulting in drop of
all datagrams in rx_list.

Same is case with packets of size 2048:
[002] d..1  7828.557948: dwc3_gadget_giveback: ep1out:
req 0000000011dfd96e length 2049/16384 zsI ==&gt; 0
[002] d..1  7828.557949: ncm_unwrap_ntb: K: ncm_unwrap_ntb nth: 1751999342
[002] d..1  7828.557950: ncm_unwrap_ntb: K: ncm_unwrap_ntb blk_len: 0x800

Lecroy shows one byte coming in extra confirming that the byte is coming
in from PC:

 Transfer 2959 - Bytes Transferred(1025)  Timestamp((18.524 843 590)
 - Transaction 8391 - Data(1025 bytes) Timestamp(18.524 843 590)
 --- Packet 4063861
       Data(1024 bytes)
       Duration(2.117us) Idle(14.700ns) Timestamp(18.524 843 590)
 --- Packet 4063863
       Data(1 byte)
       Duration(66.160ns) Time(282.000ns) Timestamp(18.524 845 722)

According to Windows driver, no ZLP is needed if wBlockLength is non-zero,
because the non-zero wBlockLength has already told the function side the
size of transfer to be expected. However, there are in-market NCM devices
that rely on ZLP as long as the wBlockLength is multiple of wMaxPacketSize.
To deal with such devices, it pads an extra 0 at end so the transfer is no
longer multiple of wMaxPacketSize.</description><pubDate>Fri, 17 May 2024 11:48:50 +0000</pubDate></item><item><title>CVE-2024-27406 | lib/Kconfig.debug: TEST_IOV_ITER depends on MMU</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27406</link><description>In the Linux kernel, the following vulnerability has been resolved:

lib/Kconfig.debug: TEST_IOV_ITER depends on MMU

Trying to run the iov_iter unit test on a nommu system such as the qemu
kc705-nommu emulation results in a crash.

    KTAP version 1
    # Subtest: iov_iter
    # module: kunit_iov_iter
    1..9
BUG: failure at mm/nommu.c:318/vmap()!
Kernel panic - not syncing: BUG!

The test calls vmap() directly, but vmap() is not supported on nommu
systems, causing the crash.  TEST_IOV_ITER therefore needs to depend on
MMU.</description><pubDate>Fri, 17 May 2024 11:48:51 +0000</pubDate></item><item><title>CVE-2024-27407 | fs/ntfs3: Fixed overflow check in mi_enum_attr()</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27407</link><description>In the Linux kernel, the following vulnerability has been resolved:

fs/ntfs3: Fixed overflow check in mi_enum_attr()</description><pubDate>Fri, 17 May 2024 11:48:51 +0000</pubDate></item><item><title>CVE-2024-5043 | Emlog Pro setting.php unrestricted upload</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5043</link><description>A vulnerability was found in Emlog Pro 2.3.4 and classified as critical. Affected by this issue is some unknown functionality of the file admin/setting.php. The manipulation leads to unrestricted upload. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-264740. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.</description><pubDate>Fri, 17 May 2024 11:38:51 +0000</pubDate></item><item><title>CVE-2024-5044 | Emlog Pro Cookie improper authentication</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5044</link><description>A vulnerability was found in Emlog Pro 2.3.4. It has been classified as problematic. This affects an unknown part of the component Cookie Handler. The manipulation of the argument AuthCookie leads to improper authentication. It is possible to initiate the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. The identifier VDB-264741 was assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.</description><pubDate>Fri, 17 May 2024 11:38:52 +0000</pubDate></item><item><title>CVE-2024-35173 | WordPress WC Serial Numbers plugin &amp;lt;= 1.7.3 - Broken Access Control vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35173</link><description>Missing Authorization vulnerability in PluginEver Serial Numbers for WooCommerce – License Manager.This issue affects Serial Numbers for WooCommerce – License Manager: from n/a through 1.7.3.</description><pubDate>Fri, 17 May 2024 10:32:09 +0000</pubDate></item><item><title>CVE-2024-35174 | WordPress Flo Forms plugin &amp;lt;= 1.0.42 - Broken Access Control vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35174</link><description>Missing Authorization vulnerability in Flothemes Flo Forms.This issue affects Flo Forms: from n/a through 1.0.42.</description><pubDate>Fri, 17 May 2024 10:32:10 +0000</pubDate></item><item><title>CVE-2024-22120 | Time Based SQL Injection in Zabbix Server Audit Log</title><link>https://www.cve.org/CVERecord?id=CVE-2024-22120</link><description>Zabbix server can perform command execution for configured scripts. After command is executed, audit entry is added to "Audit Log". Due to "clientip" field is not sanitized, it is possible to injection SQL into "clientip" and exploit time based blind SQL injection.</description><pubDate>Fri, 17 May 2024 09:57:15 +0000</pubDate></item><item><title>CVE-2024-34755 | WordPress Integration for Salesforce and Contact Form 7, WPForms, Elementor, Formidable, Ninja Forms plugin &amp;lt;= 1.3.9 - Cross Site Request Forgery (CSRF) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34755</link><description>Cross-Site Request Forgery (CSRF) vulnerability in CRM Perks Integration for Contact Form 7 and Salesforce.This issue affects Integration for Contact Form 7 and Salesforce: from n/a through 1.3.9.</description><pubDate>Fri, 17 May 2024 09:57:16 +0000</pubDate></item><item><title>CVE-2024-34756 | WordPress Integration for HubSpot and Contact Form 7 plugin &amp;lt;= 1.3.1 - Cross Site Request Forgery (CSRF) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34756</link><description>Cross-Site Request Forgery (CSRF) vulnerability in CRM Perks Integration for Contact Form 7 HubSpot.This issue affects Integration for Contact Form 7 HubSpot: from n/a through 1.3.1.</description><pubDate>Fri, 17 May 2024 09:57:16 +0000</pubDate></item><item><title>CVE-2024-34806 | WordPress Clearfy Cache plugin &amp;lt;= 2.2.1 - Cross Site Request Forgery (CSRF) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34806</link><description>Cross-Site Request Forgery (CSRF) vulnerability in Creative Motion Clearfy Cache.This issue affects Clearfy Cache: from n/a through 2.2.1.</description><pubDate>Fri, 17 May 2024 09:57:17 +0000</pubDate></item><item><title>CVE-2024-34807 | WordPress Fast Custom Social Share by CodeBard plugin &amp;lt;= 1.1.2 - Cross Site Request Forgery (CSRF) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34807</link><description>Cross-Site Request Forgery (CSRF) vulnerability in CodeBard Fast Custom Social Share by CodeBard.This issue affects Fast Custom Social Share by CodeBard: from n/a through 1.1.2.</description><pubDate>Fri, 17 May 2024 09:57:17 +0000</pubDate></item><item><title>CVE-2024-34809 | WordPress EmpowerWP theme &amp;lt;= 1.0.21 - Cross Site Request Forgery (CSRF) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34809</link><description>Cross-Site Request Forgery (CSRF) vulnerability in Extend Themes EmpowerWP.This issue affects EmpowerWP: from n/a through 1.0.21.</description><pubDate>Fri, 17 May 2024 09:57:17 +0000</pubDate></item><item><title>CVE-2024-32708 | WordPress Maintenance Mode plugin &amp;lt;= 3.0.1 - IP Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32708</link><description>Authentication Bypass by Spoofing vulnerability in helderk Maintenance Mode allows Functionality Bypass.This issue affects Maintenance Mode: from n/a through 3.0.1.</description><pubDate>Fri, 17 May 2024 09:47:06 +0000</pubDate></item><item><title>CVE-2024-32720 | WordPress Appointment Hour Booking plugin &amp;lt;= 1.4.56 - Captcha Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32720</link><description>Improper Restriction of Excessive Authentication Attempts vulnerability in CodePeople Appointment Hour Booking allows Removing Important Client Functionality.This issue affects Appointment Hour Booking: from n/a through 1.4.56.</description><pubDate>Fri, 17 May 2024 09:47:06 +0000</pubDate></item><item><title>CVE-2024-32774 | WordPress ProfileGrid plugin &amp;lt;= 5.8.2 - Group Members Limit Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32774</link><description>Improper Restriction of Excessive Authentication Attempts vulnerability in Metagauss ProfileGrid allows Removing Important Client Functionality.This issue affects ProfileGrid : from n/a through 5.8.2.</description><pubDate>Fri, 17 May 2024 09:47:07 +0000</pubDate></item><item><title>CVE-2024-32786 | WordPress Royal Elementor Addons and Templates plugin &amp;lt;= 1.3.93 - IP Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32786</link><description>Authentication Bypass by Spoofing vulnerability in WP Royal Royal Elementor Addons allows Functionality Bypass.This issue affects Royal Elementor Addons: from n/a through 1.3.93.</description><pubDate>Fri, 17 May 2024 09:47:07 +0000</pubDate></item><item><title>CVE-2024-32802 | WordPress Better Messages plugin &amp;lt;= 2.4.32 - Broken Authentication vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32802</link><description>Missing Authorization vulnerability in WordPlus BP Better Messages allows Accessing Functionality Not Properly Constrained by ACLs.This issue affects BP Better Messages: from n/a through 2.4.32.</description><pubDate>Fri, 17 May 2024 09:47:07 +0000</pubDate></item><item><title>CVE-2024-32809 | WordPress ActiveDEMAND plugin &amp;lt;= 0.2.41 - Arbitrary File Upload vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32809</link><description>Unrestricted Upload of File with Dangerous Type vulnerability in JumpDEMAND Inc. ActiveDEMAND allows Using Malicious Files.This issue affects ActiveDEMAND: from n/a through 0.2.41.</description><pubDate>Fri, 17 May 2024 09:47:08 +0000</pubDate></item><item><title>CVE-2024-32827 | WordPress Giveaways and Contests by RafflePress plugin &amp;lt;= 1.12.7 - IP Restriction Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32827</link><description>Authentication Bypass by Spoofing vulnerability in RafflePress Giveaways and Contests allows Functionality Bypass.This issue affects Giveaways and Contests: from n/a through 1.12.7.</description><pubDate>Fri, 17 May 2024 09:47:08 +0000</pubDate></item><item><title>CVE-2024-32830 | WordPress buddyforms plugin &amp;lt;= 2.8.8- Arbitrary File Read and SSRF vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32830</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in ThemeKraft BuddyForms allows Server Side Request Forgery, Relative Path Traversal.This issue affects BuddyForms: from n/a through 2.8.8.</description><pubDate>Fri, 17 May 2024 09:47:09 +0000</pubDate></item><item><title>CVE-2024-32959 | WordPress Sirv plugin &amp;lt;= 7.2.2 - Arbitrary Option Update to Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32959</link><description>Improper Privilege Management vulnerability in Sirv allows Privilege Escalation.This issue affects Sirv: from n/a through 7.2.2.</description><pubDate>Fri, 17 May 2024 09:47:09 +0000</pubDate></item><item><title>CVE-2024-32960 | WordPress Booking Ultra Pro plugin 1.1.12 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32960</link><description>Improper Privilege Management vulnerability in Booking Ultra Pro allows Privilege Escalation.This issue affects Booking Ultra Pro: from n/a through 1.1.12.</description><pubDate>Fri, 17 May 2024 09:47:10 +0000</pubDate></item><item><title>CVE-2024-5052 | Resource consumption vulnerability in Cerberus FTP Enterprise</title><link>https://www.cve.org/CVERecord?id=CVE-2024-5052</link><description>Denial of Service (DoS) vulnerability for Cerberus Enterprise 8.0.10.3 web administration. The vulnerability exists when the web server, default port 10001, attempts to process a large number of incomplete HTTP requests.</description><pubDate>Fri, 17 May 2024 09:47:10 +0000</pubDate></item><item><title>CVE-2024-32692 | WordPress Chauffeur Taxi Booking System for WordPress plugin &amp;lt;= 6.9 - Broken Authentication vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32692</link><description>Missing Authorization vulnerability in QuanticaLabs Chauffeur Taxi Booking System for WordPress allows Accessing Functionality Not Properly Constrained by ACLs.This issue affects Chauffeur Taxi Booking System for WordPress: from n/a through 6.9.</description><pubDate>Fri, 17 May 2024 09:26:53 +0000</pubDate></item><item><title>CVE-2024-32511 | WordPress Simple Registration for WooCommerce plugin &amp;lt;= 1.5.6 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32511</link><description>Improper Privilege Management vulnerability in Astoundify Simple Registration for WooCommerce allows Privilege Escalation.This issue affects Simple Registration for WooCommerce: from n/a through 1.5.6.</description><pubDate>Fri, 17 May 2024 09:10:48 +0000</pubDate></item><item><title>CVE-2024-32512 | WordPress weForms plugin &amp;lt;= 1.6.20 - Form Submission Restriction Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32512</link><description>Client-Side Enforcement of Server-Side Security vulnerability in weForms allows Removing Important Client Functionality.This issue affects weForms: from n/a through 1.6.20.</description><pubDate>Fri, 17 May 2024 09:10:49 +0000</pubDate></item><item><title>CVE-2024-32521 | WordPress Zero Spam for WordPress plugin &amp;lt;= 5.5.6 - Bypass Spam Protection vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32521</link><description>Client-Side Enforcement of Server-Side Security vulnerability in Highfivery LLC Zero Spam allows Removing Important Client Functionality.This issue affects Zero Spam: from n/a through 5.5.6.</description><pubDate>Fri, 17 May 2024 09:10:49 +0000</pubDate></item><item><title>CVE-2024-32523 | WordPress Mailster plugin &amp;lt;= 4.0.6 - Unauthenticated Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32523</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in EverPress Mailster allows PHP Local File Inclusion.This issue affects Mailster: from n/a through 4.0.6.</description><pubDate>Fri, 17 May 2024 09:10:49 +0000</pubDate></item><item><title>CVE-2024-32680 | WordPress HUSKY plugin &amp;lt;= 1.3.5.2 - Remote Code Execution (RCE) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32680</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'), Improper Control of Generation of Code ('Code Injection') vulnerability in PluginUS HUSKY – Products Filter for WooCommerce (formerly WOOF) allows Using Malicious Files, Code Inclusion.This issue affects HUSKY – Products Filter for WooCommerce (formerly WOOF): from n/a through 1.3.5.2.</description><pubDate>Fri, 17 May 2024 09:10:50 +0000</pubDate></item><item><title>CVE-2024-32685 | WordPress WP Ultimate Review plugin &amp;lt;= 2.2.5 - Review Score Manipulation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32685</link><description>Client-Side Enforcement of Server-Side Security vulnerability in Wpmet Wp Ultimate Review allows Functionality Bypass.This issue affects Wp Ultimate Review: from n/a through 2.2.5.</description><pubDate>Fri, 17 May 2024 09:10:50 +0000</pubDate></item><item><title>CVE-2024-24934 | WordPress Elementor plugin &amp;lt;= 3.19.0 - Arbitrary File Deletion and Phar Deserialization vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-24934</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Elementor Elementor Website Builder allows Manipulating Web Input to File System Calls.This issue affects Elementor Website Builder: from n/a through 3.19.0.</description><pubDate>Fri, 17 May 2024 09:10:51 +0000</pubDate></item><item><title>CVE-2024-27954 | WordPress Automatic plugin &amp;lt;= 3.92.0 - Unauthenticated Arbitrary File Download and SSRF vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27954</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in WP Automatic Automatic allows Path Traversal, Server Side Request Forgery.This issue affects Automatic: from n/a through 3.92.0.</description><pubDate>Fri, 17 May 2024 09:10:51 +0000</pubDate></item><item><title>CVE-2024-27955 | WordPress Automatic plugin &amp;lt;= 3.92.0 - CSRF to Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27955</link><description>Cross-Site Request Forgery (CSRF) vulnerability in WP Automatic Automatic allows Privilege Escalation.This issue affects Automatic: from n/a through 3.92.0.</description><pubDate>Fri, 17 May 2024 09:10:52 +0000</pubDate></item><item><title>CVE-2024-27971 | WordPress Premmerce Permalink Manager for WooCommerce plugin &amp;lt;= 2.3.10 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-27971</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Premmerce Premmerce Permalink Manager for WooCommerce allows PHP Local File Inclusion.This issue affects Premmerce Permalink Manager for WooCommerce: from n/a through 2.3.10.</description><pubDate>Fri, 17 May 2024 09:10:52 +0000</pubDate></item><item><title>CVE-2024-30509 | WordPress SellKit plugin &amp;lt;= 1.8.1 - Arbitrary File Download vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-30509</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Artbees SellKit allows Relative Path Traversal.This issue affects SellKit: from n/a through 1.8.1.</description><pubDate>Fri, 17 May 2024 09:10:52 +0000</pubDate></item><item><title>CVE-2024-30542 | WordPress WholesaleX plugin &amp;lt;= 1.3.2 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-30542</link><description>Improper Privilege Management vulnerability in Wholesale WholesaleX allows Privilege Escalation.This issue affects WholesaleX: from n/a through 1.3.2.</description><pubDate>Fri, 17 May 2024 09:10:53 +0000</pubDate></item><item><title>CVE-2024-31231 | WordPress Rehub theme &amp;lt;= 19.6.1 - Unauthenticated Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31231</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Sizam Design Rehub allows PHP Local File Inclusion.This issue affects Rehub: from n/a through 19.6.1.</description><pubDate>Fri, 17 May 2024 09:10:53 +0000</pubDate></item><item><title>CVE-2024-31232 | WordPress Rehub theme &amp;lt;= 19.6.1 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31232</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Sizam Design Rehub allows PHP Local File Inclusion.This issue affects Rehub: from n/a through 19.6.1.</description><pubDate>Fri, 17 May 2024 09:10:53 +0000</pubDate></item><item><title>CVE-2024-31237 | WordPress s2Member plugin &amp;lt;= 240315 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31237</link><description>Improper Privilege Management vulnerability in WP Sharks s2Member Pro allows Privilege Escalation.This issue affects s2Member Pro: from n/a through 240315.</description><pubDate>Fri, 17 May 2024 09:10:54 +0000</pubDate></item><item><title>CVE-2024-31281 | WordPress Church Admin plugin &amp;lt;= 4.1.6 - Broken Access Control vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31281</link><description>Missing Authorization vulnerability in Andy Moyle Church Admin church-admin allows Exploiting Incorrectly Configured Access Control Security Levels.This issue affects Church Admin: from n/a through 4.1.6.</description><pubDate>Fri, 17 May 2024 09:10:54 +0000</pubDate></item><item><title>CVE-2024-31290 | WordPress Demo My WordPress plugin &amp;lt;= 1.0.9.1 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31290</link><description>Improper Privilege Management vulnerability in CodeRevolution Demo My WordPress allows Privilege Escalation.This issue affects Demo My WordPress: from n/a through 1.0.9.1.</description><pubDate>Fri, 17 May 2024 09:10:54 +0000</pubDate></item><item><title>CVE-2024-31300 | WordPress Easy Social Share Buttons plugin &amp;lt;= 9.4 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31300</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in appscreo Easy Social Share Buttons allows PHP Local File Inclusion.This issue affects Easy Social Share Buttons: from n/a through 9.4.</description><pubDate>Fri, 17 May 2024 09:10:55 +0000</pubDate></item><item><title>CVE-2024-32507 | WordPress Login with phone number plugin &amp;lt;= 1.7.16 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32507</link><description>Improper Privilege Management vulnerability in Hamid Alinia – idehweb Login with phone number allows Privilege Escalation.This issue affects Login with phone number: from n/a through 1.7.16.</description><pubDate>Fri, 17 May 2024 09:10:55 +0000</pubDate></item><item><title>CVE-2023-51476 | WordPress WP MLM Unilevel plugin &amp;lt;= 4.0 - Unauthenticated Account Takeover vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51476</link><description>Improper Privilege Management vulnerability in IOSS WP MLM Unilevel allows Privilege Escalation.This issue affects WP MLM Unilevel: from n/a through 4.0.</description><pubDate>Fri, 17 May 2024 08:53:05 +0000</pubDate></item><item><title>CVE-2023-51479 | WordPress Build App Online plugin &amp;lt;= 1.0.19 - Authenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51479</link><description>Improper Privilege Management vulnerability in Abdul Hakeem Build App Online allows Privilege Escalation.This issue affects Build App Online: from n/a through 1.0.19.</description><pubDate>Fri, 17 May 2024 08:53:05 +0000</pubDate></item><item><title>CVE-2023-51481 | WordPress Local Delivery Drivers for WooCommerce plugin &amp;lt;= 1.9.0 - Unauthenticated Account Takeover vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51481</link><description>Improper Privilege Management vulnerability in powerfulwp Local Delivery Drivers for WooCommerce allows Privilege Escalation.This issue affects Local Delivery Drivers for WooCommerce: from n/a through 1.9.0.</description><pubDate>Fri, 17 May 2024 08:53:06 +0000</pubDate></item><item><title>CVE-2023-51483 | WordPress WP Frontend Profile plugin &amp;lt;= 1.3.1 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51483</link><description>Improper Privilege Management vulnerability in Glowlogix WP Frontend Profile allows Privilege Escalation.This issue affects WP Frontend Profile: from n/a through 1.3.1.</description><pubDate>Fri, 17 May 2024 08:53:06 +0000</pubDate></item><item><title>CVE-2023-51546 | WordPress WooCommerce PDF Invoices, Packing Slips, Delivery Notes and Shipping Labels plugin &amp;lt;= 4.2.1 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51546</link><description>Improper Privilege Management vulnerability in WebToffee WooCommerce PDF Invoices, Packing Slips, Delivery Notes and Shipping Labels allows Privilege Escalation.This issue affects WooCommerce PDF Invoices, Packing Slips, Delivery Notes and Shipping Labels: from n/a through 4.2.1.</description><pubDate>Fri, 17 May 2024 08:53:06 +0000</pubDate></item><item><title>CVE-2024-21746 | WordPress Wp Ultimate Review plugin &amp;lt;= 2.3.2 - IP limit Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-21746</link><description>Authentication Bypass by Spoofing vulnerability in Wpmet Wp Ultimate Review allows Functionality Bypass.This issue affects Wp Ultimate Review: from n/a through 2.3.2.</description><pubDate>Fri, 17 May 2024 08:53:07 +0000</pubDate></item><item><title>CVE-2024-22139 | WordPress WordPress Manutenção plugin &amp;lt;= 1.0.6 - Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-22139</link><description>Authentication Bypass by Spoofing vulnerability in Filipe Seabra WordPress Manutenção allows Functionality Bypass.This issue affects WordPress Manutenção: from n/a through 1.0.6.</description><pubDate>Fri, 17 May 2024 08:53:07 +0000</pubDate></item><item><title>CVE-2024-22145 | WordPress InstaWP Connect plugin &amp;lt;= 0.1.0.8 - Arbitrary Option Update to Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-22145</link><description>Improper Privilege Management vulnerability in InstaWP Team InstaWP Connect allows Privilege Escalation.This issue affects InstaWP Connect: from n/a through 0.1.0.8.</description><pubDate>Fri, 17 May 2024 08:53:07 +0000</pubDate></item><item><title>CVE-2024-22157 | WordPress SalesKing plugin &amp;lt;= 1.6.15 - Unauthenticated  Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-22157</link><description>Improper Privilege Management vulnerability in WebWizards SalesKing allows Privilege Escalation.This issue affects SalesKing: from n/a through 1.6.15.</description><pubDate>Fri, 17 May 2024 08:53:08 +0000</pubDate></item><item><title>CVE-2024-23522 | WordPress Formidable Forms plugin &amp;lt;= 6.7 - Content Injection vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-23522</link><description>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) vulnerability in Strategy11 Form Builder Team Formidable Forms allows Code Injection.This issue affects Formidable Forms: from n/a through 6.7.</description><pubDate>Fri, 17 May 2024 08:53:08 +0000</pubDate></item><item><title>CVE-2024-24715 | WordPress WordPress BookIt Plugin plugin &amp;lt;= 2.4.0 - Price Bypass Vulnerability vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-24715</link><description>Improper Validation of Specified Quantity in Input vulnerability in The Events Calendar BookIt allows Manipulating Hidden Fields.This issue affects BookIt: from n/a through 2.4.0.</description><pubDate>Fri, 17 May 2024 08:53:08 +0000</pubDate></item><item><title>CVE-2024-24869 | WordPress Total Upkeep plugin &amp;lt;= 1.15.8 - Arbitrary File Download vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-24869</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in BoldGrid Total Upkeep allows Relative Path Traversal.This issue affects Total Upkeep: from n/a through 1.15.8.</description><pubDate>Fri, 17 May 2024 08:53:09 +0000</pubDate></item><item><title>CVE-2024-24882 | WordPress LMS by Masteriyo plugin &amp;lt;= 1.7.2 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-24882</link><description>Improper Privilege Management vulnerability in Masteriyo LMS allows Privilege Escalation.This issue affects LMS: from n/a through 1.7.2.</description><pubDate>Fri, 17 May 2024 08:53:09 +0000</pubDate></item><item><title>CVE-2024-4214 | WordPress cardealer plugin &amp;lt;= 4.15 - Content Injection vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4214</link><description>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS vulnerability in Bill Minozzi Car Dealer allows Code Injection.This issue affects Car Dealer: from n/a through 4.15.</description><pubDate>Fri, 17 May 2024 08:53:09 +0000</pubDate></item><item><title>CVE-2023-47782 | WordPress Thrive Theme Builder theme &amp;lt; 3.24.0 - Authenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-47782</link><description>Improper Privilege Management vulnerability in Thrive Themes Thrive Theme Builder allows Privilege Escalation.This issue affects Thrive Theme Builder: from n/a before 3.24.0.</description><pubDate>Fri, 17 May 2024 08:53:10 +0000</pubDate></item><item><title>CVE-2023-47868 | WordPress wpForo plugin &amp;lt;= 2.2.3 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-47868</link><description>Improper Privilege Management vulnerability in wpForo wpForo Forum allows Privilege Escalation.This issue affects wpForo Forum: from n/a through 2.2.3.</description><pubDate>Fri, 17 May 2024 08:53:10 +0000</pubDate></item><item><title>CVE-2023-48319 | WordPress Salon booking system plugin &amp;lt; 8.7 - Editor+ Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-48319</link><description>Improper Privilege Management vulnerability in Salon Booking System Salon booking system allows Privilege Escalation.This issue affects Salon booking system: from n/a through 8.6.</description><pubDate>Fri, 17 May 2024 08:53:11 +0000</pubDate></item><item><title>CVE-2023-48757 | WordPress JetEngine plugin &amp;lt;= 3.2.4 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-48757</link><description>Improper Privilege Management vulnerability in Crocoblock JetEngine allows Privilege Escalation.This issue affects JetEngine: from n/a through 3.2.4.</description><pubDate>Fri, 17 May 2024 08:53:11 +0000</pubDate></item><item><title>CVE-2023-49753 | WordPress Adifier System plugin &amp;lt; 3.1.4 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-49753</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in spoonthemes Adifier System allows PHP Local File Inclusion.This issue affects Adifier System: from n/a before 3.1.4.</description><pubDate>Fri, 17 May 2024 08:53:11 +0000</pubDate></item><item><title>CVE-2023-50890 | WordPress Ultimate Addons for Elementor plugin &amp;lt;= 1.36.20 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-50890</link><description>Improper Privilege Management vulnerability in Brainstorm Force Ultimate Addons for Elementor allows Privilege Escalation.This issue affects Ultimate Addons for Elementor: from n/a through 1.36.20.</description><pubDate>Fri, 17 May 2024 08:53:12 +0000</pubDate></item><item><title>CVE-2023-51356 | WordPress ARMember plugin &amp;lt;= 4.0.10 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51356</link><description>Improper Privilege Management vulnerability in Repute Infosystems ARMember allows Privilege Escalation.This issue affects ARMember: from n/a through 4.0.10.</description><pubDate>Fri, 17 May 2024 08:53:12 +0000</pubDate></item><item><title>CVE-2023-51398 | WordPress Ultimate Addons for Beaver Builder Premium plugin &amp;lt;= 1.35.14 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51398</link><description>Improper Privilege Management vulnerability in Brainstorm Force Ultimate Addons for Beaver Builder allows Privilege Escalation.This issue affects Ultimate Addons for Beaver Builder: from n/a through 1.35.14.</description><pubDate>Fri, 17 May 2024 08:53:12 +0000</pubDate></item><item><title>CVE-2023-51401 | WordPress Ultimate Addons for Beaver Builder Premium plugin &amp;lt;= 1.35.13 - Limited Arbitrary File Download vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51401</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Brainstorm Force Ultimate Addons for Beaver Builder allows Relative Path Traversal.This issue affects Ultimate Addons for Beaver Builder: from n/a through 1.35.13.</description><pubDate>Fri, 17 May 2024 08:53:13 +0000</pubDate></item><item><title>CVE-2023-51424 | WordPress WebinarIgnition plugin &amp;lt;= 3.05.0 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-51424</link><description>Improper Privilege Management vulnerability in Saleswonder Team WebinarIgnition allows Privilege Escalation.This issue affects WebinarIgnition: from n/a through 3.05.0.</description><pubDate>Fri, 17 May 2024 08:53:13 +0000</pubDate></item><item><title>CVE-2023-45652 | WordPress Remote Content Shortcode plugin &amp;lt;= 1.5 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-45652</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Justin Silver Remote Content Shortcode allows PHP Local File Inclusion.This issue affects Remote Content Shortcode: from n/a through 1.5.</description><pubDate>Fri, 17 May 2024 08:43:02 +0000</pubDate></item><item><title>CVE-2023-46145 | WordPress Themify Ultra theme &amp;lt;= 7.3.5 - Authenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-46145</link><description>Improper Privilege Management vulnerability in Themify Themify Ultra allows Privilege Escalation.This issue affects Themify Ultra: from n/a through 7.3.5.</description><pubDate>Fri, 17 May 2024 08:43:03 +0000</pubDate></item><item><title>CVE-2023-46197 | WordPress Popup by Supsystic plugin &amp;lt;= 1.10.19 - Unauthenticated Subscriber Email Addresses Disclosure</title><link>https://www.cve.org/CVERecord?id=CVE-2023-46197</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in supsystic.Com Popup by Supsystic allows Relative Path Traversal.This issue affects Popup by Supsystic: from n/a through 1.10.19.</description><pubDate>Fri, 17 May 2024 08:43:03 +0000</pubDate></item><item><title>CVE-2023-46205 | WordPress Ultimate Addons for WPBakery Page Builder plugin &amp;lt;= 3.19.14 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-46205</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Brainstorm Force Ultimate Addons for WPBakery Page Builder allows PHP Local File Inclusion.This issue affects Ultimate Addons for WPBakery Page Builder: from n/a through 3.19.14.</description><pubDate>Fri, 17 May 2024 08:43:03 +0000</pubDate></item><item><title>CVE-2023-46784 | WordPress ICS Calendar plugin &amp;lt;= 10.12.0.3 - SSRF and Arbitrary File Read vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-46784</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'), Server-Side Request Forgery (SSRF) vulnerability in Room 34 Creative Services, LLC ICS Calendar ics-calendar allows Absolute Path Traversal, : Server Side Request Forgery.This issue affects ICS Calendar: from n/a through 10.12.0.3.</description><pubDate>Fri, 17 May 2024 08:43:04 +0000</pubDate></item><item><title>CVE-2023-47178 | WordPress The Plus Addons for Elementor Pro plugin &amp;lt;= 5.2.8 - Unauthenticated Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-47178</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in POSIMYTH Innovation The Plus Addons for Elementor Pro allows PHP Local File Inclusion.This issue affects The Plus Addons for Elementor Pro: from n/a through 5.2.8.</description><pubDate>Fri, 17 May 2024 08:43:04 +0000</pubDate></item><item><title>CVE-2023-47679 | WordPress Qi Addons For Elementor plugin &amp;lt;= 1.6.3 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-47679</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in QODE Interactive Qi Addons For Elementor allows PHP Local File Inclusion.This issue affects Qi Addons For Elementor: from n/a through 1.6.3.</description><pubDate>Fri, 17 May 2024 08:43:04 +0000</pubDate></item><item><title>CVE-2023-47682 | WordPress WP User Frontend plugin &amp;lt;= 3.6.5 - Authenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-47682</link><description>Improper Privilege Management vulnerability in weDevs WP User Frontend allows Privilege Escalation.This issue affects WP User Frontend: from n/a through 3.6.5.</description><pubDate>Fri, 17 May 2024 08:43:05 +0000</pubDate></item><item><title>CVE-2023-47683 | WordPress Social Login, Social Sharing by miniOrange plugin &amp;lt;= 7.6.6 - Authenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-47683</link><description>Improper Privilege Management vulnerability in miniOrange WordPress Social Login and Register (Discord, Google, Twitter, LinkedIn) allows Privilege Escalation.This issue affects WordPress Social Login and Register (Discord, Google, Twitter, LinkedIn): from n/a through 7.6.6.</description><pubDate>Fri, 17 May 2024 08:43:05 +0000</pubDate></item><item><title>CVE-2024-4789 | Cost Calculator Builder Pro &amp;lt;= 3.1.72 - Authenticated (Subscriber+) Server-Side Request Forgery</title><link>https://www.cve.org/CVERecord?id=CVE-2024-4789</link><description>Cost Calculator Builder Pro plugin for WordPress is vulnerable to Server-Side Request Forgery in all versions up to 3.1.72, via the send_demo_webhook() function. This makes it possible for authenticated attackers, with subscriber-level access and above, to make web requests to arbitrary locations originating from the web application and can be used to query and modify information from internal services.</description><pubDate>Fri, 17 May 2024 08:43:05 +0000</pubDate></item><item><title>CVE-2023-44478 | WordPress Events Rich Snippets for Google plugin &amp;lt;= 1.8 - CSRF Leading to Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-44478</link><description>Cross-Site Request Forgery (CSRF) vulnerability in WP Hive Events Rich Snippets for Google allows Exploitation of Trusted Credentials.This issue affects Events Rich Snippets for Google: from n/a through 1.8.</description><pubDate>Fri, 17 May 2024 08:33:13 +0000</pubDate></item><item><title>CVE-2024-24873 | WordPress Polls CP plugin &amp;lt;= 1.0.71 - Polls Limitation Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-24873</link><description>: Improper Control of Interaction Frequency vulnerability in CodePeople CP Polls allows Flooding.This issue affects CP Polls: from n/a through 1.0.71.</description><pubDate>Fri, 17 May 2024 08:33:13 +0000</pubDate></item><item><title>CVE-2024-24874 | WordPress Polls CP plugin &amp;lt;= 1.0.71 - Content Injection vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-24874</link><description>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) vulnerability in CodePeople CP Polls allows Code Injection.This issue affects CP Polls: from n/a through 1.0.71.</description><pubDate>Fri, 17 May 2024 08:33:14 +0000</pubDate></item><item><title>CVE-2024-25595 | WordPress Defender Security plugin &amp;lt;= 4.4.1 - IP Restriction Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-25595</link><description>Authentication Bypass by Spoofing vulnerability in WPMU DEV Defender Security allows Functionality Bypass.This issue affects Defender Security: from n/a through 4.4.1.</description><pubDate>Fri, 17 May 2024 08:33:14 +0000</pubDate></item><item><title>CVE-2024-25906 | WordPress Comments Like Dislike plugin &amp;lt;= 1.2.2 - IP Restriction Bypass Vulnerability vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-25906</link><description>Authentication Bypass by Spoofing vulnerability in WP Happy Coders Comments Like Dislike allows Functionality Bypass.This issue affects Comments Like Dislike: from n/a through 1.2.2.</description><pubDate>Fri, 17 May 2024 08:33:14 +0000</pubDate></item><item><title>CVE-2024-30479 | WordPress LionScripts: IP Blocker Lite plugin &amp;lt;= 11.1.1 - Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-30479</link><description>Authentication Bypass by Spoofing vulnerability in LionScripts IP Blocker Lite allows Functionality Bypass.This issue affects IP Blocker Lite: from n/a through 11.1.1.</description><pubDate>Fri, 17 May 2024 08:33:15 +0000</pubDate></item><item><title>CVE-2024-30480 | WordPress CGC Maintenance Mode plugin &amp;lt;= 1.2 - IP Filtering Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-30480</link><description>Authentication Bypass by Spoofing vulnerability in Pippin Williamson CGC Maintenance Mode allows Functionality Bypass.This issue affects CGC Maintenance Mode: from n/a through 1.2.</description><pubDate>Fri, 17 May 2024 08:33:15 +0000</pubDate></item><item><title>CVE-2024-30522 | WordPress Newsletter plugin &amp;lt;= 8.2.0 - IP Blacklist Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-30522</link><description>Authentication Bypass by Spoofing vulnerability in Stefano Lissa &amp; The Newsletter Team Newsletter allows Functionality Bypass.This issue affects Newsletter: from n/a through 8.2.0.</description><pubDate>Fri, 17 May 2024 08:33:16 +0000</pubDate></item><item><title>CVE-2024-30527 | WordPress WP Express Checkout plugin &amp;lt;= 2.3.7 - Price Manipulation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-30527</link><description>Improper Validation of Specified Quantity in Input vulnerability in Tips and Tricks HQ WP Express Checkout (Accept PayPal Payments) allows Manipulating Hidden Fields.This issue affects WP Express Checkout (Accept PayPal Payments): from n/a through 2.3.7.</description><pubDate>Fri, 17 May 2024 08:21:43 +0000</pubDate></item><item><title>CVE-2024-30540 | WordPress VS Contact Form plugin &amp;lt;= 14.7 - Sum Captcha Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-30540</link><description>Guessable CAPTCHA vulnerability in Guido VS Contact Form allows Functionality Bypass.This issue affects VS Contact Form: from n/a through 14.7.</description><pubDate>Fri, 17 May 2024 08:21:43 +0000</pubDate></item><item><title>CVE-2024-31295 | WordPress Captcha by BestWebSoft plugin &amp;lt;= 5.2.0 - Captcha Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31295</link><description>Guessable CAPTCHA vulnerability in BestWebSoft Captcha by BestWebSoft allows Functionality Bypass.This issue affects Captcha by BestWebSoft: from n/a through 5.2.0.</description><pubDate>Fri, 17 May 2024 08:21:44 +0000</pubDate></item><item><title>CVE-2024-31341 | WordPress User Profile Builder plugin &amp;lt;= 3.11.2 - Bypass Vulnerability vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31341</link><description>Insufficient Verification of Data Authenticity vulnerability in Cozmoslabs Profile Builder allows Functionality Bypass.This issue affects Profile Builder: from n/a through 3.11.2.</description><pubDate>Fri, 17 May 2024 08:21:44 +0000</pubDate></item><item><title>CVE-2024-32131 | WordPress Download Manager plugin &amp;lt;= 3.2.82 - File Password Lock Bypass vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32131</link><description>Exposure of Sensitive Information to an Unauthorized Actor vulnerability in W3 Eden Inc. Download Manager allows Functionality Bypass.This issue affects Download Manager: from n/a through 3.2.82.</description><pubDate>Fri, 17 May 2024 08:21:44 +0000</pubDate></item><item><title>CVE-2024-32790 | WordPress Pricing Table by Supsystic plugin &amp;lt;= 1.9.12 - Content Injection vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32790</link><description>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) vulnerability in Supsystic Pricing Table by Supsystic allows Code Injection.This issue affects Pricing Table by Supsystic: from n/a through 1.9.12.</description><pubDate>Fri, 17 May 2024 08:21:45 +0000</pubDate></item><item><title>CVE-2024-33549 | WordPress WZone plugin &amp;lt;= 14.0.10 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33549</link><description>Improper Privilege Management vulnerability in AA-Team WZone allows Privilege Escalation.This issue affects WZone: from n/a through 14.0.10.</description><pubDate>Fri, 17 May 2024 08:21:45 +0000</pubDate></item><item><title>CVE-2024-33550 | WordPress WP Masquerade plugin &amp;lt;= 1.1.0 - Authenticated Account Takeover vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33550</link><description>Improper Privilege Management vulnerability in JR King/Eran Schoellhorn WP Masquerade allows Privilege Escalation.This issue affects WP Masquerade: from n/a through 1.1.0.</description><pubDate>Fri, 17 May 2024 08:21:46 +0000</pubDate></item><item><title>CVE-2024-33552 | WordPress XStore Core plugin &amp;lt;= 5.3.8 - Unauthenticated Account Takeover vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33552</link><description>Improper Privilege Management vulnerability in 8theme XStore Core allows Privilege Escalation.This issue affects XStore Core: from n/a through 5.3.8.</description><pubDate>Fri, 17 May 2024 08:21:46 +0000</pubDate></item><item><title>CVE-2024-33567 | WordPress Barcode Scanner with Inventory &amp;amp; Order Manager plugin &amp;lt;= 1.5.3 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33567</link><description>Improper Privilege Management vulnerability in UkrSolution Barcode Scanner with Inventory &amp; Order Manager allows Privilege Escalation.This issue affects Barcode Scanner with Inventory &amp; Order Manager: from n/a through 1.5.3.</description><pubDate>Fri, 17 May 2024 08:21:47 +0000</pubDate></item><item><title>CVE-2024-33569 | WordPress Instant Images plugin &amp;lt;= 6.1.0 - Arbitrary Option Update to Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33569</link><description>Improper Privilege Management vulnerability in Darren Cooney Instant Images allows Privilege Escalation.This issue affects Instant Images: from n/a through 6.1.0.</description><pubDate>Fri, 17 May 2024 08:21:47 +0000</pubDate></item><item><title>CVE-2024-33644 | WordPress Customify Site Library plugin &amp;lt;= 0.0.9 - Remote Code Execution (RCE) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33644</link><description>Improper Control of Generation of Code ('Code Injection') vulnerability in WPCustomify Customify Site Library allows Code Injection.This issue affects Customify Site Library: from n/a through 0.0.9.</description><pubDate>Fri, 17 May 2024 08:21:48 +0000</pubDate></item><item><title>CVE-2024-33917 | WordPress WTI Like Post plugin &amp;lt;= 1.4.6 - IP Restriction Bypass Vulnerability vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33917</link><description>Authentication Bypass by Spoofing vulnerability in webtechideas WTI Like Post allows Functionality Bypass.This issue affects WTI Like Post: from n/a through 1.4.6.</description><pubDate>Fri, 17 May 2024 08:21:48 +0000</pubDate></item><item><title>CVE-2024-34370 | WordPress EAN for WooCommerce plugin &amp;lt;= 4.8.9 - Arbitrary Option Update to Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34370</link><description>Improper Privilege Management vulnerability in WPFactory EAN for WooCommerce allows Privilege Escalation.This issue affects EAN for WooCommerce: from n/a through 4.8.9.</description><pubDate>Fri, 17 May 2024 08:21:48 +0000</pubDate></item><item><title>CVE-2024-34434 | WordPress MDTF – Meta Data and Taxonomies Filter plugin &amp;lt;= 1.3.3.2 - Arbitrary Shortcode Execution vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34434</link><description>Incorrect Authorization vulnerability in realmag777 WordPress Meta Data and Taxonomies Filter (MDTF) allows Code Inclusion, Functionality Misuse.This issue affects WordPress Meta Data and Taxonomies Filter (MDTF): from n/a through 1.3.3.2.</description><pubDate>Fri, 17 May 2024 08:21:49 +0000</pubDate></item><item><title>CVE-2024-35110 | A reflected XSS vulnerability has been found in YzmCMS 7.1. The vulnerability exists in yzmphp/core/class/application.class.php: when logged...</title><link>https://www.cve.org/CVERecord?id=CVE-2024-35110</link><description>A reflected XSS vulnerability has been found in YzmCMS 7.1. The vulnerability exists in yzmphp/core/class/application.class.php: when logged-in users access a malicious link, their cookies can be captured by an attacker.</description><pubDate>Fri, 17 May 2024 08:21:50 +0000</pubDate></item><item><title>CVE-2023-39163 | WordPress Phlox Shop plugin &amp;lt;= 2.0.0 - Unauthenticated Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-39163</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Averta Phlox Shop allows PHP Local File Inclusion.This issue affects Phlox Shop: from n/a through 2.0.0.</description><pubDate>Fri, 17 May 2024 06:59:23 +0000</pubDate></item><item><title>CVE-2023-41243 | WordPress WPvivid Backup Plugin plugin &amp;lt;= 0.9.90 - Privilege Escalation on Staging Environment vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-41243</link><description>Improper Privilege Management vulnerability in WPvivid Team WPvivid Backup and Migration allows Privilege Escalation.This issue affects WPvivid Backup and Migration: from n/a through 0.9.90.</description><pubDate>Fri, 17 May 2024 06:59:24 +0000</pubDate></item><item><title>CVE-2023-41665 | WordPress GiveWP plugin &amp;lt;= 2.33.0 - GiveWP Manager+ Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-41665</link><description>Improper Privilege Management vulnerability in GiveWP allows Privilege Escalation.This issue affects GiveWP: from n/a through 2.33.0.</description><pubDate>Fri, 17 May 2024 06:59:24 +0000</pubDate></item><item><title>CVE-2023-41954 | WordPress ProfilePress plugin &amp;lt;= 4.13.1 - Unauthenticated Limited Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-41954</link><description>Improper Privilege Management vulnerability in ProfilePress Membership Team ProfilePress allows Privilege Escalation.This issue affects ProfilePress: from n/a through 4.13.1.</description><pubDate>Fri, 17 May 2024 06:59:24 +0000</pubDate></item><item><title>CVE-2023-41955 | WordPress Essential Addons for Elementor plugin &amp;lt;= 5.8.8 - Contributor+ Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-41955</link><description>Improper Privilege Management vulnerability in WPDeveloper Essential Addons for Elementor allows Privilege Escalation.This issue affects Essential Addons for Elementor: from n/a through 5.8.8.</description><pubDate>Fri, 17 May 2024 06:59:25 +0000</pubDate></item><item><title>CVE-2023-41956 | WordPress Simple Membership plugin &amp;lt;= 4.3.4 - Authenticated Account Takeover vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-41956</link><description>Improper Authentication vulnerability in smp7, wp.Insider Simple Membership.This issue affects Simple Membership: from n/a through 4.3.4.</description><pubDate>Fri, 17 May 2024 06:59:25 +0000</pubDate></item><item><title>CVE-2023-41957 | WordPress Simple Membership plugin &amp;lt;= 4.3.4 - Unauthenticated Membership Role Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-41957</link><description>Improper Privilege Management vulnerability in smp7, wp.Insider Simple Membership allows Privilege Escalation.This issue affects Simple Membership: from n/a through 4.3.4.</description><pubDate>Fri, 17 May 2024 06:59:26 +0000</pubDate></item><item><title>CVE-2023-34186 | WordPress Headless CMS plugin &amp;lt;= 2.0.3 - Broken Authentication vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-34186</link><description>Missing Authorization vulnerability in Imran Sayed Headless CMS.This issue affects Headless CMS: from n/a through 2.0.3.</description><pubDate>Fri, 17 May 2024 06:59:26 +0000</pubDate></item><item><title>CVE-2023-35881 | WordPress WooCommerce One Page Checkout plugin &amp;lt;= 2.3.0 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-35881</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in WooCommerce WooCommerce One Page Checkout allows PHP Local File Inclusion.This issue affects WooCommerce One Page Checkout: from n/a through 2.3.0.</description><pubDate>Fri, 17 May 2024 06:59:27 +0000</pubDate></item><item><title>CVE-2023-37385 | WordPress Consulting theme &amp;lt;= 6.5.6 - Local File Inclusion</title><link>https://www.cve.org/CVERecord?id=CVE-2023-37385</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in StylemixThemes Consulting allows PHP Local File Inclusion.This issue affects Consulting: from n/a through 6.5.6.</description><pubDate>Fri, 17 May 2024 06:59:27 +0000</pubDate></item><item><title>CVE-2023-37389 | WordPress Booking Package SAASPROJECT plugin &amp;lt;= 1.5.98 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-37389</link><description>Improper Privilege Management vulnerability in SAASPROJECT Booking Package Booking Package allows Privilege Escalation.This issue affects Booking Package: from n/a through 1.5.98.</description><pubDate>Fri, 17 May 2024 06:59:28 +0000</pubDate></item><item><title>CVE-2023-37866 | WordPress JetFormBuilder plugin &amp;lt;= 3.0.8 - Authenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-37866</link><description>Improper Privilege Management vulnerability in Crocoblock JetFormBuilder allows Privilege Escalation.This issue affects JetFormBuilder: from n/a through 3.0.8.</description><pubDate>Fri, 17 May 2024 06:59:28 +0000</pubDate></item><item><title>CVE-2023-37888 | WordPress Phlox Core Elements plugin &amp;lt;= 2.14.0 - Unauthenticated Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-37888</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in By Averta Shortcodes and extra features for Phlox theme allows PHP Local File Inclusion.This issue affects Shortcodes and extra features for Phlox theme: from n/a through 2.14.0.</description><pubDate>Fri, 17 May 2024 06:59:28 +0000</pubDate></item><item><title>CVE-2023-37999 | WordPress HT Mega Absolute Addons for Elementor plugin &amp;lt;= 2.2.0 - Unauthenticated Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-37999</link><description>Improper Privilege Management vulnerability in HasThemes HT Mega allows Privilege Escalation.This issue affects HT Mega: from n/a through 2.2.0.</description><pubDate>Fri, 17 May 2024 06:59:29 +0000</pubDate></item><item><title>CVE-2023-38399 | WordPress Phlox Portfolio plugin &amp;lt;= 2.3.1 - Unauthenticated Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-38399</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Averta Phlox Portfolio allows PHP Local File Inclusion.This issue affects Phlox Portfolio: from n/a through 2.3.1.</description><pubDate>Fri, 17 May 2024 06:59:29 +0000</pubDate></item><item><title>CVE-2023-25701 | WordPress WatchTowerHQ plugin &amp;lt;= 3.6.16 - Privilege Escalation</title><link>https://www.cve.org/CVERecord?id=CVE-2023-25701</link><description>Improper Privilege Management vulnerability in WhatArmy WatchTowerHQ allows Privilege Escalation.This issue affects WatchTowerHQ: from n/a through 3.6.16.</description><pubDate>Fri, 17 May 2024 06:49:34 +0000</pubDate></item><item><title>CVE-2023-26009 | WordPress Houzez Login Register plugin &amp;lt;= 2.6.3 - Privilege Escalation</title><link>https://www.cve.org/CVERecord?id=CVE-2023-26009</link><description>Improper Privilege Management vulnerability in favethemes Houzez Login Register allows Privilege Escalation.This issue affects Houzez Login Register: from n/a through 2.6.3.</description><pubDate>Fri, 17 May 2024 06:49:34 +0000</pubDate></item><item><title>CVE-2023-26526 | WordPress Bookly plugin &amp;lt;= 21.7.1 - Authenticated Arbitrary File Deletion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-26526</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Nota-Info Bookly allows Path Traversal, Manipulating Web Input to File System Calls.This issue affects Bookly: from n/a through 21.7.1.</description><pubDate>Fri, 17 May 2024 06:49:35 +0000</pubDate></item><item><title>CVE-2023-26540 | WordPress Houzez theme &amp;lt;= 2.7.1 - Privilege Escalation</title><link>https://www.cve.org/CVERecord?id=CVE-2023-26540</link><description>Improper Privilege Management vulnerability in Favethemes Houzez allows Privilege Escalation.This issue affects Houzez: from n/a through 2.7.1.</description><pubDate>Fri, 17 May 2024 06:49:35 +0000</pubDate></item><item><title>CVE-2023-32110 | WordPress JupiterX theme &amp;lt;= 3.0.0 - Auth. Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-32110</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in artbees JupiterX allows PHP Local File Inclusion.This issue affects JupiterX: from n/a through 3.0.0.</description><pubDate>Fri, 17 May 2024 06:49:35 +0000</pubDate></item><item><title>CVE-2023-32129 | WordPress Editorialmag theme &amp;lt;= 1.1.9 - Authenticated Arbitrary Plugin Activation</title><link>https://www.cve.org/CVERecord?id=CVE-2023-32129</link><description>Missing Authorization vulnerability in Sparkle WP Editorialmag editorialmag.This issue affects Editorialmag: from n/a through 1.1.9.</description><pubDate>Fri, 17 May 2024 06:49:36 +0000</pubDate></item><item><title>CVE-2023-32244 | WordPress Woodmart Core plugin &amp;lt;= 1.0.36 - Privilege Escalation</title><link>https://www.cve.org/CVERecord?id=CVE-2023-32244</link><description>Improper Privilege Management vulnerability in XTemos Woodmart Core allows Privilege Escalation.This issue affects Woodmart Core: from n/a through 1.0.36.</description><pubDate>Fri, 17 May 2024 06:49:36 +0000</pubDate></item><item><title>CVE-2023-32297 | WordPress LWS Affiliation plugin &amp;lt;= 2.2.6 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-32297</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in LWS LWS Affiliation allows PHP Local File Inclusion.This issue affects LWS Affiliation: from n/a through 2.2.6.</description><pubDate>Fri, 17 May 2024 06:49:36 +0000</pubDate></item><item><title>CVE-2023-33310 | WordPress Unite Gallery Lite plugin &amp;lt;= 1.7.59 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-33310</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Valiano Unite Gallery Lite allows PHP Local File Inclusion.This issue affects Unite Gallery Lite: from n/a through 1.7.59.</description><pubDate>Fri, 17 May 2024 06:49:37 +0000</pubDate></item><item><title>CVE-2023-33321 | WordPress EventPrime plugin &amp;lt;= 2.8.6 - Sensitive Data Exposure</title><link>https://www.cve.org/CVERecord?id=CVE-2023-33321</link><description>Missing Authorization vulnerability in Metagauss EventPrime allows Exploiting Incorrectly Configured Access Control Security Levels.This issue affects EventPrime: from n/a through 2.8.6.</description><pubDate>Fri, 17 May 2024 06:49:37 +0000</pubDate></item><item><title>CVE-2023-23888 | WordPress Rank Math SEO plugin &amp;lt;= 1.0.107.2 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-23888</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Rank Math Rank Math SEO allows Path Traversal.This issue affects Rank Math SEO: from n/a through 1.0.107.2.</description><pubDate>Fri, 17 May 2024 06:49:38 +0000</pubDate></item><item><title>CVE-2023-23988 | WordPress My Tickets plugin &amp;lt;= 1.9.11 - Payment Bypass Vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-23988</link><description>Missing Authorization vulnerability in Joseph C Dolson My Tickets.This issue affects My Tickets: from n/a through 1.9.11.</description><pubDate>Fri, 17 May 2024 06:49:38 +0000</pubDate></item><item><title>CVE-2023-23990 | WordPress Redirection for Contact Form 7 plugin &amp;lt;= 2.7.0 - Privilege Escalation vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-23990</link><description>Improper Privilege Management vulnerability in Qube One Ltd. Redirection for Contact Form 7 wpcf7-redirect allows Privilege Escalation.This issue affects Redirection for Contact Form 7: from n/a through 2.7.0.</description><pubDate>Fri, 17 May 2024 06:49:39 +0000</pubDate></item><item><title>CVE-2023-24379 | WordPress Landing Page Builder – Free Landing Page Templates plugin &amp;lt;= 3.1.9.9 - Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-24379</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Web-Settler Landing Page Builder – Free Landing Page Templates allows Path Traversal.This issue affects Landing Page Builder – Free Landing Page Templates: from n/a through 3.1.9.9.</description><pubDate>Fri, 17 May 2024 06:49:39 +0000</pubDate></item><item><title>CVE-2023-25050 | WordPress Shortcodes Ultimate plugin &amp;lt;= 5.12.6 - Arbitrary File Download vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-25050</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Vova Anokhin Shortcodes Ultimate allows Absolute Path Traversal.This issue affects Shortcodes Ultimate: from n/a through 5.12.6.</description><pubDate>Fri, 17 May 2024 06:49:39 +0000</pubDate></item><item><title>CVE-2023-25444 | WordPress JS Help Desk – Best Help Desk &amp;amp; Support Plugin plugin &amp;lt;= 2.7.7 - Arbitrary File Upload vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-25444</link><description>Unrestricted Upload of File with Dangerous Type vulnerability in JS Help Desk JS Help Desk – Best Help Desk &amp; Support Plugin allows Using Malicious Files.This issue affects JS Help Desk – Best Help Desk &amp; Support Plugin: from n/a through 2.7.7.</description><pubDate>Fri, 17 May 2024 06:49:40 +0000</pubDate></item><item><title>CVE-2022-44581 | WordPress Defender Security plugin &amp;lt;= 3.3.2 - Broken Authentication vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2022-44581</link><description>Insecure Storage of Sensitive Information vulnerability in WPMU DEV Defender Security allows : Screen Temporary Files for Sensitive Information.This issue affects Defender Security: from n/a through 3.3.2.</description><pubDate>Fri, 17 May 2024 06:39:25 +0000</pubDate></item><item><title>CVE-2022-45070 | WordPress Conditional Checkout Fields for WooCommerce plugin &amp;lt;= 1.2.3 - Broken Authentication vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2022-45070</link><description>Missing Authorization vulnerability in FmeAddons Conditional Checkout Fields for WooCommerce.This issue affects Conditional Checkout Fields for WooCommerce: from n/a through 1.2.3.</description><pubDate>Fri, 17 May 2024 06:39:25 +0000</pubDate></item><item><title>CVE-2022-45368 | WordPress 1003 Mortgage Application plugin &amp;lt;= 1.75 - Local File Inclusion</title><link>https://www.cve.org/CVERecord?id=CVE-2022-45368</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in Lenderd 1003 Mortgage Application allows Relative Path Traversal.This issue affects 1003 Mortgage Application: from n/a through 1.75.</description><pubDate>Fri, 17 May 2024 06:39:25 +0000</pubDate></item><item><title>CVE-2022-45374 | WordPress Yet Another Related Posts Plugin (YARPP) plugin &amp;lt;= 5.30.4 - Local File Inclusion</title><link>https://www.cve.org/CVERecord?id=CVE-2022-45374</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in YARPP allows PHP Local File Inclusion.This issue affects YARPP: from n/a through 5.30.4.</description><pubDate>Fri, 17 May 2024 06:39:26 +0000</pubDate></item><item><title>CVE-2023-23645 | WordPress MainWP Code Snippets Extension Plugin &amp;lt;= 4.0.2 - Subscriber+ Arbitrary PHP Code Injection/Execution Vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-23645</link><description>Improper Control of Generation of Code ('Code Injection') vulnerability in MainWP MainWP Code Snippets Extension allows Code Injection.This issue affects MainWP Code Snippets Extension: from n/a through 4.0.2.</description><pubDate>Fri, 17 May 2024 06:39:26 +0000</pubDate></item><item><title>CVE-2023-23700 | WordPress OceanWP theme &amp;lt;= 3.4.1 - Authenticated Local File Inclusion vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-23700</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in OceanWP allows PHP Local File Inclusion.This issue affects OceanWP: from n/a through 3.4.1.</description><pubDate>Fri, 17 May 2024 06:39:26 +0000</pubDate></item><item><title>CVE-2023-23872 | WordPress GMAce plugin &amp;lt;= 1.5.2 - Arbitrary File Download vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2023-23872</link><description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in German Mesky GMAce allows Path Traversal.This issue affects GMAce: from n/a through 1.5.2.</description><pubDate>Fri, 17 May 2024 06:39:27 +0000</pubDate></item><item><title>CVE-2024-31351 | WordPress Copymatic plugin &amp;lt;= 1.6 - Unauthenticated Arbitrary File Upload vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-31351</link><description>Unrestricted Upload of File with Dangerous Type vulnerability in Copymatic Copymatic – AI Content Writer &amp; Generator.This issue affects Copymatic – AI Content Writer &amp; Generator: from n/a through 1.6.</description><pubDate>Fri, 17 May 2024 06:27:31 +0000</pubDate></item><item><title>CVE-2024-33556 | WordPress XStore Core plugin &amp;lt;= 5.3.8 - Limited Arbitrary File Upload vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-33556</link><description>Unrestricted Upload of File with Dangerous Type vulnerability in 8theme XStore Core.This issue affects XStore Core: from n/a through 5.3.8.</description><pubDate>Fri, 17 May 2024 06:27:31 +0000</pubDate></item><item><title>CVE-2024-32800 | WordPress Popup – Popup More Popups plugin &amp;lt;= 2.3.1 - Cross Site Scripting (XSS) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-32800</link><description>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in Felix Moira Popup More Popups allows Stored XSS.This issue affects Popup More Popups: from n/a through 2.3.1.</description><pubDate>Fri, 17 May 2024 06:27:32 +0000</pubDate></item><item><title>CVE-2024-34567 | WordPress Easy Notify Lite plugin &amp;lt;= 1.1.29 - Cross Site Scripting (XSS) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34567</link><description>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in GhozyLab, Inc. Popup Builder allows Stored XSS.This issue affects Popup Builder: from n/a through 1.1.29.</description><pubDate>Fri, 17 May 2024 06:27:32 +0000</pubDate></item><item><title>CVE-2024-34575 | WordPress DethemeKit For Elementor plugin &amp;lt;= 2.1.2 - Cross Site Scripting (XSS) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34575</link><description>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in deTheme DethemeKit For Elementor allows Stored XSS.This issue affects DethemeKit For Elementor: from n/a through 2.1.2.</description><pubDate>Fri, 17 May 2024 06:27:32 +0000</pubDate></item><item><title>CVE-2024-2697 | Swift Framework &amp;lt; 2024.0.0 - Contributor+ Stored XSS via Shortcode</title><link>https://www.cve.org/CVERecord?id=CVE-2024-2697</link><description>The socialdriver-framework WordPress plugin before 2024.0.0 does not validate and escape some of its shortcode attributes before outputting them back in the page, which could allow users with a role as low as contributor to perform Stored Cross-Site Scripting attacks which could be used against high privilege users such as admins.</description><pubDate>Fri, 17 May 2024 06:27:33 +0000</pubDate></item><item><title>CVE-2024-2744 | Nextgen Gallery &amp;lt; 3.59.1 - Admin+ Stored XSS</title><link>https://www.cve.org/CVERecord?id=CVE-2024-2744</link><description>The NextGEN Gallery  WordPress plugin before 3.59.1 does not sanitise and escape some of its settings, which could allow high privilege users such as admin to perform Cross-Site Scripting attacks even when unfiltered_html is disallowed</description><pubDate>Fri, 17 May 2024 06:27:33 +0000</pubDate></item><item><title>CVE-2024-34752 | WordPress Landing Page Builder &amp;lt;= 1.5.1.8 - Cross Site Scripting (XSS) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34752</link><description>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in PluginOps Landing Page Builder allows Reflected XSS.This issue affects Landing Page Builder: from n/a through 1.5.1.8.</description><pubDate>Fri, 17 May 2024 06:27:34 +0000</pubDate></item><item><title>CVE-2024-34757 | WordPress Borderless – Widgets, Elements, Templates and Toolkit for Elementor &amp;amp; Gutenberg plugin &amp;lt;= 1.5.3 - Cross Site Scripting (XSS) vulnerability</title><link>https://www.cve.org/CVERecord?id=CVE-2024-34757</link><description>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in Visualmodo Borderless – Widgets, Elements, Templates and Toolkit for Elementor &amp; Gutenberg allows Stored XSS.This issue affects Borderless – Widgets, Elements, Templates and Toolkit for Elementor &amp; Gutenberg: from n/a through 1.5.3.</description><pubDate>Fri, 17 May 2024 06:27:34 +0000</pubDate></item><item><title>CVE-2024-3231 | Popup4Phone &amp;lt;= 1.3.2 - Unauthenticated Stored XSS</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3231</link><description>The Popup4Phone WordPress plugin through 1.3.2 does not sanitise and escape some parameters, which could allow unauthenticated users to perform Cross-Site Scripting attacks against admins.</description><pubDate>Fri, 17 May 2024 06:27:34 +0000</pubDate></item><item><title>CVE-2024-3580 | Popup4Phone &amp;lt;= 1.3.2 - Editor+ Stored XSS</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3580</link><description>The Popup4Phone WordPress plugin through 1.3.2 does not sanitise and escape some of its settings, which could allow high privilege users such as Editor to perform Stored Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed (for example in multisite setup)</description><pubDate>Fri, 17 May 2024 06:27:35 +0000</pubDate></item><item><title>CVE-2024-3551 | Penci Soledad Data Migrator &amp;lt;= 1.3.0 - Unauthenticated Local File Inclusion</title><link>https://www.cve.org/CVERecord?id=CVE-2024-3551</link><description>The Penci Soledad Data Migrator plugin for WordPress is vulnerable to Local File Inclusion in all versions up to, and including, 1.3.0 via the 'data' parameter. This makes it possible for unauthenticated attackers to include and execute arbitrary files on the server, allowing the execution of any PHP code in those files. This can be used to bypass access controls, obtain sensitive data, or achieve code execution in cases where images and other “safe” file types can be uploaded and included. This is limited to just PHP files.</description><pubDate>Fri, 17 May 2024 02:07:50 +0000</pubDate></item></channel></rss>